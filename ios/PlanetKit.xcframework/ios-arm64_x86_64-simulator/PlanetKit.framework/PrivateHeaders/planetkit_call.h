/**
 * @file planetkit_call.h
 * @brief write some brief information here.
 *
 * @date 2019-12-20
 *
 * Generated by author
 *
 */
#ifndef __PLANETKIT_CALL_H__
#define __PLANETKIT_CALL_H__

/*************************************************************************
* INCLUDE
*************************************************************************/
#include "planetkit_common.h"
#include "planetkit_common_type.h"
#include "planetkit_common_event.h"
#include "planetkit_data_sess.h"
#include "planetkit_send_voice_processor.h"
#include "planetkit_cc_param.h"
#include "planetkit_call_start_message.h"
#include "planetkit_my_status.h"

#if defined(__cplusplus)
extern "C" {
#endif
/*************************************************************************
* DATA STRUCTURE
*************************************************************************/

typedef struct planetkit_call   planetkit_call_t;

typedef struct planetkit_call_video_param_t {
    planetkit_video_capa_t          tx_capa;
    planetkit_video_capa_t          rx_capa;

    planetkit_vid_handler_t         NONNULL rx_handler;
    void                        *   NULLABLE user_ptr;
} planetkit_call_video_param_t;

typedef struct planetkit_call_scrn_shr_param_t {
    planetkit_vid_handler_t         NONNULL rx_handler;
    void                        *   NULLABLE user_ptr;
} planetkit_call_scrn_shr_param_t;

typedef struct planetkit_call_make_call_param_t {
    /* HAVE TO call "planetkit_call_make_call_param_init" first before use it */
    int                             _init;

    const char                  *   NONNULL my_id;
    const char                  *   NONNULL my_service_id;
    const char                  *   NULLABLE my_country_code;
    const char                  *   NONNULL peer_id;
    const char                  *   NONNULL peer_service_id;
    const char                  *   NULLABLE peer_country_code;

    const char                  *   NULLABLE app_server_data;   // Maximum size of app_server_data is 4096 bytes including null termination

    planetkit_param_bool_e          start_with_video;
    planetkit_param_bool_e          enable_statistics;

    planetkit_initial_my_video_state_e initial_my_video_state;

    planetkit_call_video_param_t    vid_param;
    planetkit_call_scrn_shr_param_t scrn_shr_param;
    planetkit_comm_param_t          comm_param;

    kit_bool_t                      use_rsp_prep;
    planetkit_call_start_message_t  *   NULLABLE start_message;

    planetkit_param_bool_e          record_on_cloud; // DO NOT set this to true before consulting with LINE Planet team.
                                                     // If you want to use this feature, please contact us. (https://docs.lineplanet.me/ko/help/contact)

    void                        *   NONNULL arg;
    planetkit_evt_handler_t         NONNULL handler;
} planetkit_call_make_call_param_t;

typedef struct planetkit_call_verify_call_param_t {
    /* HAVE TO call "planetkit_call_verify_call_param_init" first before use it */
    int                             _init;

    const char                  *   NONNULL my_id;
    const char                  *   NONNULL my_service_id;
    planetkit_cc_param_t        *   NONNULL cc_param;

    planetkit_call_video_param_t    vid_param;
    planetkit_call_scrn_shr_param_t scrn_shr_param;
    planetkit_comm_param_t          comm_param;

    planetkit_param_bool_e          enable_statistics;

    void                        *   NONNULL arg;
    planetkit_evt_handler_t         NONNULL handler;
} planetkit_call_verify_call_param_t;

/*************************************************************************
* API DEFINITION
*************************************************************************/
planetkit_call_t * NULLABLE planetkit_call_create();
planetkit_start_fail_reason_e planetkit_call_make_with_api_key(planetkit_call_t * NONNULL call,
                                                               planetkit_str_t NONNULL api_key, planetkit_call_make_call_param_t * NONNULL call_param);
planetkit_start_fail_reason_e planetkit_call_make_call(planetkit_call_t * NONNULL call,
                                                       planetkit_str_t NONNULL access_token, planetkit_call_make_call_param_t * NONNULL call_param);
planetkit_start_fail_reason_e planetkit_call_verify_call(planetkit_call_t * NONNULL call, planetkit_call_verify_call_param_t * NONNULL verify_param);

/**
 * @param record_on_cloud DO NOT set this to true before consulting with LINE Planet team.
 *                        If you want to use this feature, please contact us. (https://docs.lineplanet.me/ko/help/contact)
 */
void            planetkit_call_accept_call(planetkit_call_t * NONNULL call, planetkit_call_start_message_t *NULLABLE start_message, kit_bool_t use_rsp_prep, kit_bool_t record_on_cloud,
                                           planetkit_initial_my_video_state_e initial_my_video_state);
kit_bool_t      planetkit_call_finish_preparation(planetkit_call_t * NONNULL call);

/**
 * @param user_rel_code Maximum size of user_rel_code is 128 bytes including null termination
 */
void            planetkit_call_end_call_with_normal_user_release_code(planetkit_call_t * NONNULL call, const char *NONNULL user_rel_code);
void            planetkit_call_end_call_with_error_user_release_code(planetkit_call_t * NONNULL call, const char *NONNULL user_rel_code);
void            planetkit_call_end_call(planetkit_call_t * NONNULL call, planetkit_disconnect_reason_e end_reason);

/**
 * @param internal_rel_code Maximum size of internal_rel_code is 128 bytes including null termination
 */
void            planetkit_call_end_call_with_kit_internal_error(planetkit_call_t * NONNULL call, planetkit_str_t NONNULL internal_rel_code);

kit_bool_t      planetkit_call_enable_video(planetkit_call_t * NONNULL call, planetkit_initial_my_video_state_e initial_video_state, void * NULLABLE result_user, planetkit_result_handler_t NULLABLE result_handler);
kit_bool_t      planetkit_call_disable_video(planetkit_call_t * NONNULL call, planetkit_media_disable_reason_e reason, void * NULLABLE result_user, planetkit_result_handler_t NULLABLE result_handler);

int32_t         planetkit_call_get_duration(planetkit_call_t * NONNULL call);

/**
 * @param hold_reason Maximum size of hold_reason is 256 bytes including null termination
 */
kit_bool_t      planetkit_call_hold(planetkit_call_t * NONNULL call, planetkit_str_t NULLABLE hold_reason,
                                    void * NULLABLE user_ptr, planetkit_result_handler_t NULLABLE result_handler);
kit_bool_t      planetkit_call_unhold(planetkit_call_t * NONNULL call, void * NULLABLE user_ptr, planetkit_result_handler_t NULLABLE result_handler);
kit_bool_t      planetkit_call_is_on_hold(planetkit_call_t * NONNULL call);

kit_bool_t  planetkit_call_retain(planetkit_call_t * NONNULL call);
void        planetkit_call_release(planetkit_call_t * NONNULL call);

int32_t     planetkit_call_send_my_audio_data(planetkit_call_t * NONNULL call,
                                              int32_t sampling_rate, planetkit_audio_sample_type_e sample_format,
                                              const void * NONNULL data_ptr, int32_t data_len,
                                              planetkit_audio_tx_level_t * NULLABLE audio_level);
int32_t     planetkit_call_put_user_acoustic_echo_canceller_reference(planetkit_call_t * NONNULL call,
                                                                      int32_t sampling_rate, planetkit_audio_sample_type_e sample_format,
                                                                      const void * NONNULL data_ptr, int32_t data_len);
kit_bool_t  planetkit_call_start_user_acoustic_echo_canceller_reference(planetkit_call_t * NONNULL call, void * NULLABLE user_ptr, planetkit_result_handler_t NULLABLE result_handler);
kit_bool_t  planetkit_call_stop_user_acoustic_echo_canceller_reference(planetkit_call_t * NONNULL call, void * NULLABLE user_ptr, planetkit_result_handler_t NULLABLE result_handler);
int32_t     planetkit_call_get_peer_audio_data(planetkit_call_t * NONNULL call,
                                               int32_t sampling_rate, planetkit_audio_sample_type_e sample_format,
                                               int32_t sample_cnt_to_get, void * NONNULL buf_ptr, int32_t buf_size,
                                               planetkit_audio_rx_level_t * NULLABLE audio_level);
int32_t     planetkit_call_send_my_video_data(planetkit_call_t * NONNULL call, int64_t tick, int32_t width, int32_t height,
                                              planetkit_video_rotation_e rotation, const void * NONNULL data_ptr);
kit_bool_t  planetkit_call_is_video_sending_available(planetkit_call_t *NONNULL call, int64_t tick);

kit_bool_t      planetkit_call_mute_my_audio(planetkit_call_t * NONNULL call, kit_bool_t mute_on, void * NULLABLE mute_user_ptr,
                                             planetkit_result_handler_t NULLABLE mute_result_handler);
kit_bool_t      planetkit_call_silence_peer_audio(planetkit_call_t * NONNULL call, kit_bool_t silence,
                                                  void * NULLABLE result_user, planetkit_result_handler_t NULLABLE result_handler);
kit_bool_t      planetkit_call_set_audio_route(planetkit_call_t * NONNULL call,
                                               planetkit_audio_route_type_e audio_route_type, kit_bool_t has_any_virtual_dev);
kit_bool_t      planetkit_call_pause_my_video(planetkit_call_t * NONNULL call, planetkit_video_pause_reason_e reason,
                                              void * NULLABLE pause_user_ptr,
                                              planetkit_result_handler_t NULLABLE pause_result_handler);
kit_bool_t      planetkit_call_resume_my_video(planetkit_call_t * NONNULL call,
                                               void * NULLABLE resume_user_ptr,
                                               planetkit_result_handler_t NULLABLE resume_result_handler);
kit_bool_t      planetkit_call_pause_my_audio(planetkit_call_t * NONNULL call, planetkit_audio_pause_reason_e reason,
                                              void * NULLABLE pause_user_ptr, planetkit_result_handler_t NULLABLE pause_result_handler);
kit_bool_t      planetkit_call_resume_my_audio(planetkit_call_t * NONNULL call,
                                               void * NULLABLE resume_user_ptr,
                                               planetkit_result_handler_t NULLABLE resume_result_handler);


void            planetkit_call_get_peer_video_status(planetkit_call_t * NONNULL call, planetkit_video_status_t * NONNULL out_video_status);

kit_bool_t      planetkit_call_request_peer_mute(planetkit_call_t * NONNULL call, kit_bool_t mute_on,
                                                 void * NULLABLE user_ptr, planetkit_result_handler_t NULLABLE result_handler);

kit_bool_t      planetkit_call_is_my_audio_muted(planetkit_call_t * NONNULL call);
kit_bool_t      planetkit_call_is_peer_audio_silenced(planetkit_call_t * NONNULL call);
kit_bool_t      planetkit_call_is_peer_audio_muted(planetkit_call_t * NONNULL call);
void            planetkit_call_get_my_video_status(planetkit_call_t * NONNULL call, planetkit_video_status_t * NONNULL out_video_status);
kit_bool_t      planetkit_call_is_record_on_cloud_activated(planetkit_call_t * NONNULL call);

/**
 * @param data_type Type of the short data. The maximum size of data_type is 100 bytes including null termination.
 * @param data_size Size of the short data. The maximum size of data is 800 bytes.
 */
kit_bool_t      planetkit_call_send_short_data_to_peer(planetkit_call_t * NONNULL call,
                                                       const char * NONNULL data_type,
                                                       const void * NONNULL data_ptr, int32_t data_size,
                                                       void * NONNULL sresult_user, planetkit_result_handler_t NONNULL result_handler);
kit_bool_t      planetkit_call_get_statistics(planetkit_call_t * NONNULL call, planetkit_statistics_t *NONNULL out_statistics);

planetkit_my_media_status_t * NULLABLE planetkit_call_get_my_media_status(planetkit_call_t * NONNULL call);

/**
 * Screen share API set
 */
kit_bool_t      planetkit_call_start_my_screen_share(planetkit_call_t * NONNULL call,
                                                     void * NULLABLE user_ptr, planetkit_result_handler_t NULLABLE result_handler);
kit_bool_t      planetkit_call_stop_my_screen_share(planetkit_call_t * NONNULL call,
                                                    void * NULLABLE user_ptr, planetkit_result_handler_t NULLABLE result_handler);
kit_bool_t      planetkit_call_stop_my_screen_share_with_reason(planetkit_call_t * NONNULL call, int32_t reason,
                                                                void * NULLABLE user_ptr, planetkit_result_handler_t NULLABLE result_handler);
int32_t         planetkit_call_send_my_screen_share_data(planetkit_call_t * NONNULL call, int64_t tick, int32_t width, int32_t height,
                                                         planetkit_video_rotation_e rotation, const void * NONNULL data_ptr);
kit_bool_t      planetkit_call_is_screen_share_sending_available(planetkit_call_t *NONNULL call, int64_t tick);
/**
 * Enable or disable the video share mode in screen share.
 * The video share mode optimizes screen share for video clip sharing. When the video share mode is enabled, resource usage may increase.
 * The video share mode can be enabled before starting screen share or during ongoing screen share.
 */
kit_bool_t      planetkit_call_set_my_screen_share_video_share_mode(planetkit_call_t * NONNULL call, kit_bool_t video_share_mode);
/**
 * Get whether the video share mode is enabled.
 */
kit_bool_t      planetkit_call_is_my_screen_share_video_share_mode_enabled(planetkit_call_t * NONNULL call);


/**
* Contents sharing API set
*/
kit_bool_t     planetkit_call_set_shared_contents(planetkit_call_t * NONNULL call, const void * NONNULL shared_contents, int32_t shared_contents_size,
                                                  void * NULLABLE user_ptr, planetkit_result_handler_t NULLABLE result_handler);
kit_bool_t     planetkit_call_unset_shared_contents(planetkit_call_t * NONNULL call,
                                                    void * NULLABLE user_ptr, planetkit_result_handler_t NULLABLE result_handler);
kit_bool_t     planetkit_call_set_exclusively_shared_contents(planetkit_call_t * NONNULL call, const void * NONNULL shared_contents, int32_t shared_contents_size,
                                                              void * NULLABLE user_ptr, planetkit_result_handler_t NULLABLE result_handler);
kit_bool_t     planetkit_call_unset_exclusively_shared_contents(planetkit_call_t * NONNULL call,
                                                                void * NULLABLE user_ptr, planetkit_result_handler_t NULLABLE result_handler);


/**
 * Data session API set
 */
kit_bool_t     planetkit_call_make_outbound_data_session(planetkit_call_t * NONNULL call, planetkit_data_session_outbound_create_param_t *NONNULL create_param);
kit_bool_t     planetkit_call_make_inbound_data_session(planetkit_call_t * NONNULL call, planetkit_data_session_inbound_create_param_t *NONNULL create_param);
kit_bool_t     planetkit_call_unsupport_inbound_data_session(planetkit_call_t * NONNULL call, planetkit_data_session_stream_id_t stream_id);

/**
 * Voice Processor Instance Getter
 */
planetkit_send_voice_processor_t * NONNULL planetkit_call_get_send_voice_processor(planetkit_call_t * NONNULL call);

/**
 * Hook my audio
 */
kit_bool_t      planetkit_call_put_hooked_my_audio_back(planetkit_call_t *NONNULL call, planetkit_hooked_audio_t *NONNULL hooked_audio);
kit_bool_t      planetkit_call_put_hooked_my_audio_back_with_params(planetkit_call_t *NONNULL call, uint32_t sample_rate, uint32_t channel, planetkit_audio_sample_type_e sample_type, uint32_t sample_count,
                                                                    int64_t seq, const void *NONNULL data_ptr, int32_t data_len);

kit_bool_t      planetkit_call_enable_hook_my_audio(planetkit_call_t * NONNULL call, void *NULLABLE hook_my_audio_cb_user_ptr, planetkit_hook_my_audio_cb_t NULLABLE hook_my_audio_cb,
                                                    void * NULLABLE result_user_ptr, planetkit_result_handler_t NULLABLE result_handler);
kit_bool_t      planetkit_call_disable_hook_my_audio(planetkit_call_t * NONNULL call, void * NULLABLE user_ptr, planetkit_result_handler_t NULLABLE result_handler);

/**
 * User stat
 */
kit_bool_t      planetkit_call_notify_start_first_my_audio_init(planetkit_call_t * NONNULL call);
/**
 * @param err_code Maximum size of err_code is 64 bytes including null termination
 */
kit_bool_t      planetkit_call_notify_end_first_my_audio_init(planetkit_call_t * NONNULL call, planetkit_str_t NULLABLE err_code);

/**
 * Media source event
 */
kit_bool_t      planetkit_call_register_my_media_source_evt_cb(planetkit_call_t * NONNULL call, planetkit_my_media_source_evt_cb_t NONNULL cb, void *NULLABLE user_ptr,
                                                               planetkit_result_handler_t NONNULL result_handler, void *NULLABLE result_user_ptr);
void            planetkit_call_unregister_my_media_source_evt_cb(planetkit_call_t * NONNULL call, planetkit_my_media_source_evt_cb_t NONNULL cb, void *NULLABLE user_ptr);
kit_bool_t      planetkit_call_get_my_media_source_state(planetkit_call_t * NONNULL call, planetkit_my_media_source_kind_e kind, planetkit_get_my_media_source_result_cb_t NONNULL cb, void *NULLABLE user_ptr);

/**
 * Utility Functions
 */
void            planetkit_call_make_call_param_init(planetkit_call_make_call_param_t * NONNULL param);
kit_bool_t      planetkit_call_make_call_param_is_valid(planetkit_call_make_call_param_t * NONNULL param);
int32_t         planetkit_call_make_call_param_to_str(planetkit_call_make_call_param_t * NONNULL param, void * NONNULL buf, int32_t buf_size);

void            planetkit_call_verify_call_param_init(planetkit_call_verify_call_param_t * NONNULL param);
kit_bool_t      planetkit_call_verify_call_param_is_valid(planetkit_call_verify_call_param_t * NONNULL param);
int32_t         planetkit_call_verify_call_param_to_str(planetkit_call_verify_call_param_t * NONNULL param, void * NONNULL buf, int32_t buf_size);

void            planetkit_call_video_param_init(planetkit_call_video_param_t * NONNULL param);
kit_bool_t      planetkit_call_video_param_is_valid(planetkit_call_video_param_t *NONNULL param);
int32_t         planetkit_call_video_param_to_str(planetkit_call_video_param_t * NONNULL param, void * NONNULL buf, int32_t buf_size);

void            planetkit_call_scrn_shr_param_init(planetkit_call_scrn_shr_param_t * NONNULL param);
kit_bool_t      planetkit_call_scrn_shr_param_is_valid(planetkit_call_scrn_shr_param_t * NONNULL param);
int32_t         planetkit_call_scrn_shr_param_to_str(planetkit_call_scrn_shr_param_t * NONNULL param, void * NONNULL buf, int32_t buf_size);

 /**
  * Debug API set
  */
const planetkit_dbg_mon_info_t * NULLABLE planetkit_call_get_dbg_mon_info(planetkit_call_t * NONNULL call);
#if defined(__cplusplus)
}
#endif
#endif
