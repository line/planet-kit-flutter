/**
 * @file planetkit_peer_control.h
 * @brief write some brief information here.
 *
 * @date 2022-12-14
 *
 * Generated by genc_planetkit.py v1.0
 *
 */

#ifndef __PLANETKIT_PEER_CONTROL_H__
#define __PLANETKIT_PEER_CONTROL_H__


/*************************************************************************
* INCLUDE
*************************************************************************/
#include "planetkit_common_type.h"
#include "planetkit_peer.h"


#if defined(__cplusplus)
extern "C" {
#endif
/*************************************************************************
* DATA STRUCTURE
*************************************************************************/

typedef struct planetkit_peer_control_t planetkit_peer_control_t;

typedef void (*planetkit_peer_control_mic_muted_handler_t)(planetkit_peer_control_t *NONNULL peer_control, void *NULLABLE user_ptr);
typedef void (*planetkit_peer_control_mic_unmuted_handler_t)(planetkit_peer_control_t *NONNULL peer_control, void *NULLABLE user_ptr);

typedef void (*planetkit_peer_control_video_updated_handler_t)(planetkit_peer_control_t *NONNULL peer_control, planetkit_subgroup_t *NONNULL subgroup, planetkit_video_status_t *NONNULL video_status,
                                                               void *NULLABLE user_ptr);

typedef void (*planetkit_peer_control_screen_share_updated_handler_t)(planetkit_peer_control_t *NONNULL peer_control,
                                                                      planetkit_subgroup_t *NONNULL subgroup, planetkit_screen_share_state_e state, void *NULLABLE user_ptr);

typedef void (*planetkit_peer_control_subscribed_subgroup_handler_t)(planetkit_peer_control_t *NONNULL peer_control, planetkit_subgroup_t *NONNULL subgroup, void *NULLABLE user_ptr);
typedef void (*planetkit_peer_control_unsubscribed_subgroup_handler_t)(planetkit_peer_control_t *NONNULL peer_control, planetkit_subgroup_t *NONNULL subgroup, void *NULLABLE user_ptr);

typedef void (*planetkit_peer_control_subscribed_pub_subgroup_handler_t)(planetkit_peer_control_t *NONNULL peer_control, planetkit_str_t NONNULL subgrp_name, void *NULLABLE user_ptr);
typedef void (*planetkit_peer_control_unsubscribed_pub_subgroup_handler_t)(planetkit_peer_control_t *NONNULL peer_control, planetkit_str_t NONNULL subgrp_name, void *NULLABLE user_ptr);

typedef void (*planetkit_peer_control_set_shared_contents_handler_t)(planetkit_peer_control_t *NONNULL peer_control,
                                                                     uint32_t elapsed_after_set_msec,
                                                                     const void *NONNULL data, uint32_t data_size,
                                                                     void *NULLABLE user_ptr);
typedef void (*planetkit_peer_control_unset_shared_contents_handler_t)(planetkit_peer_control_t *NONNULL peer_control, void *NULLABLE user_ptr);

typedef void (*planetkit_peer_control_hold_handler_t)(planetkit_peer_control_t *NONNULL peer_control, planetkit_str_t NULLABLE reason, void *NULLABLE user_ptr);
typedef void (*planetkit_peer_control_unhold_handler_t)(planetkit_peer_control_t *NONNULL peer_control, void *NULLABLE user_ptr);

typedef void (*planetkit_peer_control_disconnected_t)(planetkit_peer_control_t *NONNULL peer_control, void *NULLABLE user_ptr);

typedef struct planetkit_peer_control_media_state_handlers_t
{
    planetkit_peer_control_mic_muted_handler_t              NULLABLE mic_muted;
    planetkit_peer_control_mic_unmuted_handler_t            NULLABLE mic_unmuted;
    planetkit_peer_control_video_updated_handler_t          NULLABLE video_updated;
    planetkit_peer_control_screen_share_updated_handler_t   NULLABLE screen_share_updated;
} planetkit_peer_control_media_state_handlers_t;

typedef struct planetkit_peer_control_subgroup_handlers_t
{
    planetkit_peer_control_subscribed_subgroup_handler_t        NULLABLE subscribed_subgroup;
    planetkit_peer_control_unsubscribed_subgroup_handler_t      NULLABLE unsubscribed_subgroup;

    planetkit_peer_control_subscribed_pub_subgroup_handler_t    NULLABLE subscribed_pub_subgroup;
    planetkit_peer_control_unsubscribed_pub_subgroup_handler_t  NULLABLE unsubscribed_pub_subgroup;
} planetkit_peer_control_subgroup_handlers_t;

typedef struct planetkit_peer_control_state_handlers_t
{
    planetkit_peer_control_hold_handler_t   NULLABLE hold;
    planetkit_peer_control_unhold_handler_t NULLABLE unhold;
    planetkit_peer_control_disconnected_t   NULLABLE disconnected;
} planetkit_peer_control_state_handlers_t;

typedef struct planetkit_peer_control_shared_contents_handlers_t
{
    planetkit_peer_control_set_shared_contents_handler_t    NULLABLE set_shared_contents;
    planetkit_peer_control_unset_shared_contents_handler_t  NULLABLE unset_shared_contents;
} planetkit_peer_control_shared_contents_handlers_t;

typedef struct planetkit_peer_control_param_t
{
    planetkit_peer_control_media_state_handlers_t                   media_state_handlers;
    planetkit_peer_control_subgroup_handlers_t                      subgroup_handlers;
    planetkit_peer_control_state_handlers_t                         state_handlers;
    planetkit_peer_control_shared_contents_handlers_t               shared_contents_handlers;
 
    planetkit_vid_handler_t                                NULLABLE vid_handler;
    planetkit_vid_handler_t                                NULLABLE scrn_shr_handler;
    void *NULLABLE                                                  user_ptr;
} planetkit_peer_control_param_t;

typedef void (*planetkit_peer_control_req_resolution_handler_t)(void *NULLABLE user_ptr,
                                                                kit_bool_t is_success,
                                                                planetkit_media_req_error_e error,
                                                                planetkit_video_resolution_e req_res,
                                                                planetkit_video_resolution_e recv_res,
                                                                planetkit_str_t NULLABLE fail_reason);

/*************************************************************************
* API DEFINITION
*************************************************************************/

planetkit_peer_control_t *NULLABLE  planetkit_peer_control_create_with_param(planetkit_peer_t *NONNULL peer, planetkit_peer_control_param_t *NONNULL param);
planetkit_peer_control_t *NULLABLE  planetkit_peer_control_create(planetkit_peer_t *NONNULL peer);
void                                planetkit_peer_control_set_param(planetkit_peer_control_t * NONNULL peer_control, planetkit_peer_control_param_t *NONNULL param);

planetkit_peer_t *NONNULL           planetkit_peer_control_get_peer(planetkit_peer_control_t * NONNULL peer_control);

void        planetkit_peer_control_release(planetkit_peer_control_t *NONNULL peer_control);
kit_bool_t  planetkit_peer_control_retain(planetkit_peer_control_t *NONNULL peer_control);

/**
 * The `planetkit_peer_control_start_video` affects call quality.
 * Please refer to the document and use this API appropriately.
 * https://docs.lineplanet.me/learn/how-tos/peer-video-resolution-in-group-call
 */
kit_bool_t  planetkit_peer_control_start_video(planetkit_peer_control_t *NONNULL peer_control, planetkit_str_t NULLABLE subgrp_name, planetkit_video_resolution_e resolution,
                                               void *NULLABLE result_user, planetkit_req_media_result_handler_t NULLABLE result_handler,
                                               void *NULLABLE resolution_user, planetkit_peer_control_req_resolution_handler_t NULLABLE resolution_handler);
kit_bool_t  planetkit_peer_control_stop_video(planetkit_peer_control_t *NONNULL peer_control,
                                              void *NULLABLE result_user, planetkit_req_media_result_handler_t NULLABLE result_handler);

kit_bool_t  planetkit_peer_control_start_screen_share(planetkit_peer_control_t *NONNULL peer_control, planetkit_str_t NULLABLE subgrp_name,
                                                      void *NULLABLE result_user, planetkit_req_media_result_handler_t NULLABLE result_handler);

kit_bool_t  planetkit_peer_control_stop_screen_share(planetkit_peer_control_t *NONNULL peer_control,
                                                     void *NULLABLE result_user, planetkit_req_media_result_handler_t NULLABLE result_handler);

#if defined(__cplusplus)
}
#endif

#endif /* __PLANETKIT_PEER_CONTROL_H__ */

