/**
 * @file planetkit_peer.h
 * @brief write some brief information here.
 *
 * @date 2021-05-25
 *
 * Generated by author
 *
 */
#ifndef __PLANETKIT_PEER_H__
#define __PLANETKIT_PEER_H__

/*************************************************************************
* INCLUDE
*************************************************************************/
#include "planetkit_common_type.h"

#if defined(__cplusplus)
extern "C" {
#endif
/*************************************************************************
* DATA STRUCTURE
*************************************************************************/

#define PLANETKIT_PEER_MAX_SUBGRPS                 100

typedef struct planetkit_peer planetkit_peer_t;
typedef struct planetkit_peer_shared_contents_t planetkit_peer_shared_contents_t;

typedef enum planetkit_peer_get_fail_reason_e {
   PLANETKIT_PEER_GET_FAIL_REASON_NONE              = 0,
   PLANETKIT_PEER_GET_FAIL_REASON_NOT_IN_SUBGROUP   = 1,
   PLANETKIT_PEER_GET_FAIL_REASON_DISCONNECTED      = 2,
} planetkit_peer_get_fail_reason_e;

typedef struct planetkit_peer_subscription_info
{
    planetkit_subgrp_name_t         subscribed_subgrps[PLANETKIT_PEER_MAX_SUBGRPS];
    uint32_t                        subscribed_subgrps_cnt;
} planetkit_peer_subscription_info_t;

typedef struct planetkit_peer_shared_contents_data_t {
    const void *NONNULL data;
    uint32_t            data_size;
    uint32_t            elapsed_after_set_msec;
} planetkit_peer_shared_contents_data_t;

typedef struct planetkit_peer_hold_status_t {
    kit_bool_t      is_on_hold;
    char            hold_reason[PLANETKIT_HOLD_REASON_MAX_SIZE];
} planetkit_peer_hold_status_t;

/*************************************************************************
* API DEFINITION
*************************************************************************/
kit_bool_t  planetkit_peer_retain(planetkit_peer_t * NONNULL peer);
void        planetkit_peer_release(planetkit_peer_t * NONNULL peer);

planetkit_str_t NONNULL planetkit_peer_get_id(planetkit_peer_t * NONNULL peer);
planetkit_str_t NONNULL planetkit_peer_get_service_id(planetkit_peer_t * NONNULL peer);
planetkit_media_type_e  planetkit_peer_get_media_type(planetkit_peer_t * NONNULL peer);
kit_bool_t  planetkit_peer_is_data_session_supported(planetkit_peer_t * NONNULL peer);

kit_bool_t  planetkit_peer_is_audio_muted(planetkit_peer_t * NONNULL peer);
void        planetkit_peer_get_hold_status(planetkit_peer_t * NONNULL peer, planetkit_peer_hold_status_t *NONNULL out_hold_status);
planetkit_user_equipment_type_e planetkit_peer_get_user_equipment_type(planetkit_peer_t * NONNULL peer);
planetkit_str_t NULLABLE planetkit_peer_get_display_name(planetkit_peer_t * NONNULL peer);
planetkit_str_t NULLABLE planetkit_peer_get_sip_terminal_local_ip(planetkit_peer_t * NONNULL peer);
planetkit_str_t NULLABLE planetkit_peer_get_sip_terminal_dev_info(planetkit_peer_t * NONNULL peer);

/**
 * Shared contents APIs
 */
planetkit_peer_shared_contents_t *NULLABLE planetkit_peer_get_shared_contents_with_retain(planetkit_peer_t * NONNULL peer);

kit_bool_t  planetkit_peer_shared_contents_retain(planetkit_peer_shared_contents_t *NONNULL shared_contents);
void        planetkit_peer_shared_contents_release(planetkit_peer_shared_contents_t *NONNULL shared_contents);
void        planetkit_peer_shared_contents_get_data(planetkit_peer_shared_contents_t *NONNULL shared_contents, planetkit_peer_shared_contents_data_t *NONNULL out_data);

/**
 * Get subscribed subgroups of this peer.
 * @param buffer        Peer subgroup subscription info to be filled
 */
void planetkit_peer_fill_subscribed_subgroup_names(planetkit_peer_t * NONNULL peer, planetkit_peer_subscription_info_t * NONNULL buffer);

void planetkit_peer_get_current_video_subgroup_name(planetkit_peer_t *NONNULL peer, kit_bool_t *NONNULL out_is_subgrp, planetkit_subgrp_name_t *NONNULL out_subgrp_name);
void planetkit_peer_get_current_screen_share_subgroup_name(planetkit_peer_t *NONNULL peer, kit_bool_t *NONNULL out_is_subgrp, planetkit_subgrp_name_t *NONNULL out_subgrp_name);

planetkit_peer_get_fail_reason_e planetkit_peer_get_video_status(planetkit_peer_t * NONNULL peer, planetkit_str_t NULLABLE subgrp_name, planetkit_video_status_t * NONNULL out_video_status);
planetkit_peer_get_fail_reason_e planetkit_peer_get_screen_share_state(planetkit_peer_t * NONNULL peer, planetkit_str_t NULLABLE subgrp_name, planetkit_screen_share_state_e * NONNULL out_state);
planetkit_peer_get_fail_reason_e planetkit_peer_get_audio_volume_level_setting(planetkit_peer_t * NONNULL peer, planetkit_str_t NULLABLE subgrp_name, uint8_t * NONNULL out_volume_level_setting);

#if defined(__cplusplus)
}
#endif
#endif /* __PLANETKIT_PEER_H__ */
