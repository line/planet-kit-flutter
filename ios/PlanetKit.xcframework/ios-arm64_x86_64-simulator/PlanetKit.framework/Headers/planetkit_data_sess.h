/**
 * @file planetkit_data_sess.h
 * @brief write some brief information here.
 *
 * @date 2022-06-09
 *
 * Generated by author
 *
 */
#ifndef __PLANETKIT_DATA_SESS_H__
#define __PLANETKIT_DATA_SESS_H__

/*************************************************************************
* INCLUDE
*************************************************************************/
#include "planetkit_common_type.h"

#if defined(__cplusplus)
extern "C" {
#endif
/*************************************************************************
* DATA STRUCTURE
*************************************************************************/

typedef enum planetkit_data_session_fail_reason_e
{
    PLANETKIT_DATA_SESSION_FAIL_REASON_NONE = 0,           /// Success.
    PLANETKIT_DATA_SESSION_FAIL_REASON_INTERNAL = 1,       /// Unexpected error occurred internally.
    PLANETKIT_DATA_SESSION_FAIL_REASON_NOT_INCOMING = 3,   /// Cannot make receive data session without incoming event(PLANETKIT_EVENT_TYPE_COMMON_DATA_SESSION_INCOMING).
    PLANETKIT_DATA_SESSION_FAIL_REASON_ALREADY_EXIST = 4,  /// Data session ID already exists.
    PLANETKIT_DATA_SESSION_FAIL_REASON_INVALID_ID = 5,     /// Data session ID is invalid. Valid ID is 100 to 999.
    PLANETKIT_DATA_SESSION_FAIL_REASON_INVALID_TYPE = 6,   /// Data session type is invalid.
} planetkit_data_session_fail_reason_e;

typedef enum planetkit_data_session_closed_reason_e
{
    PLANETKIT_DATA_SESSION_CLOSED_REASON_SESSION_END = 0,   /// Data session has ended.
    PLANETKIT_DATA_SESSION_CLOSED_REASON_INTERNAL = 1,      /// Unexpected error occurred internally.
    PLANETKIT_DATA_SESSION_CLOSED_REASON_UNSUPPORTED = 2,   /// Data session ID is unsupported by the peer.
} planetkit_data_session_closed_reason_e;

typedef struct planetkit_data_session_outbound_data_flow_state_t
{
    uint64_t        requested_bytes;    ///< Bytes of accumulated request to send data
    uint64_t        acked_bytes;        ///< Bytes of accumulated acked data;
} planetkit_data_session_outbound_data_flow_state_t;

typedef struct planetkit_data_session_t planetkit_data_session_t;
typedef void (*planetkit_data_session_activated_handler_t)(void *NULLABLE user_ptr, planetkit_data_session_t *NULLABLE data_sess,
                                                        kit_bool_t is_success, planetkit_data_session_fail_reason_e reason);
typedef void (*planetkit_data_session_outbound_data_flow_handler_t)(void *NULLABLE user_ptr,
                                                                    planetkit_data_session_outbound_data_flow_state_t *NULLABLE data_flow,
                                                                    kit_bool_t is_success);
typedef void (*planetkit_data_session_closed_handler_t)(void * NULLABLE user_ptr, planetkit_data_session_closed_reason_e reason);

typedef struct planetkit_data_session_outbound_create_param_t {
    planetkit_data_session_stream_id_t stream_id;
    planetkit_data_session_type_e type;
 
    planetkit_data_session_closed_handler_t NONNULL closed_handler;
    planetkit_data_session_activated_handler_t NONNULL activated_handler;
    planetkit_data_session_too_long_queued_exception_handler_t NULLABLE tlqe_handler;
    void *NULLABLE user_ptr;
} planetkit_data_session_outbound_create_param_t;
 
typedef struct planetkit_data_session_inbound_create_param_t {
    planetkit_data_session_stream_id_t stream_id;
 
    planetkit_data_session_closed_handler_t NONNULL closed_handler;
    planetkit_data_session_activated_handler_t NONNULL activated_handler;
    planetkit_data_session_recv_handler_t NONNULL recv_handler;
    void *NULLABLE user_ptr;
} planetkit_data_session_inbound_create_param_t;

/*************************************************************************
 * API DEFINITION
 *************************************************************************/

kit_bool_t          planetkit_data_session_retain(planetkit_data_session_t *NONNULL data_sess);
void                planetkit_data_session_release(planetkit_data_session_t *NONNULL data_sess);

planetkit_data_session_stream_id_t planetkit_data_session_get_stream_id(planetkit_data_session_t *NONNULL data_sess);
planetkit_str_t NULLABLE planetkit_data_session_get_subgroup_name(planetkit_data_session_t *NONNULL data_sess);
planetkit_data_session_type_e planetkit_data_session_get_type(planetkit_data_session_t *NONNULL data_sess);

kit_bool_t          planetkit_data_session_change_destination(planetkit_data_session_t *NONNULL outbound_data_sess,
                                                              planetkit_str_t NULLABLE peer_id, planetkit_str_t NULLABLE peer_service_id,
                                                              void *NULLABLE user_ptr, planetkit_result_handler_t NULLABLE result_handler);

kit_bool_t          planetkit_data_session_send(planetkit_data_session_t *NONNULL outbound_data_sess,
                                                const void *NONNULL data, uint32_t data_len, uint64_t timestamp);
kit_bool_t          planetkit_data_session_get_outbound_data_flow_state(planetkit_data_session_t *NONNULL outbound_data_sess,
                                                                        void *NULLABLE user_ptr,
                                                                        planetkit_data_session_outbound_data_flow_handler_t NULLABLE result_handler);
#if defined(__cplusplus)
}
#endif
#endif /* __PLANETKIT_DATA_SESS_H__ */
