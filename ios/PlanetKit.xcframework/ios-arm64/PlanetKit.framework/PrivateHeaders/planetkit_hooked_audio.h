/**
 * @file planetkit_hooked_audio.h
 * @brief write some brief information here.
 *
 * @date 2024-04-09
 *
 * Generated by genc_planetkit.py v1.0
 *
 */

#ifndef __PLANETKIT_HOOKED_AUDIO_H__
#define __PLANETKIT_HOOKED_AUDIO_H__


/*************************************************************************
* INCLUDE
*************************************************************************/
#include "planetkit_common_type.h"


#if defined(__cplusplus)
extern "C" {
#endif
/*************************************************************************
* DATA STRUCTURE
*************************************************************************/

typedef struct planetkit_hooked_audio_description_t {
    const uint32_t                          sample_rate;
    const uint32_t                          channel;        /// The number of channels
    const planetkit_audio_sample_type_e     sample_type;
 
    const uint32_t                          sample_count;   /// sample count for each channel
    const int64_t                           seq;
} planetkit_hooked_audio_description_t;

/*************************************************************************
* API DEFINITION
*************************************************************************/

kit_bool_t  planetkit_hooked_audio_retain(planetkit_hooked_audio_t *NONNULL hooked_audio);
void        planetkit_hooked_audio_release(planetkit_hooked_audio_t *NONNULL hooked_audio);

planetkit_hooked_audio_description_t *NONNULL planetkit_hooked_audio_get_desc(planetkit_hooked_audio_t *NONNULL hooked_audio);
const void *NONNULL planetkit_hooked_audio_get_data(planetkit_hooked_audio_t *NONNULL hooked_audio);
int32_t     planetkit_hooked_audio_get_data_len(planetkit_hooked_audio_t *NONNULL hooked_audio);

kit_bool_t  planetkit_hooked_audio_set_data(planetkit_hooked_audio_t *NONNULL hooked_audio, const void *NONNULL data_ptr, int32_t data_len);

#if defined(__cplusplus)
}
#endif

#endif /* __PLANETKIT_HOOKED_AUDIO_H__ */

