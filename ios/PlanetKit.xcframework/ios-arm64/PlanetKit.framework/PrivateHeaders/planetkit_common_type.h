/**
 * @file planetkit_common_type.h
 * @brief write some brief information here.
 *
 * @date 2019-12-20
 *
 * Generated by author
 *
 */
#ifndef __PLANETKIT_COMMON_TYPE_H__
#define __PLANETKIT_COMMON_TYPE_H__

/*************************************************************************
* INCLUDE
*************************************************************************/
#include <stdint.h>
#if defined(__cplusplus)
extern "C" {
#endif
/*************************************************************************
* DATA STRUCTURE
*************************************************************************/
#if defined(__cplusplus)
typedef bool               kit_bool_t;
#else
typedef _Bool              kit_bool_t;
#  if !defined(false) && !defined(true)
#    define false 0
#    define true 1
#  endif
#endif


#define KIT_FALSE          false
#define KIT_TRUE           true

#if defined(_MSC_VER)
typedef signed __int64     kit_int64_t;
typedef unsigned __int64   kit_uint64_t;
#else
typedef signed long long   kit_int64_t;
typedef unsigned long long kit_uint64_t;
#endif

#if defined(__ENVIRONMENT_IPHONE_OS_VERSION_MIN_REQUIRED__) || defined(__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__) || defined(__ENVIRONMENT_TV_OS_VERSION_MIN_REQUIRED__)
#define NULLABLE    _Nullable
#define NONNULL     _Nonnull
#else
#define NULLABLE
#define NONNULL     
#endif

typedef const char *              planetkit_str_t;
typedef struct _planetkit_rtp_frame_t planetkit_rtp_frame_t;

typedef enum planetkit_network_type {
    PLANETKIT_NETWORK_TYPE_UNDEFINED    = 0,
    PLANETKIT_NETWORK_TYPE_2G           = 1,
    PLANETKIT_NETWORK_TYPE_3G           = 2,
    PLANETKIT_NETWORK_TYPE_4G           = 3,
    PLANETKIT_NETWORK_TYPE_5G           = 4,
    PLANETKIT_NETWORK_TYPE_WIFI         = 5,
    PLANETKIT_NETWORK_TYPE_ETHERNET     = 6,
    PLANETKIT_NETWORK_TYPE_COUNT
} planetkit_network_type_e;

typedef enum planetkit_media_type {
    PLANETKIT_MEDIA_TYPE_UNKNOWN        = 0,
    PLANETKIT_MEDIA_TYPE_AUDIO          = 1,
    PLANETKIT_MEDIA_TYPE_VIDEO          = 2,
    PLANETKIT_MEDIA_TYPE_AUDIOVIDEO     = 3,
    PLANETKIT_MEDIA_TYPE_COUNT
} planetkit_media_type_e;

typedef enum planetkit_direction {
    PLANETKIT_DIRECTION_RX = 0,
    PLANETKIT_DIRECTION_TX = 1
} planetkit_direction_e;

typedef enum planetkit_audio_route_type {
    PLANETKIT_AUDIO_ROUTE_TYPE_HANDSET          = 0,
    PLANETKIT_AUDIO_ROUTE_TYPE_SPEAKERPHONE     = 1,
    PLANETKIT_AUDIO_ROUTE_TYPE_EXTERNAL         = 2,
} planetkit_audio_route_type_e;

typedef enum planetkit_audio_sample_type_e {
    PLANETKIT_AUDIO_SAMPLE_TYPE_SIGNED_FLOAT32 = 0,
    PLANETKIT_AUDIO_SAMPLE_TYPE_SIGNED_SHORT16 = 1
} planetkit_audio_sample_type_e;

typedef enum planetkit_audio_bw_type {
    PLANETKIT_AUDIO_BW_TYPE_WB = 1,     ///< wideband(~16kHz)
    PLANETKIT_AUDIO_BW_TYPE_SWB = 2,    ///< superwideband(~32kHz)
    PLANETKIT_AUDIO_BW_TYPE_FB = 3      ///< fullband(~48kHz)
} planetkit_audio_bw_type_e;

typedef enum planetkit_video_pause_reason {
    PLANETKIT_VIDEO_PAUSE_REASON_BY_USER                    = 0,
    PLANETKIT_VIDEO_PAUSE_REASON_BY_INTERRUPT               = 1,
    PLANETKIT_VIDEO_PAUSE_REASON_UNDEFINED                  = 2,
    PLANETKIT_VIDEO_PAUSE_REASON_INTERNAL                   = 3,
    PLANETKIT_VIDEO_PAUSE_REASON_ENABLE_VIDEO_RESPONSE      = 4,
    PLANETKIT_VIDEO_PAUSE_REASON_CAMERA_INACTIVE            = 5,
    PLANETKIT_VIDEO_PAUSE_REASON_HOLD                       = 6,
} planetkit_video_pause_reason_e;

typedef enum planetkit_audio_pause_reason {
    PLANETKIT_AUDIO_PAUSE_REASON_UNDEFINED                  = 0,
    PLANETKIT_AUDIO_PAUSE_REASON_BY_USER                    = 1,
    PLANETKIT_AUDIO_PAUSE_REASON_INTERNAL                   = 2,
    PLANETKIT_AUDIO_PAUSE_REASON_HOLD                       = 3,
} planetkit_audio_pause_reason_e;

typedef enum planetkit_video_rotation {
    PLANETKIT_VIDEO_ROTATION_0                              = 0,
    PLANETKIT_VIDEO_ROTATION_90                             = 1,
    PLANETKIT_VIDEO_ROTATION_180                            = 2,
    PLANETKIT_VIDEO_ROTATION_270                            = 3,
} planetkit_video_rotation_e;

typedef enum planetkit_video_resolution {
    PLANETKIT_VIDEO_RESOLUTION_UNKNOWN                      = -1,

    PLANETKIT_VIDEO_RESOLUTION_RECOMMENDED                  = 0,
    PLANETKIT_VIDEO_RESOLUTION_THUMBNAIL                    = 1,
    PLANETKIT_VIDEO_RESOLUTION_QVGA                         = 2,
    PLANETKIT_VIDEO_RESOLUTION_VGA                          = 3,
    PLANETKIT_VIDEO_RESOLUTION_HD_FHD                       = 4,
    PLANETKIT_VIDEO_RESOLUTION_UHD                          = 5,

    PLANETKIT_VIDEO_RESOLUTION_MAX = PLANETKIT_VIDEO_RESOLUTION_UHD,
} planetkit_video_resolution_e;

typedef enum planetkit_video_fps {
    PLANETKIT_VIDEO_FPS_UNDEFINED                           = 0,
    PLANETKIT_VIDEO_FPS_5                                   = 1,
    PLANETKIT_VIDEO_FPS_10                                  = 2,
    PLANETKIT_VIDEO_FPS_15                                  = 3,
    PLANETKIT_VIDEO_FPS_24                                  = 4,
    PLANETKIT_VIDEO_FPS_30                                  = 5,

    PLANETKIT_VIDEO_FPS_MAX = PLANETKIT_VIDEO_FPS_30,
} planetkit_video_fps_e;


typedef enum planetkit_video_spec_type {
    PLANETKIT_VIDEO_SPEC_TYPE_CALL_CAMERA               = 0,
    PLANETKIT_VIDEO_SPEC_TYPE_CONFERENCE_CAMERA         = 1,
    PLANETKIT_VIDEO_SPEC_TYPE_CALL_SCREEN_SHARE       = 2,
    PLANETKIT_VIDEO_SPEC_TYPE_CONFERENCE_SCREEN_SHARE = 3,

    PLANETKIT_VIDEO_SPEC_TYPE_MAX = PLANETKIT_VIDEO_SPEC_TYPE_CONFERENCE_SCREEN_SHARE
} planetkit_video_spec_type_e;

typedef enum planetkit_video_spec_resolution {
    PLANETKIT_VIDEO_SPEC_RESOLUTION_THUMBNAIL       = 0,
    PLANETKIT_VIDEO_SPEC_RESOLUTION_QVGA            = 1,
    PLANETKIT_VIDEO_SPEC_RESOLUTION_VGA             = 2,
    PLANETKIT_VIDEO_SPEC_RESOLUTION_HD              = 3,
    PLANETKIT_VIDEO_SPEC_RESOLUTION_FHD             = 4,
    PLANETKIT_VIDEO_SPEC_RESOLUTION_UHD             = 5,

    PLANETKIT_VIDEO_SPEC_RESOLUTION_UNKNOWN         = 1000,

    PLANETKIT_VIDEO_SPEC_RESOLUTION_MAX = PLANETKIT_VIDEO_SPEC_RESOLUTION_UHD
} planetkit_video_spec_resolution_e;

typedef enum planetkit_audio_ns_type {
    PLANETKIT_AUDIO_NS_TYPE_WEBRTC                  = 0,
    PLANETKIT_AUDIO_NS_TYPE_MLNS                    = 1,
} planetkit_audio_ns_type_e;

typedef enum planetkit_audio_aec_type_e {
    PLANETKIT_AUDIO_AEC_TYPE_LEGACY                 = 0,
    PLANETKIT_AUDIO_AEC_TYPE_AEC3                   = 1,
    PLANETKIT_AUDIO_AEC_TYPE_MLAEC                  = 2,
} planetkit_audio_aec_type_e;

typedef struct planetkit_frame_t planetkit_frame_t;

#define PLANETKIT_VIDEO_TIMESTAMP_SCALE     1000000 /// usec
typedef struct planetkit_video_param {
    int32_t                     width;
    int32_t                     height;
    planetkit_str_t NONNULL     user_id;
    planetkit_str_t NONNULL     service_id;
    planetkit_str_t NULLABLE    subgrp_name;           /// always be NULL for planetkit_call_t
    planetkit_video_rotation_e  rotation;
    planetkit_frame_t * NONNULL data;
    int64_t                     timestamp;
    int32_t                     timestamp_scale;
} planetkit_video_param_t;

typedef void (*planetkit_vid_handler_t)(void * NULLABLE arg, planetkit_video_param_t * NONNULL param);

/**
* @brief Voice Engine Complexity Level
* The lower complexity has lower voice quality
*/
typedef enum planetkit_audio_codec_complexity_level
{
    PLANETKIT_AUDIO_CODEC_COMPLEXITY_LEVEL_LOWEST  = 0,
    PLANETKIT_AUDIO_CODEC_COMPLEXITY_LEVEL_LOW = 2,
    PLANETKIT_AUDIO_CODEC_COMPLEXITY_LEVEL_GENERAL = 7,
    PLANETKIT_AUDIO_CODEC_COMPLEXITY_LEVEL_HIGHEST = 10
} planetkit_audio_codec_complexity_level_e;


typedef enum planetkit_disconnect_reason {
    // Kit Platform Layer can assign one of the following reasons when disconnection occurs
    // COMMON REASON (1001 ~ 1100)
    PLANETKIT_DISCONNECT_REASON_NORMAL          = 1001,             ///< [Both][Caller, Callee, Participant] Disconnected the call without exceptions
    PLANETKIT_DISCONNECT_REASON_DECLINE         = 1002,             ///< [Both][Callee, CloudServer] 1:1 Call: Responder rejects a call
                                                                    ///< Conference: The previously joined conference is declined when entering the same conference room(e.g. Re-join after crash)
    PLANETKIT_DISCONNECT_REASON_CELL_CALL       = 1003,             ///< [Both][Caller, Callee, Participant] Received cellular call during the PlanetKit call

    // ERROR REASON (1101 ~ 1200)
    PLANETKIT_DISCONNECT_REASON_INTERNAL_ERROR     = 1109,          ///< [Both][Caller, Callee, Participant, CloudServer] Disconnected by kit internal error

    /** [Both][Caller, Callee, AppServer]
     *  Application defined error. user_rel_code is accompanied.
     *      - For events, user_rel_code is in planetkit_event_disconnected_param_t
     *      - For API, user_rel_code is parameter of 'planetkit_call_end_call_with_error_user_release_code()'
     *  1:1 call: user_rel_code is defined by the call peer.
     *  Group call: user_rel_code is defined by AppServer. For example) https://docs.lineplanet.me/api/server/server-api-kickout
     */
    PLANETKIT_DISCONNECT_REASON_USER_ERROR         = 1110,

    PLANETKIT_DISCONNECT_REASON_INTERNAL_KIT_ERROR = 1111,          ///< [Both][Caller, Callee, Participant] Disconnected by OS specific error
    PLANETKIT_DISCONNECT_REASON_AUDIO_TX_NO_SRC    = 1112,          ///< [Both][Caller, Callee, Participant] Audio source (e.g. mic) has not sent any audio data for a while



    // Kit Platform Layer can not assign below reasons when disconnect
    // COMMON REASON (1201 ~ 1300)
    PLANETKIT_DISCONNECT_REASON_CANCEL              = 1201,             ///< [1:1][Caller] Initiator disconnects the call before the responder answers
    PLANETKIT_DISCONNECT_REASON_BUSY                = 1202,             ///< [1:1][Callee] Responder is calling
    PLANETKIT_DISCONNECT_REASON_NOANSWER            = 1203,             ///< [1:1][Caller] Responder doesn't answer. Initiator waits for the answer for 60 seconds
    PLANETKIT_DISCONNECT_REASON_ALREADY_GOT_A_CALL  = 1204,             ///< [Both][CloudServer] The initiator or the participant already has an incoming call but not received push yet
    PLANETKIT_DISCONNECT_REASON_MULTIDEV_IN_USE     = 1205,             ///< [Both][CloudServer] The same id pair (user-id and service-id) is calling in another device
    PLANETKIT_DISCONNECT_REASON_MULTIDEV_ANSWER     = 1206,             ///< [1:1][CloudServer] Responder using the same id pair (user-id and service-id) answered the call in another device
    PLANETKIT_DISCONNECT_REASON_MULTIDEV_DECLINE    = 1207,             ///< [1:1][CloudServer] Responder using the same id pair(user-id and service-id) declined the call in another device
    PLANETKIT_DISCONNECT_REASON_MAX_CALL_TIME_EXCEEDED = 1208,          ///< [Both][CloudServer] Maximum call time has been reached

    // ERROR REASON (1301 ~ 1400)
    PLANETKIT_DISCONNECT_REASON_NETWORK_UNSTABLE    = 1301,             ///< [Both][Caller, Callee, Participant, CloudServer] Network is unavailable to keep a call
    PLANETKIT_DISCONNECT_REASON_PUSH_ERROR          = 1302,             ///< [1:1][CloudServer] LINE Planet GW failed to call Notify or notify_cb returned a failure. Please check AppServer or Notify url
    PLANETKIT_DISCONNECT_REASON_AUTH_ERROR          = 1303,             ///< [Both][CloudServer] Authentication failure
    PLANETKIT_DISCONNECT_REASON_RELEASED_CALL       = 1304,             ///< [Both][CloudServer] The call was already released. Ex) Initiator already canceled

    PLANETKIT_DISCONNECT_REASON_SERVER_INTERNAL_ERROR   = 1305,         ///< [Both][CloudServer] Server disconnected a call because of internal error
    PLANETKIT_DISCONNECT_REASON_UNAVAILABLE_NETWORK     = 1308,         ///< [Both][Caller, Callee, Participant] Disconnected due to the network being unavailable for a certain period of time
    PLANETKIT_DISCONNECT_REASON_APP_DESTROY             = 1309,         ///< [Both][Caller, Callee, Participant] Application process is terminated
    PLANETKIT_DISCONNECT_REASON_SYSTEM_SLEEP            = 1310,         ///< [Both][Caller, Callee, Participant] Application is in sleep mode
    PLANETKIT_DISCONNECT_REASON_SYSTEM_LOGOFF           = 1311,         ///< [Both][Caller, Callee, Participant] Application is in logoff mode
    PLANETKIT_DISCONNECT_REASON_MTU_EXCEEDED            = 1312,         ///< [Both][Caller, Callee, Participant] The call is not connected because the MTU is exceeded
    PLANETKIT_DISCONNECT_REASON_APP_SERVER_DATA_ERROR   = 1313,         ///< [Both][CloudServer] Server failed to deliver app server data to AppServer
    PLANETKIT_DISCONNECT_REASON_DESKTOP_SCREEN_LOCKED   = 1314,         ///< [Both][Caller, Callee, Participant] Desktop screen is locked

    // ERROR REASON GroupCall Only (1401 ~ 1500)
    PLANETKIT_DISCONNECT_REASON_ROOM_IS_FULL        = 1401,             ///< [Group][CloudServer] The number of participants in this room is full
    PLANETKIT_DISCONNECT_REASON_ALONE_KICK_OUT      = 1402,             ///< [Group][CloudServer] Server kicks out a user when the user stays in a conference room alone for a long time
    PLANETKIT_DISCONNECT_REASON_ROOM_NOT_FOUND      = 1404,             ///< [Group][CloudServer] The room is destroyed because all remaining participants leave before the other participant's 'planetkit_conference_join_conference()' is complete
    PLANETKIT_DISCONNECT_REASON_ANOTHER_INSTANCE_TRY_TO_JOIN = 1405,    ///< [Group][Participant] Disconnected by trying to join from another instance


    // ERROR REASON about Http (1501 ~ 1600)
    PLANETKIT_DISCONNECT_REASON_SERVICE_ACCESS_TOKEN_ERROR = 1501,      ///< [Both][CloudServer] Invalid Access token
    PLANETKIT_DISCONNECT_REASON_SERVICE_INVALID_ID      = 1502,         ///< [Both][CloudServer] Unacceptable character is used in service-id or user-id.
                                                                        ///< Please refer to https://docs.lineplanet.me/overview/glossary#service-id

    PLANETKIT_DISCONNECT_REASON_SERVICE_MAINTENANCE     = 1503,         ///< [Both][CloudServer] Under maintenance
    PLANETKIT_DISCONNECT_REASON_SERVICE_BUSY            = 1504,         ///< [Both][CloudServer] LINE Planet GW is busy for now
    PLANETKIT_DISCONNECT_REASON_SERVICE_INTERNAL_ERROR  = 1505,         ///< [Both][CloudServer] LINE Planet GW internal error. Join failure in old version(<3.6) because the room has the SUBGROUP room attribute(Created by >= 3.6)
    PLANETKIT_DISCONNECT_REASON_SERVICE_HTTP_INVALID_PEER_CERT      = 1508,     ///< [Both][Caller, Participant] SSL peer certificate or SSH remote key was not OK

    /** [Both][Caller, Participant]
     *  Could not make a HTTP request.
     *  Please check user network environment.
     *  1. Firewall https://docs.lineplanet.me/help/troubleshooting/troubleshooting-firewall
     *  2. Client vaccine program
     *  @{
     */
    PLANETKIT_DISCONNECT_REASON_SERVICE_HTTP_ERROR                  = 1506,
    PLANETKIT_DISCONNECT_REASON_SERVICE_HTTP_CONNECTION_TIME_OUT    = 1507,
    PLANETKIT_DISCONNECT_REASON_SERVICE_HTTP_CONNECT_FAIL           = 1509,
    /** @}*/

    PLANETKIT_DISCONNECT_REASON_SERVICE_HTTP_INVALID_URL            = 1510,     ///< [Both][Caller, Participant] Wrong URL format or could not resolve host or proxy name
    PLANETKIT_DISCONNECT_REASON_SERVICE_INCOMPATIBLE_PLANETKIT_VER  = 1511,     ///< [Both][CloudServer] The current PlanetKit version is deprecated. Need to upgrade
    PLANETKIT_DISCONNECT_REASON_SERVICE_TOO_MANY_REQUESTS           = 1512,     ///< [Both][CloudServer] Too many call connection attempts in a short period of time

/* Deprecated disconnect reason */
    // PLANETKIT_DISCONNECT_REASON_AUDIO_TX_NO_SRC_BY_LOCAL    = 1101,
    // PLANETKIT_DISCONNECT_REASON_AUDIO_TX_NO_SRC_BY_REMOTE   = 1102,
    // PLANETKIT_DISCONNECT_REASON_INTERNAL_ERROR_BY_LOCAL     = 1103,
    // PLANETKIT_DISCONNECT_REASON_INTERNAL_ERROR_BY_REMOTE    = 1104,
    // PLANETKIT_DISCONNECT_REASON_USER_ERROR_BY_LOCAL         = 1105,
    // PLANETKIT_DISCONNECT_REASON_USER_ERROR_BY_REMOTE        = 1106,
    // PLANETKIT_DISCONNECT_REASON_INTERNAL_KIT_ERROR_BY_LOCAL = 1107,
    // PLANETKIT_DISCONNECT_REASON_INTERNAL_KIT_ERROR_BY_REMOTE = 1108,

    // PLANETKIT_DISCONNECT_REASON_UNAVAILABLE_BAD_NETWORK_IN_CONFERENCE = 1306,
    // PLANETKIT_DISCONNECT_REASON_UNAVAILABLE_NETWORK_IN_CALL = 1307,
    // PLANETKIT_DISCONNECT_REASON_WRONG_ROOM_ATTR             = 1403,
} planetkit_disconnect_reason_e;

typedef enum planetkit_disconnect_source_e {
    PLANETKIT_DISCONNECT_SOURCE_UNDEF           = 0,
    PLANETKIT_DISCONNECT_SOURCE_CALLEE          = 1,    ///< [1:1]
    PLANETKIT_DISCONNECT_SOURCE_CALLER          = 2,    ///< [1:1]
    PLANETKIT_DISCONNECT_SOURCE_PARTICIPANT     = 3,    ///< [Group]
    PLANETKIT_DISCONNECT_SOURCE_CLOUD_SERVER    = 4,    ///< [Both]
    PLANETKIT_DISCONNECT_SOURCE_APP_SERVER      = 5,    ///< [Group]
} planetkit_disconnect_source_e;

typedef enum planetkit_media_disable_reason {
    PLANETKIT_MEDIA_DISABLE_REASON_UNDEFINED    = 0,

    /* Release by user: 1 ~ 100 */
    PLANETKIT_MEDIA_DISABLE_REASON_USER         = 1,
    PLANETKIT_MEDIA_DISABLE_REASON_DECLINE      = 2,
} planetkit_media_disable_reason_e;

#define PLANETKIT_SCRN_SHR_REASON_MIN       0
#define PLANETKIT_SCRN_SHR_REASON_MAX       39

typedef enum planetkit_param_bool {
    PLANETKIT_PARAM_BOOL_INVALID = -1,
    PLANETKIT_PARAM_BOOL_FALSE = 0,
    PLANETKIT_PARAM_BOOL_TRUE = 1,
} planetkit_param_bool_e;

typedef struct planetkit_short_data_t {
    planetkit_str_t NONNULL type;
    void*           NONNULL data;
    int32_t                 size;

} planetkit_short_data_t;

typedef struct planetkit_short_data_target_t {
    planetkit_str_t     NONNULL     id;
    planetkit_str_t     NONNULL     service_id;

} planetkit_short_data_target_t;

typedef struct planetkit_video_capa_t {
    planetkit_video_resolution_e    max_resolution;
    planetkit_video_fps_e           max_fps;
    planetkit_param_bool_e          prefer_hw_codec;
} planetkit_video_capa_t;

typedef struct planetkit_comm_param {
    int32_t     aud_tx_no_src_sec;
    int32_t     vid_tx_no_src_sec;

    uint32_t    max_tx_link_bw_kbps;
    uint32_t    max_rx_link_bw_kbps;

    planetkit_audio_ns_type_e aud_tx_ns_type;
    planetkit_audio_aec_type_e aud_tx_aec_type;

} planetkit_comm_param_t;

#define PLANETKIT_AUDIO_LEVEL_MAX_USERS         500

typedef struct planetkit_audio_level_user_t {
    planetkit_str_t     NONNULL     id;
    planetkit_str_t     NONNULL     service_id;
    planetkit_str_t     NULLABLE    subgrp_name;           /// always be NULL for planetkit_call_t
    planetkit_str_t     NULLABLE    tagged_subgrp_name;    /// always be NULL for planetkit_call_t
    int8_t                          avg_volume_level;

} planetkit_audio_level_user_t;

typedef struct planetkit_audio_rx_level_t {
    int8_t                          avg_volume_level;
    int32_t                         user_cnt;
    planetkit_audio_level_user_t    users[PLANETKIT_AUDIO_LEVEL_MAX_USERS];

} planetkit_audio_rx_level_t;

typedef struct planetkit_audio_tx_level_t {
    int8_t                          avg_volume_level;

    planetkit_str_t     NULLABLE    dst_subgrp_name;       /// always be NULL for planetkit_call_t
    planetkit_str_t     NULLABLE    tagged_subgrp_name;    /// always be NULL for planetkit_call_t
} planetkit_audio_tx_level_t;

#define PLANETKIT_DATA_SESS_STREAM_ID_MIN       100
#define PLANETKIT_DATA_SESS_STREAM_ID_MAX       999

typedef uint32_t planetkit_data_session_stream_id_t;

typedef enum planetkit_data_sess_type {
    PLANETKIT_DATA_SESSION_TYPE_RELIABLE_MSG                    = 0,
    PLANETKIT_DATA_SESSION_TYPE_RELIABLE_BYTES                  = 1,
    PLANETKIT_DATA_SESSION_TYPE_UNRELIABLE_BYTES                = 2,
    PLANETKIT_DATA_SESSION_TYPE_UNRELIABLE_MSG                  = 3,
} planetkit_data_session_type_e;

typedef void (*planetkit_data_session_too_long_queued_exception_handler_t)(void * NULLABLE arg, kit_bool_t triggered);
typedef void (*planetkit_data_session_recv_handler_t)(void * NULLABLE arg, const void * NONNULL data, uint32_t data_len,
                                                   uint64_t timestamp, uint64_t offset,
                                                   planetkit_str_t NONNULL peer_id, planetkit_str_t NONNULL peer_service_id);

typedef enum planetkit_subgroup_subscribe_fail_reason
{
    PLANETKIT_SUBGROUP_SUBSCRIBE_FAIL_REASON_UNDEFINED              = 0,
    PLANETKIT_SUBGROUP_SUBSCRIBE_FAIL_REASON_TIMEOUT                = 1,
    PLANETKIT_SUBGROUP_SUBSCRIBE_FAIL_REASON_WRONG_ATTR             = 2,
    PLANETKIT_SUBGROUP_SUBSCRIBE_FAIL_REASON_OVER_MAX_SUBGROUP_CNT  = 3,
    PLANETKIT_SUBGROUP_SUBSCRIBE_FAIL_REASON_ALREADY_SUBSCRIBED     = 4,

    PLANETKIT_SUBGROUP_SUBSCRIBE_FAIL_REASON_UNKNOWN                = 1000
} planetkit_subgroup_subscribe_fail_reason_e;

typedef enum planetkit_subgroup_unsubscribe_fail_reason
{
    PLANETKIT_SUBGROUP_UNSUBSCRIBE_FAIL_REASON_UNDEFINED               = 0,
    PLANETKIT_SUBGROUP_UNSUBSCRIBE_FAIL_REASON_HAS_ACTIVE_AUDIO        = 1,
    PLANETKIT_SUBGROUP_UNSUBSCRIBE_FAIL_REASON_HAS_ACTIVE_VIDEO        = 2,
    PLANETKIT_SUBGROUP_UNSUBSCRIBE_FAIL_REASON_NOT_SUBSCRIBED          = 3,
    PLANETKIT_SUBGROUP_UNSUBSCRIBE_FAIL_REASON_HAS_ACTIVE_SCREEN_SHARE = 4,

    PLANETKIT_SUBGROUP_UNSUBSCRIBE_FAIL_REASON_UNKNOWN                 = 1000
} planetkit_subgroup_unsubscribe_fail_reason_e;

typedef enum planetkit_subgroup_peer_update_type {
    PLANETKIT_SUBGROUP_PEER_UPDATE_TYPE_NONE    = 0,
    PLANETKIT_SUBGROUP_PEER_UPDATE_TYPE_PUBLIC  = 1,
    PLANETKIT_SUBGROUP_PEER_UPDATE_TYPE_PRIVATE = 2,
} planetkit_subgroup_peer_update_type_e;

typedef struct planetkit_subgroup planetkit_subgroup_t;

typedef void (*planetkit_subgrp_subs_result_handler_t)(void * NULLABLE result_user, planetkit_subgroup_t * NULLABLE subgrp,
                                                       planetkit_str_t NONNULL subgrp_name,
                                                       kit_bool_t is_success, planetkit_subgroup_subscribe_fail_reason_e fail_reason);
typedef void (*planetkit_subgrp_unsubs_result_handler_t)(void * NULLABLE result_user, planetkit_subgroup_t * NULLABLE subgrp,
                                                         planetkit_str_t NONNULL subgrp_name,
                                                         kit_bool_t is_success, planetkit_subgroup_unsubscribe_fail_reason_e fail_reason);

typedef enum planetkit_start_fail_reason {
    /*  C Layer fail reason code range 0 ~ 999  */
    PLANETKIT_START_FAIL_REASON_NONE                    = 0,    /// Success
    PLANETKIT_START_FAIL_REASON_INVALID_PARAM           = 1,    /// Some mandatory parameters are not filled
    PLANETKIT_START_FAIL_REASON_ALREADY_EXIST           = 2,    /// There already exists an unfinished call or conference with the same identifier;
                                                                /// For calls, a set of my id, service-id, peer id and service-id is an identifier.
                                                                /// For conferences, a set of my id, service-id, room-id and room-service-id is an identifier.
    PLANETKIT_START_FAIL_REASON_DECODE_CALL_PARAM       = 3,    /// Failed to decode the argument of the verifyCall() API
    PLANETKIT_START_FAIL_REASON_MEM_ERR                 = 4,    /// Failed to allocate memory for a call or conference
    PLANETKIT_START_FAIL_REASON_ID_CONFLICT             = 5,    /// The user ID of the callee or room ID must not be same with the user ID
    PLANETKIT_START_FAIL_REASON_REUSE                   = 6,    /// Cannot re-use an instance for a new call or conference that is already used before
    PLANETKIT_START_FAIL_REASON_INVALID_USER_ID         = 7,    /// The User ID string is not in a valid format (https://docs.lineplanet.me/overview/glossary#user-id)
    PLANETKIT_START_FAIL_REASON_INVALID_SERVICE_ID      = 8,    /// The Service ID string is not in a valid format (https://docs.lineplanet.me/overview/glossary#service-id)
    PLANETKIT_START_FAIL_REASON_INVALID_API_KEY         = 9,    /// The API-key string is not in a valid format (https://docs.lineplanet.me/overview/glossary#api-key)
    PLANETKIT_START_FAIL_REASON_INVALID_ROOM_ID         = 10,   /// The Room ID string is not in a valid format (https://docs.lineplanet.me/overview/glossary#room-id)
    PLANETKIT_START_FAIL_REASON_TOO_LONG_APP_SERVER_DATA = 11,  /// The App server data is too long (Maximum size of app server data is 4096 bytes including null termination)
    PLANETKIT_START_FAIL_REASON_NOT_INITIALIZED         = 12,   /// PlanetKit is not initialized
} planetkit_start_fail_reason_e;

typedef enum planetkit_media_req_error {
    PLANETKIT_MEDIA_REQ_ERROR_NONE              = 0,
    PLANETKIT_MEDIA_REQ_ERROR_INTERNAL          = 1,
    PLANETKIT_MEDIA_REQ_ERROR_INVALID_PARAM     = 2,
    PLANETKIT_MEDIA_REQ_ERROR_INVALID_STATE     = 3,
    PLANETKIT_MEDIA_REQ_ERROR_OVER_MAX_COUNT    = 4,
    PLANETKIT_MEDIA_REQ_ERROR_FAIL_RESPONSE     = 5,
    PLANETKIT_MEDIA_REQ_ERROR_TIMEOUT           = 6,
} planetkit_media_req_error_e;

typedef enum planetkit_conf_exception_type {
    PLANETKIT_CONF_EXCEPTION_TYPE_NONE          = 0,
    PLANETKIT_CONF_EXCEPTION_TYPE_PEER_USED_UNSUPPORTED_FEATURE = 1,
    PLANETKIT_CONF_EXCEPTION_TYPE_USER          = 2,
} planetkit_conf_exception_type_e;

typedef enum planetkit_user_equipment_type {
    PLANETKIT_USER_EQUIPMENT_TYPE_NONE          = 0,
    PLANETKIT_USER_EQUIPMENT_TYPE_ANDROID       = 1,
    PLANETKIT_USER_EQUIPMENT_TYPE_IOS           = 2,
    PLANETKIT_USER_EQUIPMENT_TYPE_LINUX         = 3,
    PLANETKIT_USER_EQUIPMENT_TYPE_MAC           = 4,
    PLANETKIT_USER_EQUIPMENT_TYPE_WEB           = 5,
    PLANETKIT_USER_EQUIPMENT_TYPE_WINDOWS       = 6,
    
    PLANETKIT_USER_EQUIPMENT_TYPE_SIP_TERMINAL  = 100,
} planetkit_user_equipment_type_e;

#define PLANETKIT_USER_ID_MIN_SIZE      1
#define PLANETKIT_USER_ID_MAX_SIZE      64
#define PLANETKIT_SERVICE_ID_MIN_SIZE   1
#define PLANETKIT_SERVICE_ID_MAX_SIZE   64
#define PLANETKIT_API_KEY_MIN_SIZE      128
#define PLANETKIT_APP_VERSION_SIZE      32
#define PLANETKIT_KIT_WRAPPER_VERSION_SIZE 128

#define PLANETKIT_STATISTICS_MAX_PEERS_VIDEO_STREAMS            50
#define PLANETKIT_STATISTICS_MAX_PEERS_SCREEN_SHARE_STREAMS     3
#define PLANETKIT_STATISTICS_SUBGROUP_NAME_MAX_SIZE 16
#define PLANETKIT_STATISTICS_DEFAULT_UPDATE_INTERVAL_MS 200

#define PLANETKIT_HOLD_REASON_MAX_SIZE  256

#define PLANETKIT_SEND_SHORT_DATA_TYPE_MAX_SIZE  100
#define PLANETKIT_SEND_SHORT_DATA_MAX_SIZE  800
#define PLANETKIT_APP_SERVER_DATA_MAX_SIZE  4096
#define PLANETKIT_APP_SERVER_DATA_ID_MAX_LEN 64

typedef struct plantkit_dbg_mon_info_comm {
    char            access_network_type[16];    /// access network type (such as WIFI/LTE/3G/etc)
    char            conference_svr[128];        /// conference servers info (only for conference)

    struct {
        char        status[128];                /// current media channel status
        char        path[32];                   /// current media channel path (such as p2p/relay)
    } media_channel;

    struct {
        char        status[128];                 /// current rate control status
    } rate_control;

    struct {
        char        addr[128];                  /// current proxy address
        char        tp[16];                     /// current proxy transport type
    } proxy;
} plantkit_dbg_mon_info_comm_t;

typedef struct planetkit_dbg_mon_info_audio_tx {
    uint32_t        rtp_bps;                    /// sent bps (only payload)
    uint32_t        fec_rate_bps;               /// sent bps of FEC (only payload)
    uint32_t        fec_state;                  /// fec state, 0: stable, 1: 2d-fec, 2: periodic retransmission
    uint32_t        last_ts_diff_ms;            /// timestamp difference between last two transmitted RTP packets in milliseconds
    uint32_t        retrans_rsp_cnt;            /// Count of responded packets by requested retrans
} planetkit_dbg_mon_info_audio_tx_t;

typedef struct planetkit_dbg_mon_info_audio_rx {
    uint32_t        rtp_bps;                    /// received bps (only payload)
    uint32_t        fec_rate_bps;               /// received bps of FEC (only payload)
    float           rtp_loss_rate;              /// RTP packet loss rate ( ~ 1.0f )
    uint32_t        last_ts_diff_ms;            /// timestamp difference between last two received RTP packets in milliseconds
    uint32_t        xod_ms;                     /// Extra one-way delay in milliseconds
    uint32_t        rtp_type;                   /// RTP type (1: normal, 2: xrtp)
    uint32_t        retrans_req_cnt;            /// Count of packets retrans request
} planetkit_dbg_mon_info_audio_rx_t;

typedef struct planetkit_dbg_mon_info_video_tx {
    struct {
        uint16_t    width;                      /// width of the current encoded frame
        uint16_t    height;                     /// height of the current encoded frame
        uint32_t    layer_id;                   /// layer ID of current encoded frame, NO[0], BASE, ENHANCE_1, ENHANCE_2

        uint32_t    frame_intv_ms;              /// interval between consecutive encoded frames in milliseconds

        uint32_t    encoded_frames_cnt;         /// count of encoded frames
        uint32_t    skipped_frames_cnt;         /// count of skipped frames by encoder
        uint32_t    dropped_frames_cnt;         /// count of dropped frames by encoder because of error
        uint32_t    failed_frames_cnt;          /// count of frames which encoder failed to decode

        uint32_t    target_bytes;               /// count of bytes supposed to encode
        uint32_t    target_kbps;                /// target encode rate

        float       fps;                        /// encoded frames per second
    } enc;

    struct {
        uint32_t    sent_bps;                   /// sent bps (only payload)
        uint32_t    fec_rate_bps;               /// sent bps of FEC (only payload)
        uint32_t    fec_state;                  /// fec state, 0: stable, 1: default, 2: low-lossy, 3: mid-lossy 4: probing
        uint32_t    retrans_rsp_cnt;            /// Count of responded packets by requested retrans
    } rtp;
} planetkit_dbg_mon_info_video_tx_t;

typedef struct planetkit_dbg_mon_info_video_rx {
    char            peer_id[PLANETKIT_USER_ID_MAX_SIZE];               /// ID of peer of this RX video stream info
    char            peer_service_id[PLANETKIT_SERVICE_ID_MAX_SIZE];    /// Service-ID of peer of this RX video stream info

    struct {
        uint16_t    width;                      /// width of the current decoded frame
        uint16_t    height;                     /// height of the current decoded frame
        uint32_t    layer_id;                   /// layer ID of current decoded frame, NO[0], BASE, ENHANCE_1, ENHANCE_2

        uint32_t    frames_receive_cnt;         /// count of frames that the decoder received from the sender
        uint32_t    decoded_frames_cnt;         /// count of frame that decoder succeed to decode whole layers
        uint32_t    partially_decoded_frames_cnt;   /// count of frames that decoder succeed to decode partial layers
        uint32_t    failed_frames_cnt;          /// count of frames that decoder failed to decode

        float       fps;                        /// decoded frames per second
    } dec;

    struct {
        uint32_t    recv_bps;                   /// received bps (only payload)
        uint32_t    fec_rate_bps;               /// received bps of FEC (only payload)
        float       rtp_loss_rate;              /// RTP packet loss rate ( ~ 1.0f )
    } rtp;

    struct {
        uint32_t    buffering_time_ms;          /// current video jitter buffering time in milliseconds
        uint32_t    retrans_req_cnt;            /// count of packets for the retransmission request
    } fsb;
} planetkit_dbg_mon_info_video_rx_t;

typedef struct planetkit_dbg_mon_info
{
    plantkit_dbg_mon_info_comm_t        comm;       /// monitoring info regarding communication

    planetkit_dbg_mon_info_audio_tx_t   audio_tx;   /// TX audio monitoring info
    planetkit_dbg_mon_info_audio_rx_t   audio_rx;   /// RX audio monitoring info

    planetkit_dbg_mon_info_video_tx_t   video_tx;   /// TX video monitoring info
    kit_bool_t                          has_video_tx;

    planetkit_dbg_mon_info_video_rx_t   video_rx[PLANETKIT_STATISTICS_MAX_PEERS_VIDEO_STREAMS];   /// RX video monitoring info
    uint32_t                            cnt_video_rx;

} planetkit_dbg_mon_info_t;

typedef struct planetkit_statistics_network_t
{
    float       loss_rate;
    kit_bool_t  has_loss_rate;

    uint32_t    jitter_ms;
    kit_bool_t  has_jitter_ms;

    uint32_t    latency_ms;
    kit_bool_t  has_latency;

    uint32_t    bps;
} planetkit_statistics_network_t;

typedef struct planetkit_statistics_video_t
{
    uint16_t    width;
    uint16_t    height;
    uint16_t    fps;
} planetkit_statistics_video_t;

typedef struct planetkit_statistics_my_audio_t
{
    planetkit_statistics_network_t  network;
} planetkit_statistics_my_audio_t;

typedef struct planetkit_statistics_peers_audio_t
{
    planetkit_statistics_network_t  network;
} planetkit_statistics_peers_audio_t;

typedef struct planetkit_statistics_my_video_t
{
    planetkit_statistics_network_t  network;
    planetkit_statistics_video_t    video;
} planetkit_statistics_my_video_t;

typedef struct planetkit_statistics_peer_video_t
{
    char                            peer_id[PLANETKIT_USER_ID_MAX_SIZE];
    char                            peer_service_id[PLANETKIT_SERVICE_ID_MAX_SIZE];

    kit_bool_t                      is_subgroup;
    char                            subgroup_name[PLANETKIT_STATISTICS_SUBGROUP_NAME_MAX_SIZE];

    planetkit_statistics_network_t  network;
    planetkit_statistics_video_t    video;
} planetkit_statistics_peer_video_t;

typedef struct planetkit_statistics_my_screen_share_t
{
    planetkit_statistics_network_t  network;
    planetkit_statistics_video_t    video;
} planetkit_statistics_my_screen_share_t;

typedef struct planetkit_statistics_peer_screen_share_t
{
    char                            peer_id[PLANETKIT_USER_ID_MAX_SIZE];
    char                            peer_service_id[PLANETKIT_SERVICE_ID_MAX_SIZE];

    kit_bool_t                      is_subgroup;
    char                            subgroup_name[PLANETKIT_STATISTICS_SUBGROUP_NAME_MAX_SIZE];

    planetkit_statistics_network_t  network;
    planetkit_statistics_video_t    video;
} planetkit_statistics_peer_screen_share_t;

typedef struct planetkit_statistics_t
{
    planetkit_statistics_my_audio_t             my_audio;
    planetkit_statistics_peers_audio_t          peers_audio;

    planetkit_statistics_my_video_t             my_video;
    kit_bool_t                                  has_my_video;

    planetkit_statistics_peer_video_t           peers_video[PLANETKIT_STATISTICS_MAX_PEERS_VIDEO_STREAMS];
    uint32_t                                    peers_video_count;

    planetkit_statistics_my_screen_share_t      my_screen_share;
    kit_bool_t                                  has_my_screen_share;

    planetkit_statistics_peer_screen_share_t    peers_screen_share[PLANETKIT_STATISTICS_MAX_PEERS_SCREEN_SHARE_STREAMS];
    uint32_t                                    peers_screen_share_count;
} planetkit_statistics_t;

typedef void (*planetkit_result_handler_t)(void * NULLABLE result_user, kit_bool_t is_success);


typedef enum planetkit_acoustic_echo_canceller_mode {
    PLANETKIT_ACOUSTIC_ECHO_CANCELLER_MODE_DISABLED                 = 0,
    PLANETKIT_ACOUSTIC_ECHO_CANCELLER_MODE_INTENSITY_RECOMMENDED    = 1,    ///< Default
    PLANETKIT_ACOUSTIC_ECHO_CANCELLER_MODE_INTENSITY_MIN            = 2,
    PLANETKIT_ACOUSTIC_ECHO_CANCELLER_MODE_INTENSITY_MAX            = 3,
    PLANETKIT_ACOUSTIC_ECHO_CANCELLER_MODE_INTENSITY_ADAPTIVE       = 4,
} planetkit_acoustic_echo_canceller_mode_e;

typedef enum planetkit_noise_suppressor_mode {
    PLANETKIT_NOISE_SUPPRESSOR_MODE_DISABLED            = 0,
    PLANETKIT_NOISE_SUPPRESSOR_MODE_ENABLED             = 1,    ///< Default
} planetkit_noise_suppressor_mode_e;

typedef enum planetkit_auto_gain_control_mode
{
    PLANETKIT_AUTO_GAIN_CONTROL_MODE_DISABLED           = 0,
    PLANETKIT_AUTO_GAIN_CONTROL_MODE_SIMPLE             = 1,    ///< Default
    PLANETKIT_AUTO_GAIN_CONTROL_MODE_INTERACTIVE        = 2,
} planetkit_auto_gain_control_mode_e;

typedef enum planetkit_audio_hw_type {
    PLANETKIT_AUDIO_HW_TYPE_NONE                        = 0,
    PLANETKIT_AUDIO_HW_TYPE_MIC                         = 1,
    PLANETKIT_AUDIO_HW_TYPE_SPEAKER                     = 2,
    PLANETKIT_AUDIO_HW_TYPE_ALL                         = 3,
} planetkit_audio_hw_type_e;

typedef void (*planetkit_interactive_auto_gain_control_recommended_hw_lv_handler_t)(void * NULLABLE arg, planetkit_audio_hw_type_e device_type, float recommended_lv);

typedef struct planetkit_auto_gain_control_param
{
    planetkit_auto_gain_control_mode_e                                  mode;

    union {
        struct {
            void                                           * NULLABLE   handler_user;
            planetkit_interactive_auto_gain_control_recommended_hw_lv_handler_t NULLABLE  handler;
            float                                                       curr_mic_level;
            float                                                       curr_speaker_level;
        } interactive_auto_gain_control;
    };

} planetkit_auto_gain_control_param_t;

typedef enum planetkit_screen_share_state_e
{
    PLANETKIT_SCREEN_SHARE_STATE_DISABLED = 0,
    PLANETKIT_SCREEN_SHARE_STATE_ENABLED  = 1,
} planetkit_screen_share_state_e;

typedef enum planetkit_video_state_e
{
    PLANETKIT_VIDEO_STATE_DISABLED  = 0,
    PLANETKIT_VIDEO_STATE_ENABLED   = 1,
    PLANETKIT_VIDEO_STATE_PAUSED    = 2,
} planetkit_video_state_e;

typedef struct planetkit_video_status_t
{
    planetkit_video_state_e             state;

    struct
    {
        planetkit_video_pause_reason_e  pause_reason;
    } paused;
} planetkit_video_status_t;

typedef char planetkit_subgrp_name_t[16];

typedef enum planetkit_record_on_cloud_deactivate_reason_e
{
    PLANETKIT_RECORD_ON_CLOUD_DEACTIVATE_REASON_INTERNAL = 0,
    PLANETKIT_RECORD_ON_CLOUD_DEACTIVATE_REASON_ACTIVATION_FAILED = 1,              // Recording failed on the cloud
} planetkit_record_on_cloud_deactivate_reason_e;

typedef void (*planetkit_req_media_result_handler_t)(void *NULLABLE result_user,
                                                     kit_bool_t is_success,
                                                     planetkit_media_req_error_e error,
                                                     planetkit_str_t NULLABLE fail_reason);

typedef void (*planetkit_conference_req_video_resolution_handler_t)(void *NULLABLE user_ptr,
                                                                    kit_bool_t is_success,
                                                                    planetkit_media_req_error_e error,
                                                                    planetkit_video_resolution_e req_res,
                                                                    planetkit_video_resolution_e recv_res,
                                                                    planetkit_str_t NULLABLE fail_reason);

typedef struct planetkit_hooked_audio_t planetkit_hooked_audio_t;
typedef void (*planetkit_hook_my_audio_cb_t)(void *NULLABLE user_ptr, planetkit_hooked_audio_t *NONNULL hooked_audio);

/*************************************************************************
* API DEFINITION
*************************************************************************/

#if defined(__cplusplus)
}
#endif

#endif
