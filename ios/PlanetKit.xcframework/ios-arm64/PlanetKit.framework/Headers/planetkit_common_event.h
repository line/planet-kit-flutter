/**
 * @file planetkit_common_event.h
 * @brief write some brief information here.
 *
 * @date 2019-12-20
 *
 * Generated by author
 *
 */
#ifndef __PLANETKIT_COMMON_EVENT_H__
#define __PLANETKIT_COMMON_EVENT_H__

/*************************************************************************
* INCLUDE
*************************************************************************/
#include "planetkit_subgrp.h"
#include "planetkit_call_start_message.h"

#if defined(__cplusplus)
extern "C" {
#endif
/*************************************************************************
* DATA STRUCTURE
*************************************************************************/
typedef enum planetkit_event_type {
    /* call events : 0 ~ 99 */
    PLANETKIT_EVENT_TYPE_CALL_WAITANSWER                = 0,    ///< planetkit_event_param.waitanswer
    PLANETKIT_EVENT_TYPE_CALL_VERIFIED                  = 1,    ///< planetkit_event_param.verified
    PLANETKIT_EVENT_TYPE_CALL_CONNECTED                 = 2,    ///< planetkit_event_param.connected
    PLANETKIT_EVENT_TYPE_CALL_PREPARATION_FINISHED      = 3,    ///< no param
    PLANETKIT_EVENT_TYPE_CALL_PEER_MEDIA_UNSUPPORTED    = 4,    ///< planetkit_event_param.peer_media_unsupported

    PLANETKIT_EVENT_TYPE_CALL_VIDEO_ENABLED_BY_PEER     = 5,    ///< user must fill 'set_param.enable_video_by_peer'
    PLANETKIT_EVENT_TYPE_CALL_VIDEO_DISABLED_BY_PEER    = 6,    ///< planetkit_event_param.video_disabled

    PLANETKIT_EVENT_TYPE_CALL_NET_UNAVAILABLE           = 7,    ///< planetkit_event_param.network_unavailable
    PLANETKIT_EVENT_TYPE_CALL_NET_REAVAILABLE           = 8,    ///< planetkit_event_param.network_reavailable

    PLANETKIT_EVENT_TYPE_CALL_PEER_STARTED_SCREEN_SHARE   = 9,    ///< no param
    PLANETKIT_EVENT_TYPE_CALL_PEER_STOPPED_SCREEN_SHARE   = 10,   ///< planetkit_event_param.peer_stopped_scrn_shr

    PLANETKIT_EVENT_TYPE_CALL_PEER_VIDEO_PAUSED         = 11,   ///< planetkit_event_param.peer_video_paused
    PLANETKIT_EVENT_TYPE_CALL_PEER_VIDEO_RESUMED        = 12,   ///< no param

    PLANETKIT_EVENT_TYPE_CALL_RECORD_ON_CLOUD_UPDATED   = 13,  ///< planetkit_event_param.record_on_cloud_updated

    /* conference events : 100 ~ 199 */
    PLANETKIT_EVENT_TYPE_CONF_CONNECTED                 = 100,  ///< planetkit_event_param.conf_connected
    PLANETKIT_EVENT_TYPE_CONF_RECEIVED_APP_CTRL_MSG     = 101,  ///< planetkit_event_param.app_ctrl_msg
    PLANETKIT_EVENT_TYPE_CONF_PEER_LIST_UPDATED         = 102,  ///< planetkit_event_param.conf_peer_list_updated
    PLANETKIT_EVENT_TYPE_CONF_PEERS_VIDEO_UPDATED       = 103,  ///< planetkit_event_param.conf_peers_video_updated
    PLANETKIT_EVENT_TYPE_CONF_PUBLIC_SUBGROUP_UPDATED   = 104,  ///< planetkit_event_param.conf_pub_subgrp_updated
    PLANETKIT_EVENT_TYPE_CONF_BAD_NETWORK_DETECTED      = 106,  ///< planetkit_event_param.detect_bad_network
    PLANETKIT_EVENT_TYPE_CONF_BAD_NETWORK_RESOLVED      = 107,  ///< no param
    PLANETKIT_EVENT_TYPE_CONF_EXCEPTION                 = 108,  ///< planetkit_event_param.conf_exception
    PLANETKIT_EVENT_TYPE_CONF_PEER_SCREEN_SHARE_UPDATED   = 109,  ///< planetkit_event_param.conf_peer_scrn_shr_updated;
    PLANETKIT_EVENT_TYPE_CONF_PEER_SET_ROOM_SHARED_CONTENTS     = 110, ///< planetkit_event_param.conf_peer_set_room_shrd_ct
    PLANETKIT_EVENT_TYPE_CONF_PEER_UNSET_ROOM_SHARED_CONTENTS   = 111, ///< planetkit_event_param.conf_peer_unset_room_shrd_ct

    /* common events : 1000 ~ */
    PLANETKIT_EVENT_TYPE_COMMON_DISCONNECTED            = 1000, ///< planetkit_event_param.disconnected

    PLANETKIT_EVENT_TYPE_COMMON_MY_MEDIA_NO_SRC         = 1002, ///< planetkit_event_param.my_media_nosrc
    PLANETKIT_EVENT_TYPE_COMMON_RECEIVED_SHORT_DATA     = 1003, ///< planetkit_event_param.recv_short_data

    PLANETKIT_EVENT_TYPE_COMMON_RECEIVED_MUTE_MY_AUDIO_REQUEST  = 1005, ///< planetkit_event_param.recv_mute_my_audio_req

    PLANETKIT_EVENT_TYPE_COMMON_RECEIVED_PEERS_HOLD     = 1006, ///< planetkit_event_param.peers_hold
    PLANETKIT_EVENT_TYPE_COMMON_RECEIVED_PEERS_UNHOLD   = 1007, ///< planetkit_event_param.peers_unhold

    PLANETKIT_EVENT_TYPE_COMMON_PEERS_SET_SHARED_CONTENTS           = 1010, ///< planetkit_event_param.peers_set_shrd_ct
    PLANETKIT_EVENT_TYPE_COMMON_PEERS_UNSET_SHARED_CONTENTS         = 1011, ///< planetkit_event_param.peers_unset_shrd_ct

    PLANETKIT_EVENT_TYPE_COMMON_PEER_SET_EXCLUSIVELY_SHARED_CONTENTS    = 1012,    ///< planetkit_event_param.peer_set_excl_shrd_ct
    PLANETKIT_EVENT_TYPE_COMMON_PEER_UNSET_EXCLUSIVELY_SHARED_CONTENTS  = 1013,    ///< planetkit_event_param.peer_unset_excl_shrd_ct

    PLANETKIT_EVENT_TYPE_COMMON_DATA_SESSION_INCOMING   = 1016, ///< planetkit_event_param.data_sess_incoming

    PLANETKIT_EVENT_TYPE_COMMON_CONNECTION_UPDATED      = 1017, ///< planetkit_event_param.connection_updated

    PLANETKIT_EVENT_TYPE_COMMON_PEERS_MIC_MUTED         = 1020, ///< planetkit_event_param.peers_mic_muted
    PLANETKIT_EVENT_TYPE_COMMON_PEERS_MIC_UNMUTED       = 1021, ///< planetkit_event_param.peers_mic_unmuted

    PLANETKIT_EVENT_TYPE_COMMON_MY_SCREEN_SHARE_STOPPED_BY_HOLD = 1022,   ///< no param

    PLANETKIT_EVENT_TYPE_COMMON_MY_VIDEO_FPS_LIMIT_UPDATED  = 1023, ///< planetkit_event_param.fps_limit_updated
    PLANETKIT_EVENT_TYPE_COMMON_MY_SCREEN_SHARE_FPS_LIMIT_UPDATED  = 1024,  ///< planetkit_event_param.fps_limit_updated

/**
 * Deprecated enum 
 * DO NOT use the values below to avoid potential issues.
 */
/*  Version(DeprecatedAt)   Value   Name                                                                                    */
/*                                                                                                                          */
/*  4.1                     1008    PLANETKIT_EVENT_TYPE_PEER_STARTED_SCREEN_SHARING                                        */
/*  4.1                     1009    PLANETKIT_EVENT_TYPE_PEER_STOPPED_SCREEN_SHARING                                        */
/*  4.3                     1001    PLANETKIT_EVENT_TYPE_PEER_UPDATED                                                       */
/*  4.3                     1004    PLANETKIT_EVENT_TYPE_RECV_PEER_MIC_STATUS                                               */
/*  4.3                     1014    PLANETKIT_EVENT_TYPE_PEER_SET_ROOM_SHARED_CONTENTS                                      */
/*  4.3                     1015    PLANETKIT_EVENT_TYPE_PEER_UNSET_ROOM_SHARED_CONTENTS                                    */
/*  4.4                     1018    PLANETKIT_EVENT_TYPE_COMMON_PEERS_VIDEO_PAUSED                                          */
/*  4.4                     1019    PLANETKIT_EVENT_TYPE_COMMON_PEERS_VIDEO_RESUMED                                         */
/*                                                                                                                          */
} planetkit_event_type_e;

typedef struct planetkit_event_peer_video_paused_t {
    planetkit_video_pause_reason_e  reason;
} planetkit_event_peer_video_paused_t;

typedef struct planetkit_event_call_peer_media_unsupported_param {
    planetkit_media_type_e          unsupported_media;
} planetkit_event_call_peer_media_unsupported_param_t;

typedef struct planetkit_event_my_media_no_src_param_t {
    planetkit_media_type_e          media_type;
} planetkit_event_my_media_no_src_param_t;

typedef struct planetkit_event_recv_short_data_param {
    planetkit_str_t     NONNULL     src_id;
    planetkit_str_t     NONNULL     src_service_id;
    planetkit_short_data_t  data;

} planetkit_event_recv_short_data_param_t;

typedef struct planetkit_event_disconnected_param {
    planetkit_disconnect_source_e   disconnect_source;
    planetkit_disconnect_reason_e   disconnect_reason;     ///< PLANETKIT_EVENT_TYPE_CALL_DISCONNECTED
    planetkit_str_t     NULLABLE    user_rel_code;
    kit_bool_t                      by_remote;
} planetkit_event_disconnected_param_t;

typedef struct planetkit_event_call_waitanswer_param {
    planetkit_str_t                 NULLABLE    kit_cfg;
} planetkit_event_call_waitanswer_param_t;

typedef struct planetkit_event_call_verified_param {
    kit_bool_t                                  peer_use_rsp_prep;
    planetkit_call_start_message_t  *NULLABLE   peer_start_message;

    planetkit_str_t                 NULLABLE    kit_cfg;
} planetkit_event_call_verified_param_t;

typedef struct planetkit_event_call_connected_param {
    kit_bool_t                                  enabled_vid_hw_codec;
    kit_bool_t                                  support_data_sess;
    kit_bool_t                                  support_video_share_mode; ///< Whether to support video share mode 

    planetkit_call_start_message_t  *NULLABLE   peer_start_message;
    kit_bool_t                                  is_in_rsp_prep;
    kit_bool_t                                  should_finish_prep;
} planetkit_event_call_connected_param_t;

typedef struct planetkit_event_conf_connected_param {
    kit_bool_t                                  enabled_vid_hw_codec;
    kit_bool_t                                  support_video_share_mode;
    planetkit_str_t                 NULLABLE    kit_cfg;
} planetkit_event_conf_connected_param_t;

typedef struct planetkit_event_conf_peer_list_updated_param {
    planetkit_subgroup_t *            NONNULL subgrp;

    planetkit_peer_t * NULLABLE *  NULLABLE added;
    uint32_t                                added_cnt;

    planetkit_peer_t * NULLABLE *  NULLABLE removed;
    uint32_t                                removed_cnt;

    uint32_t                                total_peers_cnt;    ///< count of peers managed by the room server
} planetkit_event_conf_peer_list_updated_param_t;

typedef struct planetkit_event_conf_peer_video_status_t {
    planetkit_peer_t * NONNULL              peer;

    planetkit_video_status_t                video_status;
}  planetkit_event_conf_peer_video_status_t;

typedef struct planetkit_event_conf_peers_video_updated_param {
    planetkit_subgroup_t *            NONNULL subgrp;

    planetkit_event_conf_peer_video_status_t * NULLABLE video_updated;
    uint32_t                                            video_updated_cnt;
} planetkit_event_conf_peers_video_updated_param_t;

typedef struct planetkit_event_conf_subgrp_update_peer {
    planetkit_peer_t *  NONNULL         peer;

    planetkit_str_t NONNULL * NULLABLE  subscribed;         ///< newly subscribed subgroup names
    uint32_t                            subscribed_cnt;

    planetkit_str_t NONNULL * NULLABLE  unsubscribed;       ///< unsubscribed subgroup names since last event
    uint32_t                            unsubscribed_cnt;
} planetkit_event_conf_subgrp_update_peer_t;

typedef struct planetkit_event_conf_pub_subgrp_updated_param {
    planetkit_event_conf_subgrp_update_peer_t * NONNULL updated_peers;
    uint32_t                                            updated_peers_cnt;
} planetkit_event_conf_pub_subgrp_updated_param_t;

typedef struct planetkit_event_conf_peer_scrn_shr_updated_param {
    planetkit_peer_t    *   NONNULL     peer;
    planetkit_subgroup_t  *   NONNULL     subgrp;
 
    planetkit_screen_share_state_e    state;
} planetkit_event_conf_peer_scrn_shr_updated_param_t;

typedef struct planetkit_event_peers_mic_muted_param_t {
    planetkit_peer_t * NONNULL * NONNULL    peers;
    uint32_t                                peers_cnt;
} planetkit_event_peers_mic_muted_param_t;

typedef struct planetkit_event_peers_mic_unmuted_param_t {
    planetkit_peer_t * NONNULL * NONNULL    peers;
    uint32_t                                peers_cnt;
} planetkit_event_peers_mic_unmuted_param_t;

typedef struct planetkit_event_recv_mute_my_audio_req_param {
    planetkit_peer_t * NONNULL      peer;
    kit_bool_t                      enable_mute;
} planetkit_event_recv_mute_my_audio_req_param_t;

typedef struct planetkit_event_call_video_enabled_param {
    kit_bool_t                      pause_my_video;
} planetkit_event_call_video_enabled_param_t;

typedef struct planetkit_event_call_video_disabled_param {
    planetkit_media_disable_reason_e disabled_reason;
} planetkit_event_call_video_disabled_param_t;

typedef struct planetkit_event_call_net_unavailable_param {
    kit_bool_t                      is_peer;
    uint32_t                        will_disconnected_after_sec;
} planetkit_event_call_net_unavailable_param_t;

typedef struct planetkit_event_call_net_reavailable_param {
    kit_bool_t                      is_peer;
} planetkit_event_call_net_reavailable_param_t;

typedef struct planetkit_event_peer_hold {
    planetkit_peer_t * NONNULL          peer;

    planetkit_str_t         NULLABLE    reason;
} planetkit_event_peer_hold_t;

typedef struct planetkit_event_peers_hold_param {
    planetkit_event_peer_hold_t * NONNULL   hold;
    uint32_t                                hold_cnt;
} planetkit_event_peers_hold_param_t;

typedef struct planetkit_event_peers_unhold_param {
    planetkit_peer_t * NONNULL * NONNULL    peers;
    uint32_t                                peers_cnt;
} planetkit_event_peers_unhold_param_t;

typedef struct planetkit_event_peer_scrn_shr_stop_param {
    kit_bool_t                      has_reason;
    int32_t                         reason;
} planetkit_event_call_peer_scrn_shr_stop_param_t;

typedef struct planetkit_event_peer_set_shrd_ct_param {
    planetkit_peer_t   *   NONNULL      peer;

    uint32_t                            elapsed_after_set_msec;

    const void              *   NONNULL data;
    uint32_t                            data_size;
} planetkit_event_peer_set_shrd_ct_param_t;

typedef struct planetkit_event_peer_unset_shrd_ct_param {
    planetkit_peer_t * NONNULL peer;
} planetkit_event_peer_unset_shrd_ct_param_t;

typedef struct planetkit_event_peers_set_shrd_ct_param {
    planetkit_event_peer_set_shrd_ct_param_t * NONNULL  set_shrd_ct;
    uint32_t                                            set_shrd_ct_cnt;
} planetkit_event_peers_set_shrd_ct_param_t;

typedef struct planetkit_event_peers_unset_shrd_ct_param {
    planetkit_peer_t * NONNULL * NONNULL    peers;
    uint32_t                                peers_cnt;
} planetkit_event_peers_unset_shrd_ct_param_t;

typedef struct planetkit_event_peer_set_room_shrd_ct_param {
    planetkit_str_t         NONNULL     user_id;        ///< It may be a user who does not exist in the room.
    planetkit_str_t         NONNULL     service_id;

    uint32_t                            elapsed_after_set_msec;

    const void              *   NONNULL data;
    uint32_t                            data_size;
} planetkit_event_peer_set_room_shrd_ct_param_t;

typedef struct planetkit_event_peer_unset_room_shrd_ct_param {
    planetkit_str_t         NONNULL     user_id;        ///< It may be a user who does not exist in the room.
    planetkit_str_t         NONNULL     service_id;
} planetkit_event_peer_unset_room_shrd_ct_param_t;

typedef struct planetkit_event_data_sess_incoming_param {
    planetkit_data_session_stream_id_t stream_id;
    planetkit_subgroup_t  * NULLABLE  subgrp;
    planetkit_data_session_type_e      type;
} planetkit_event_data_sess_incoming_param_t;

typedef struct planetkit_event_data_recv_app_ctrl_msg {
    const void      *   NONNULL     msg;
    uint32_t                        msg_size;
} planetkit_event_data_recv_app_ctrl_msg_t;

typedef struct planetkit_event_data_detect_bad_net_param {
    int                                 will_disconnect_after_sec;      /// if the value is negative, will not disconnect
} planetkit_event_data_detect_bad_net_param_t;

typedef struct planetkit_event_conf_exception {
    planetkit_peer_t    *   NONNULL peer;
    planetkit_subgroup_t  *   NONNULL subgrp;
    planetkit_conf_exception_type_e type;
    planetkit_str_t         NULLABLE desc;
} planetkit_event_conf_exception_t;

typedef struct planetkit_event_conf_exception_param {
    planetkit_event_conf_exception_t * NONNULL  exceptions;
    uint32_t                                    exceptions_cnt;
} planetkit_event_conf_exception_param_t;

typedef struct planetkit_event_connection_updated {
    planetkit_str_t         NONNULL local_ip_addr;
} planetkit_event_connection_updated_t;

typedef struct planetkit_event_fps_limit_updated_t {
    kit_bool_t                      limit_enabled;
    unsigned int                    fps;
} planetkit_event_fps_limit_updated_t;

typedef struct planetkit_event_call_record_on_cloud_updated_t {
    kit_bool_t                      activated;
    struct {
        planetkit_record_on_cloud_deactivate_reason_e reason;
    } deactivated;
} planetkit_event_call_record_on_cloud_updated_t;

typedef struct planetkit_event_param {
    planetkit_event_type_e event_type;

    union {
        planetkit_event_call_waitanswer_param_t     waitanswer;
        planetkit_event_call_verified_param_t       verified;
        planetkit_event_call_connected_param_t      connected;
        planetkit_event_call_peer_media_unsupported_param_t peer_media_supported;
        planetkit_event_call_video_disabled_param_t video_disabled;
        planetkit_event_call_net_unavailable_param_t network_unavailable;
        planetkit_event_call_net_reavailable_param_t network_reavailable;
        planetkit_event_call_peer_scrn_shr_stop_param_t  peer_stopped_scrn_shr;

        planetkit_event_conf_connected_param_t      conf_connected;
        planetkit_event_conf_peer_list_updated_param_t conf_peer_list_updated;
        planetkit_event_conf_peers_video_updated_param_t conf_peers_video_updated;
        planetkit_event_conf_pub_subgrp_updated_param_t conf_pub_subgrp_updated;
        planetkit_event_conf_exception_param_t      conf_exception;
        planetkit_event_conf_peer_scrn_shr_updated_param_t conf_peer_scrn_shr_updated;
        planetkit_event_peer_set_room_shrd_ct_param_t   conf_peer_set_room_shrd_ct;
        planetkit_event_peer_unset_room_shrd_ct_param_t conf_peer_unset_room_shrd_ct;

        planetkit_event_disconnected_param_t        disconnected;

        planetkit_event_my_media_no_src_param_t     my_media_nosrc;
        planetkit_event_recv_short_data_param_t     recv_short_data;

        planetkit_event_recv_mute_my_audio_req_param_t recv_mute_my_audio_req;

        planetkit_event_peers_hold_param_t          peers_hold;
        planetkit_event_peers_unhold_param_t        peers_unhold;

        planetkit_event_peers_set_shrd_ct_param_t   peers_set_shrd_ct;
        planetkit_event_peers_unset_shrd_ct_param_t peers_unset_shrd_ct;

        planetkit_event_peer_set_shrd_ct_param_t    peer_set_excl_shrd_ct;
        planetkit_event_peer_unset_shrd_ct_param_t  peer_unset_excl_shrd_ct;

        planetkit_event_data_sess_incoming_param_t  data_sess_incoming;
        planetkit_event_data_recv_app_ctrl_msg_t    app_ctrl_msg;
        planetkit_event_data_detect_bad_net_param_t detect_bad_network;

        planetkit_event_connection_updated_t        connection_updated;

        planetkit_event_peer_video_paused_t         peer_video_paused;

        planetkit_event_peers_mic_muted_param_t     peers_mic_muted;
        planetkit_event_peers_mic_unmuted_param_t   peers_mic_unmuted;

        planetkit_event_fps_limit_updated_t         fps_limit_updated;
        planetkit_event_call_record_on_cloud_updated_t record_on_cloud_updated;
    };

    union {
        planetkit_event_call_video_enabled_param_t   enable_video_by_peer;
    } set_param;

} planetkit_event_param_t;

typedef void (*planetkit_evt_handler_t)(void * NULLABLE arg, planetkit_event_param_t * NONNULL param);

/*************************************************************************
* API DEFINITION
*************************************************************************/

#if defined(__cplusplus)
}
#endif

#endif
