/**
 * @file planetkit_conference.h
 * @brief write some brief information here.
 *
 * @date 2020-01-16
 *
 * Generated by author
 *
 */
#ifndef __PLANETKIT_CONFERENCE_H__
#define __PLANETKIT_CONFERENCE_H__

/*************************************************************************
* INCLUDE
*************************************************************************/
#include "planetkit_common.h"
#include "planetkit_common_event.h"
#include "planetkit_data_sess.h"
#include "planetkit_send_voice_processor.h"
#include "planetkit_peer_control.h"
#include "planetkit_my_status.h"

#if defined(__cplusplus)
extern "C" {
#endif
/*************************************************************************
* DATA STRUCTURE
*************************************************************************/
typedef struct planetkit_conference       planetkit_conference_t;

extern planetkit_str_t                      NULLABLE kPlanetKitIdForBroadcastToRoom;
extern planetkit_str_t                      NULLABLE kPlanetKitMainRoomName;

typedef struct planetkit_conference_video_param_t {
    planetkit_video_capa_t          tx_capa;
    int32_t                         tx_prefer_res_target_br_kbps[PLANETKIT_VIDEO_RESOLUTION_MAX+1];
    planetkit_param_bool_e          rx_prefer_video_hw_codec;

    planetkit_vid_handler_t         NULLABLE rx_handler;
    void                        *   NULLABLE user_ptr;
} planetkit_conference_video_param_t;

typedef struct planetkit_conference_scrn_shr_param_t {
    planetkit_vid_handler_t         NONNULL rx_handler;
    void                        *   NULLABLE user_ptr;
} planetkit_conference_scrn_shr_param_t;

typedef struct planetkit_conference_param_t {
    /* HAVE TO call "planetkit_conference_param_init" first before use it */
    int                             _init;

    planetkit_str_t                 NONNULL my_id;
    planetkit_str_t                 NONNULL my_service_id;
    planetkit_str_t                 NULLABLE my_country_code;
    planetkit_str_t                 NULLABLE my_display_name;
    planetkit_str_t                 NONNULL room_id;
    planetkit_str_t                 NONNULL room_service_id;
    planetkit_str_t                 NULLABLE app_server_data;   // Maximum size of app_server_data is 4096 bytes including null termination

    planetkit_param_bool_e          start_with_video;
    planetkit_param_bool_e          disable_auto_disconn_on_bad_net;
    planetkit_param_bool_e          enable_statistics;

    planetkit_conference_video_param_t    vid_param;
    planetkit_conference_scrn_shr_param_t scrn_shr_param;
    planetkit_comm_param_t                comm_param;

    void                        *   NONNULL arg;
    planetkit_evt_handler_t         NONNULL handler;
} planetkit_conference_param_t;

/*************************************************************************
* API DEFINITION
*************************************************************************/
planetkit_conference_t * NULLABLE planetkit_conference_create();
planetkit_start_fail_reason_e planetkit_conference_join_with_api_key(planetkit_conference_t * NONNULL conference,
                                                                     planetkit_str_t NONNULL api_key,
                                                                     planetkit_conference_param_t * NONNULL conference_param);
planetkit_start_fail_reason_e planetkit_conference_join_conference(planetkit_conference_t *NONNULL conference,
                                                                   planetkit_str_t NONNULL access_token,
                                                                   planetkit_conference_param_t *NONNULL conference_param);

/**
 * @param internal_rel_code Maximum size of internal_rel_code is 128 bytes including null termination
 */
void planetkit_conference_leave_conference_with_kit_internal_error(planetkit_conference_t * NONNULL conference, planetkit_str_t NONNULL internal_rel_code);
void planetkit_conference_leave_conference(planetkit_conference_t * NONNULL conference, planetkit_disconnect_reason_e end_reason);

kit_bool_t      planetkit_conference_enable_video(planetkit_conference_t * NONNULL conference, void * NULLABLE result_user, planetkit_result_handler_t NULLABLE result_handler);
kit_bool_t      planetkit_conference_disable_video(planetkit_conference_t * NONNULL conference, planetkit_media_disable_reason_e reason, void * NULLABLE result_user, planetkit_result_handler_t NULLABLE result_handler);

int32_t         planetkit_conference_get_duration(planetkit_conference_t * NONNULL conference);

/**
 * @param hold_reason Maximum size of hold_reason is 256 bytes including null termination
 */
kit_bool_t      planetkit_conference_hold(planetkit_conference_t * NONNULL conference, planetkit_str_t NULLABLE hold_reason,
                                          void * NULLABLE user_ptr, planetkit_result_handler_t NULLABLE result_handler);
kit_bool_t      planetkit_conference_unhold(planetkit_conference_t * NONNULL conference,
                                            void * NULLABLE user_ptr, planetkit_result_handler_t NULLABLE result_handler);
kit_bool_t      planetkit_conference_is_on_hold(planetkit_conference_t * NONNULL conference);

kit_bool_t      planetkit_conference_retain(planetkit_conference_t * NONNULL conference);
void            planetkit_conference_release(planetkit_conference_t * NONNULL conference);

int32_t         planetkit_conference_send_my_audio_data(planetkit_conference_t * NONNULL conference,
                                                        int32_t sampling_rate, planetkit_audio_sample_type_e sample_format,
                                                        const void * NONNULL data_ptr, int32_t data_len,
                                                        planetkit_audio_tx_level_t * NULLABLE audio_level);
int32_t         planetkit_conference_put_user_acoustic_echo_canceller_reference(planetkit_conference_t * NONNULL conference,
                                                                                int32_t sampling_rate, planetkit_audio_sample_type_e sample_format,
                                                                                const void * NONNULL data_ptr, int32_t data_len);
kit_bool_t      planetkit_conference_start_user_acoustic_echo_canceller_reference(planetkit_conference_t * NONNULL conference, void * NULLABLE user_ptr, planetkit_result_handler_t NULLABLE result_handler);
kit_bool_t      planetkit_conference_stop_user_acoustic_echo_canceller_reference(planetkit_conference_t * NONNULL conference, void * NULLABLE user_ptr, planetkit_result_handler_t NULLABLE result_handler);
int32_t         planetkit_conference_get_peers_audio_data(planetkit_conference_t * NONNULL conference,
                                                          int32_t sampling_rate, planetkit_audio_sample_type_e sample_format,
                                                          int32_t sample_cnt_to_get, void * NONNULL buf_ptr, int32_t buf_size,
                                                          planetkit_audio_rx_level_t * NULLABLE audio_level);
int32_t         planetkit_conference_send_my_video_data(planetkit_conference_t * NONNULL conference,
                                                        int64_t tick,
                                                        int32_t width, int32_t height,
                                                        planetkit_video_rotation_e rotation,
                                                        const void * NONNULL data_ptr);
kit_bool_t      planetkit_conference_is_video_sending_available(planetkit_conference_t *NONNULL conference, int64_t tick);

planetkit_my_media_status_t *NULLABLE planetkit_conference_get_my_media_status(planetkit_conference_t * NONNULL conference);

planetkit_str_t NULLABLE planetkit_conference_get_my_display_name(planetkit_conference_t *NONNULL conference);
planetkit_user_equipment_type_e planetkit_conference_get_user_equipment_type(planetkit_conference_t *NONNULL conference);

/**
 * The `planetkit_conference_request_peer_video` affects call quality.
 * Please refer to the document and use this API appropriately.
 * https://docs.lineplanet.me/learn/how-tos/peer-video-resolution-in-group-call
 */
kit_bool_t      planetkit_conference_request_peer_video(planetkit_conference_t * NONNULL conference,
                                                        planetkit_str_t NONNULL peer_id,
                                                        planetkit_str_t NONNULL peer_service_id,
                                                        planetkit_str_t NULLABLE subgrp_name,
                                                        kit_bool_t request_start,
                                                        planetkit_video_resolution_e req_resolution,
                                                        void * NULLABLE result_user,
                                                        planetkit_req_media_result_handler_t NULLABLE result_handler,
                                                        void * NULLABLE resolution_user,
                                                        planetkit_conference_req_video_resolution_handler_t NULLABLE resolution_handler);

/**
 * Should be called after PLANETKIT_EVENT_TYPE_CONF_CONNECTED received
 */
uint32_t        planetkit_conference_get_peers_video_max_count(planetkit_conference_t * NONNULL conference);

/**
 * Should be called after PLANETKIT_EVENT_TYPE_CONF_CONNECTED received
 */
uint32_t        planetkit_conference_get_peers_screen_share_max_count(planetkit_conference_t * NONNULL conference);

kit_bool_t      planetkit_conference_mute_my_audio(planetkit_conference_t * NONNULL conference, kit_bool_t mute_on,
                                                   void * NULLABLE mute_user_ptr, planetkit_result_handler_t NULLABLE mute_result_handler);
kit_bool_t      planetkit_conference_silence_peers_audio(planetkit_conference_t * NONNULL conference, kit_bool_t silence,
                                                         void * NULLABLE result_user, planetkit_result_handler_t NULLABLE result_handler);
kit_bool_t      planetkit_conference_set_audio_route(planetkit_conference_t * NONNULL conference,
                                                     planetkit_audio_route_type_e audio_route_type, kit_bool_t has_any_virtual_dev);
kit_bool_t      planetkit_conference_pause_my_video(planetkit_conference_t * NONNULL conference,
                                                    planetkit_video_pause_reason_e reason, void * NULLABLE pause_user_ptr,
                                                    planetkit_result_handler_t NULLABLE pause_result_handler);
kit_bool_t      planetkit_conference_resume_my_video(planetkit_conference_t * NONNULL conference, void * NULLABLE resume_user_ptr,
                                                     planetkit_result_handler_t NULLABLE resume_result_handler);
kit_bool_t      planetkit_conference_pause_my_audio(planetkit_conference_t * NONNULL conference, planetkit_audio_pause_reason_e reason,
                                                    void * NULLABLE pause_user_ptr,
                                                    planetkit_result_handler_t NULLABLE pause_result_handler);
kit_bool_t      planetkit_conference_resume_my_audio(planetkit_conference_t * NONNULL conference,
                                                     void * NULLABLE resume_user_ptr,
                                                     planetkit_result_handler_t NULLABLE resume_result_handler);

kit_bool_t      planetkit_conference_request_peer_mute(planetkit_conference_t * NONNULL conference, kit_bool_t mute_on,
                                                       planetkit_str_t NONNULL peer_userid, planetkit_str_t NONNULL peer_service_id,
                                                       void * NULLABLE user_ptr, planetkit_result_handler_t NULLABLE result_handler);
kit_bool_t      planetkit_conference_request_peers_mute(planetkit_conference_t * NONNULL conference, kit_bool_t mute_on,
                                                        void * NULLABLE user_ptr, planetkit_result_handler_t NULLABLE result_handler);

kit_bool_t      planetkit_conference_is_peers_audio_silenced(planetkit_conference_t * NONNULL conference);

/**
 * @param data_type Type of the short data. The maximum size of data_type is 100 bytes including null termination.
 * @param data_size Size of the short data. The maximum size of data is 800 bytes.
 */
kit_bool_t      planetkit_conference_send_short_data_to_peer(planetkit_conference_t * NONNULL conference, planetkit_short_data_target_t * NULLABLE tgt_peer,
                                                             planetkit_str_t NONNULL data_type, const void * NONNULL data_ptr, int32_t data_size,
                                                             void * NONNULL result_user, planetkit_result_handler_t NONNULL result_handler);

kit_bool_t      planetkit_conference_register_peer_control(planetkit_conference_t * NONNULL conference, planetkit_peer_control_t * NONNULL peer_control,
                                                           void * NULLABLE result_user, planetkit_result_handler_t NONNULL result_handler);
kit_bool_t      planetkit_conference_unregister_peer_control(planetkit_conference_t * NONNULL conference, planetkit_peer_control_t * NONNULL peer_control,
                                                             void * NULLABLE result_user, planetkit_result_handler_t NONNULL result_handler);

/**
 * Statistics API set
 */

 /* Statistics will be updated with 200 milliseconds interval */
kit_bool_t planetkit_conference_get_statistics(planetkit_conference_t * NONNULL conference, planetkit_statistics_t * NONNULL out_statistics);

/**
 * Screen share API set
 */
kit_bool_t     planetkit_conference_start_my_screen_share(planetkit_conference_t * NONNULL conference, planetkit_str_t NULLABLE dst_subgrp_name,
                                                          void * NULLABLE user_ptr, planetkit_result_handler_t NULLABLE result_handler);
kit_bool_t     planetkit_conference_stop_my_screen_share(planetkit_conference_t * NONNULL conference,
                                                          void * NULLABLE user_ptr, planetkit_result_handler_t NULLABLE result_handler);
kit_bool_t     planetkit_conference_stop_my_screen_share_with_reason(planetkit_conference_t * NONNULL conference, int32_t reason,
                                                                     void * NULLABLE user_ptr, planetkit_result_handler_t NULLABLE result_handler);
int32_t        planetkit_conference_send_my_screen_share_data(planetkit_conference_t * NONNULL conference,
                                                              int64_t tick, int32_t width, int32_t height,
                                                              planetkit_video_rotation_e rotation, const void * NONNULL data_ptr);
kit_bool_t     planetkit_conference_is_screen_share_sending_available(planetkit_conference_t *NONNULL conference, int64_t tick);
/**
 * Enable or disable the video share mode in screen share.
 * The video share mode optimizes screen share for video clip sharing. When the video share mode is enabled, resource usage may increase.
 * The video share mode can be enabled before starting screen share or during ongoing screen share.
 */
kit_bool_t     planetkit_conference_set_my_screen_share_video_share_mode(planetkit_conference_t * NONNULL conference, kit_bool_t video_share_mode);
/**
 * Get whether the video share mode is enabled.
 */
kit_bool_t     planetkit_conference_is_my_screen_share_video_share_mode_enabled(planetkit_conference_t * NONNULL conference);

kit_bool_t     planetkit_conference_request_peer_screen_share(planetkit_conference_t * NONNULL conference,
                                                              planetkit_str_t NONNULL peer_id,
                                                              planetkit_str_t NONNULL peer_service_id,
                                                              planetkit_str_t NULLABLE subgrp_name,
                                                              kit_bool_t request_start,
                                                              planetkit_req_media_result_handler_t NULLABLE result_handler,
                                                              void * NULLABLE result_user);

/**
 * Screen share Subgroup API set
 */
kit_bool_t     planetkit_conference_change_my_screen_share_destination(planetkit_conference_t * NONNULL conference, planetkit_str_t NONNULL dst_subgrp_name,
                                                                       void * NULLABLE result_handler_user, planetkit_result_handler_t NULLABLE result_handler);
kit_bool_t     planetkit_conference_change_my_screen_share_destination_to_main_room(planetkit_conference_t * NONNULL conference,
                                                                                    void * NULLABLE result_handler_user,
                                                                                    planetkit_result_handler_t NULLABLE result_handler);

/**
 * Contents share API set
 */
kit_bool_t     planetkit_conference_set_shared_contents(planetkit_conference_t * NONNULL conference, const void * NONNULL shared_contents, int32_t shared_contents_size,
                                                        void * NULLABLE user_ptr, planetkit_result_handler_t NULLABLE result_handler);
kit_bool_t     planetkit_conference_unset_shared_contents(planetkit_conference_t * NONNULL conference,
                                                          void * NULLABLE user_ptr, planetkit_result_handler_t NULLABLE result_handler);
kit_bool_t     planetkit_conference_set_exclusively_shared_contents(planetkit_conference_t * NONNULL conference, const void * NONNULL shared_contents, int32_t shared_contents_size,
                                                                    void * NULLABLE user_ptr, planetkit_result_handler_t NULLABLE result_handler);
kit_bool_t     planetkit_conference_unset_exclusively_shared_contents(planetkit_conference_t * NONNULL conference,
                                                                      void * NULLABLE user_ptr, planetkit_result_handler_t NULLABLE result_handler);
kit_bool_t     planetkit_conference_set_room_shared_contents(planetkit_conference_t * NONNULL conference, const void * NONNULL shared_contents, int32_t shared_contents_size,
                                                             void * NULLABLE user_ptr, planetkit_result_handler_t NULLABLE result_handler);
kit_bool_t     planetkit_conference_unset_room_shared_contents(planetkit_conference_t * NONNULL conference,
                                                               void * NULLABLE user_ptr, planetkit_result_handler_t NULLABLE result_handler);

/**
 * Voice Quality Control API set
 */
planetkit_send_voice_processor_t * NONNULL planetkit_conference_get_send_voice_processor(planetkit_conference_t * NONNULL conference);



/**
 * Subgroup API set
 */
kit_bool_t      planetkit_conference_subscribe_subgroup(planetkit_conference_t * NONNULL conference, planetkit_str_t NONNULL subgrp_name,
                                                        planetkit_subgroup_peer_update_type_e subgrp_attr_peer_update_type, kit_bool_t subgrp_attr_enable_video_update,
                                                        kit_bool_t subgrp_attr_use_data_sess,
                                                        void * NULLABLE result_handler_user, planetkit_subgrp_subs_result_handler_t NULLABLE result_handler);

kit_bool_t      planetkit_conference_unsubscribe_subgroup(planetkit_conference_t * NONNULL conference, planetkit_str_t NONNULL subgrp_name,
                                                          void * NULLABLE result_handler_user, planetkit_subgrp_unsubs_result_handler_t NULLABLE result_handler);

planetkit_subgroup_t * NONNULL planetkit_conference_get_main_room(planetkit_conference_t * NONNULL conference);

/**
 * Subgroup Audio API set
 */
kit_bool_t      planetkit_conference_change_my_audio_destination(planetkit_conference_t * NONNULL conference, planetkit_str_t NULLABLE dst_subgrp_name,
                                                                 void * NULLABLE result_handler_user, planetkit_result_handler_t NULLABLE result_handler);
kit_bool_t      planetkit_conference_change_my_audio_destination_to_main_room(planetkit_conference_t * NONNULL conference,
                                                                              void * NULLABLE result_handler_user,
                                                                              planetkit_result_handler_t NULLABLE result_handler);

kit_bool_t      planetkit_conference_set_tag_my_audio_of_main_room(planetkit_conference_t * NONNULL conference, planetkit_str_t NONNULL tag_subgrp_name,
                                                                   void * NULLABLE result_handler_user, planetkit_result_handler_t NULLABLE result_handler);
kit_bool_t      planetkit_conference_clear_tag_my_audio_of_main_room(planetkit_conference_t * NONNULL conference,
                                                                     void * NULLABLE result_handler_user, planetkit_result_handler_t NULLABLE result_handler);

kit_bool_t      planetkit_conference_set_peers_audio_auto_volume_control(planetkit_conference_t * NONNULL conference,
                                                                         planetkit_str_t NULLABLE * NONNULL focus_subgrps, unsigned int cnt_focus_subgrps,
                                                                         void * NULLABLE result_handler_user, planetkit_result_handler_t NULLABLE result_handler);
kit_bool_t      planetkit_conference_clear_peers_audio_auto_volume_control(planetkit_conference_t * NONNULL conference,
                                                                           void * NULLABLE result_handler_user, planetkit_result_handler_t NULLABLE result_handler);

kit_bool_t      planetkit_conference_set_peer_audio_volume_level_setting(planetkit_conference_t * NONNULL conference,
                                                                         planetkit_str_t NONNULL peer_id, planetkit_str_t NONNULL peer_service_id,
                                                                         kit_bool_t set_for_all_subgrps, planetkit_str_t NULLABLE subgrp_name_to_apply,
                                                                         uint8_t volume_level_setting, /* ranges 0 ~ 100 ~ 110. 0:mute, 100:original volume */
                                                                         void * NULLABLE result_handler_user, planetkit_result_handler_t NULLABLE result_handler);

/**
 * Subgroup Video API set
 */
kit_bool_t      planetkit_conference_change_my_video_destination(planetkit_conference_t * NONNULL conference, planetkit_str_t NONNULL dst_subgrp_name,
                                                                 void * NULLABLE result_handler_user, planetkit_result_handler_t NULLABLE result_handler);
kit_bool_t      planetkit_conference_change_my_video_destination_to_main_room(planetkit_conference_t * NONNULL conference,
                                                                              void * NULLABLE result_handler_user, planetkit_result_handler_t NULLABLE result_handler);

void            planetkit_conference_param_init(planetkit_conference_param_t * NONNULL param);
kit_bool_t      planetkit_conference_param_is_valid(planetkit_conference_param_t * NONNULL param);
int32_t         planetkit_conference_param_to_str(planetkit_conference_param_t * NONNULL param, void * NONNULL buf, int32_t buf_size);

void            planetkit_conference_video_param_init(planetkit_conference_video_param_t * NONNULL param);
kit_bool_t      planetkit_conference_video_param_is_valid(planetkit_conference_video_param_t * NONNULL param);
int32_t         planetkit_conference_video_param_to_str(planetkit_conference_video_param_t * NONNULL param, void * NONNULL buf, int32_t buf_size);

void            planetkit_conference_scrn_shr_param_init(planetkit_conference_scrn_shr_param_t * NONNULL param);
kit_bool_t      planetkit_conference_scrn_shr_param_is_valid(planetkit_conference_scrn_shr_param_t * NONNULL param);
int32_t         planetkit_conference_scrn_shr_param_to_str(planetkit_conference_scrn_shr_param_t * NONNULL param, void * NONNULL buf, int32_t buf_size);

/**
 * User stat
 */

/**
 * @param err_code Maximum size of err_code is 64 bytes including null termination
 */
kit_bool_t      planetkit_conference_notify_start_first_my_audio_init(planetkit_conference_t *NONNULL conference);
kit_bool_t      planetkit_conference_notify_end_first_my_audio_init(planetkit_conference_t *NONNULL conference, planetkit_str_t NULLABLE err_code);

/**
 * Debug API set
 */
const planetkit_dbg_mon_info_t * NULLABLE planetkit_conference_get_dbg_mon_info(planetkit_conference_t * NONNULL conference);

kit_bool_t      planetkit_conference_put_video_rtp_data(planetkit_conference_t * NONNULL conference, planetkit_rtp_frame_t * NONNULL rtp_frame);
kit_bool_t      planetkit_conference_put_audio_rtp_data(planetkit_conference_t * NONNULL conference, planetkit_rtp_frame_t * NONNULL rtp_frame);

#if defined(__cplusplus)
}
#endif


#endif
