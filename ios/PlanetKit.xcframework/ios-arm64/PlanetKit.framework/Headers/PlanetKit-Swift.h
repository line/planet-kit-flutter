#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.9.2 (swiftlang-5.9.2.2.56 clang-1500.1.0.2.5)
#ifndef PLANETKIT_SWIFT_H
#define PLANETKIT_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import AVFAudio;
@import AVFoundation;
@import CoreAudioTypes;
@import CoreFoundation;
@import CoreMedia;
@import CoreVideo;
@import Darwin;
@import Foundation;
@import MetalKit;
@import ObjectiveC;
@import UIKit;
#endif

#import <PlanetKit/PlanetKit.h>

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="PlanetKit",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)












typedef SWIFT_ENUM(NSInteger, PlanetKitAcousticEchoCancellerMode, closed) {
  PlanetKitAcousticEchoCancellerModeDisabled = 0,
  PlanetKitAcousticEchoCancellerModeIntensityRecommended = 1,
  PlanetKitAcousticEchoCancellerModeIntensityMin = 2,
  PlanetKitAcousticEchoCancellerModeIntensityMax = 3,
  PlanetKitAcousticEchoCancellerModeIntensityAdaptive = 4,
};

@class PlanetKitAudioManager;
@class PlanetKitAudioSessionSettings;
@protocol PlanetKitAudioSpkControllable;
@protocol PlanetKitAudioMicControllable;

SWIFT_CLASS("_TtC9PlanetKit14PlanetKitAudio")
@interface PlanetKitAudio : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PlanetKitAudio * _Nonnull shared;)
+ (PlanetKitAudio * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong, getter=default) PlanetKitAudioManager * _Nonnull default_;)
+ (PlanetKitAudioManager * _Nonnull)default SWIFT_WARN_UNUSED_RESULT;
/// Configures <code>AVAudioSession</code> open settings.
/// remark:
///
/// <code>openSettings</code> will be used by PlanetKit when it opens <code>AVAudioSession</code> for <code>PlanetKitAudioMicSpk</code> and <code>PlanetKitAudioMic</code>.
@property (nonatomic, strong) PlanetKitAudioSessionSettings * _Nullable openSettings;
/// Configures <code>AVAudioSession</code> close settings.
/// remark:
///
/// <code>closeSettings</code> will be used by PlanetKit when it closes <code>AVAudioSession</code> for <code>PlanetKitAudioMicSpk</code> and <code>PlanetKitAudioMic</code>.
@property (nonatomic, strong) PlanetKitAudioSessionSettings * _Nullable closeSettings;
/// Default speaker interface.
/// remark:
///
/// The default speaker should be configured before creating a call or conference instance.
/// And if you set the <code>PlanetKitAudio.vpioEnabled</code> value, then the speaker interface will be reset by default.
@property (nonatomic, strong) id <PlanetKitAudioSpkControllable> _Nullable spk;
/// Default microphone interface.
/// remark:
///
/// The default microphone should be configured before creating a call or conference instance.
/// And if you set the <code>PlanetKitAudio.vpioEnabled</code> value, then the microphone interface will be reset by default.
@property (nonatomic, strong) id <PlanetKitAudioMicControllable> _Nullable mic;
/// remark:
///
/// This will set the <code>AVAudioSession.ioBufferDuration</code> value.
/// The recommended value is <em>0.01</em>, but if you set an unaffordable or incorrect value,
/// it can affect the audio device, like causing a Bluetooth HFP device to become stuck or stop working.
/// Please be careful when changing this value.
@property (nonatomic) double defaultIOBufDuration;
/// Configures the default microphone sample rate.
/// remark:
///
/// The default microphone sample rate is 44100 (VPIO on) or 48000 (VPIO off) in macOS, and 32000 in iOS.
@property (nonatomic) double defaultMicSampleRate;
/// Configures the default speaker sample rate.
/// remark:
///
/// The default speaker sample rate is 44100 (VPIO on) or 48000 (VPIO off) in macOS, and 32000 in iOS.
@property (nonatomic) double defaultSpkSampleRate;
@property (nonatomic) BOOL vpioEnabled;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


enum PlanetKitAudioDeviceType : NSInteger;

SWIFT_PROTOCOL("_TtP9PlanetKit28PlanetKitAudioVolumeDelegate_")
@protocol PlanetKitAudioVolumeDelegate
/// Called if the device volume has changed.
/// \param volume The current volume.
///
- (void)didChangeVolume:(enum PlanetKitAudioDeviceType)type volume:(float)volume;
@end


@interface PlanetKitAudio (SWIFT_EXTENSION(PlanetKit)) <PlanetKitAudioVolumeDelegate>
- (void)didChangeVolume:(enum PlanetKitAudioDeviceType)type volume:(float)volume;
@end




@interface PlanetKitAudio (SWIFT_EXTENSION(PlanetKit))
@property (nonatomic, readonly) float micVolume;
@property (nonatomic, readonly) float spkVolume;
- (void)setVolume:(float)volume for:(enum PlanetKitAudioDeviceType)type;
- (void)addVolumeDelegate:(id <PlanetKitAudioVolumeDelegate> _Nonnull)delegate for:(enum PlanetKitAudioDeviceType)type;
- (void)removeVolumeDelegate:(id <PlanetKitAudioVolumeDelegate> _Nonnull)delegate for:(enum PlanetKitAudioDeviceType)type;
@end


@interface PlanetKitAudio (SWIFT_EXTENSION(PlanetKit))
@property (nonatomic, readonly) BOOL isBluetoothInput;
@property (nonatomic, readonly) BOOL isBuiltInOutput;
@end


@interface PlanetKitAudio (SWIFT_EXTENSION(PlanetKit))
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSNotificationName _Nonnull didOpenMicNotification;)
+ (NSNotificationName _Nonnull)didOpenMicNotification SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSNotificationName _Nonnull didOpenSpkNotification;)
+ (NSNotificationName _Nonnull)didOpenSpkNotification SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSNotificationName _Nonnull didCloseMicNotification;)
+ (NSNotificationName _Nonnull)didCloseMicNotification SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSNotificationName _Nonnull didCloseSpkNotification;)
+ (NSNotificationName _Nonnull)didCloseSpkNotification SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSNotificationName _Nonnull didStartMicNotification;)
+ (NSNotificationName _Nonnull)didStartMicNotification SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSNotificationName _Nonnull didStartSpkNotification;)
+ (NSNotificationName _Nonnull)didStartSpkNotification SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSNotificationName _Nonnull didStopMicNotification;)
+ (NSNotificationName _Nonnull)didStopMicNotification SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSNotificationName _Nonnull didStopSpkNotification;)
+ (NSNotificationName _Nonnull)didStopSpkNotification SWIFT_WARN_UNUSED_RESULT;
@end

typedef SWIFT_ENUM(NSInteger, PlanetKitAudioDeviceType, closed) {
  PlanetKitAudioDeviceTypeMic = 0,
  PlanetKitAudioDeviceTypeSpk = 1,
};


SWIFT_PROTOCOL("_TtP9PlanetKit34PlanetKitAudioDeviceVolumeDelegate_")
@protocol PlanetKitAudioDeviceVolumeDelegate
/// Notifies the audio volume level at every interval seconds.
/// \param deviceType The device type for the volume level.
///
/// \param volume Audio volume level of the audio device. The level ranges between 0.0 and 1.0.
///
- (void)volumeDidUpdate:(enum PlanetKitAudioDeviceType)deviceType volume:(float)volume;
@end


SWIFT_CLASS("_TtC9PlanetKit21PlanetKitAudioManager")
@interface PlanetKitAudioManager : NSObject
@property (nonatomic) BOOL vpioEnabled;
@property (nonatomic, strong) id <PlanetKitAudioSpkControllable> _Nullable spk;
@property (nonatomic, strong) id <PlanetKitAudioMicControllable> _Nullable mic;
@property (nonatomic) BOOL micEnabled;
@property (nonatomic) BOOL spkEnabled;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@class NSURL;
@class NSString;

@interface PlanetKitAudioManager (SWIFT_EXTENSION(PlanetKit))
/// Plays a local audio file.
/// \param type Identifies a unique playing instance. Generally used to stop playing the audio file.
///
- (void)playFileWithFileResourceUrl:(NSURL * _Nonnull)fileResourceUrl type:(NSString * _Nonnull)type loopCount:(int32_t)loopCount;
/// Plays a local audio file.
/// \param type Identifies a unique playing instance. Generally used to stop playing the audio file.
///
/// \param completion It is called after the audio file has finished playing.
///
- (void)playFileWithFileResourceUrl:(NSURL * _Nonnull)fileResourceUrl type:(NSString * _Nonnull)type loopCount:(int32_t)loopCount completion:(void (^ _Nonnull)(BOOL))completion;
/// Stops playing the audio file.
- (void)playStopWithType:(NSString * _Nonnull)type;
@end


@protocol PlanetKitAudioMicCaptureDelegate;
@protocol PlanetKitAudioSpkPlayDelegate;

@interface PlanetKitAudioManager (SWIFT_EXTENSION(PlanetKit))
/// Adds a microphone receiver to receive a copy of captured audio data.
- (void)addMicReceiver:(id <PlanetKitAudioMicCaptureDelegate> _Nonnull)micReceiver;
/// Removes the targeted microphone receiver.
- (void)removeMicReceiver:(id <PlanetKitAudioMicCaptureDelegate> _Nonnull)micReceiver;
/// Adds a speaker receiver to receive a copy of rendered audio data.
- (void)addSpkReceiver:(id <PlanetKitAudioSpkPlayDelegate> _Nonnull)spkReceiver;
/// Removes the targeted speaker receiver.
- (void)removeSpkReceiver:(id <PlanetKitAudioSpkPlayDelegate> _Nonnull)spkReceiver;
@end


@interface PlanetKitAudioManager (SWIFT_EXTENSION(PlanetKit))
/// Queries the state of the audio instance.
@property (nonatomic, readonly) BOOL isOpened;
@property (nonatomic, readonly) BOOL isStarted;
/// Creates an audio processing graph instance and configures AVAudioSession.
/// <h2>iOS Only</h2>
/// If you have configured <code>PlanetKitAudio.shared.openSettings</code>, the configuration of <code>AVAudioSession</code> will be
/// changed to the configuration of <code>PlanetKitAudio.shared.openSettings</code>.
- (void)open;
/// Starts audio processing.
/// <h2>iOS Only</h2>
/// It will call <code>AVAudioSession.sharedInstance().setActive(true)</code> internally.
- (void)start;
/// Stops audio processing.
- (void)stop;
/// Releases the audio processing graph instance and resets AVAudioSession.
/// <h2>iOS Only</h2>
/// If you have configured <code>PlanetKitAudio.shared.closeSettings</code>, the configuration of <code>AVAudioSession</code> will be
/// changed to the configuration of <code>PlanetKitAudio.shared.closeSettings</code>.
- (void)close;
- (void)setDefaultAudioRoute:(BOOL)hasVideo;
/// Attempts to change the audio route to the speaker temporarily.
/// You can check whether the state has been changed internally with a periodic query on <code>isSpeakerOut</code> for value changes.
/// remark:
///
/// If the current audio route changed by connecting with a Bluetooth audio device, it will be reset by the system.
/// See more details on <a href="https://developer.apple.com/library/archive/qa/qa1754/_index.html">QA1754</a>.
/// You can also change the audio route using <a href="https://developer.apple.com/documentation/avkit/avroutepickerview">AVRoutePickerView</a>.
- (void)speakerOut:(BOOL)out;
@property (nonatomic, readonly) BOOL isSpeakerOut;
@end


SWIFT_CLASS("_TtC9PlanetKit17PlanetKitAudioMic")
@interface PlanetKitAudioMic : NSObject
@property (nonatomic) BOOL vpioEnabled;
@property (nonatomic) BOOL micEnabled;
/// Sets a private delegate for a <code>PlanetKitCall</code> or <code>PlanetKitConference</code> instance.
/// remark:
///
/// You should not set this delegate directly.
/// It will be called when the call is connected or the conference is joined.
/// If you implement it, you should call the delegate’s <code>didCapture(frameCnt:channels:sampleRate:sampleType:timestamp:outData:outDataLen:)</code> when the speaker needs to play sound.
@property (nonatomic, weak) id <PlanetKitAudioMicCaptureDelegate> _Nullable micPrivateDelegate;
/// Sets a modifier to receive audio data before sending audio to the server.
/// The modifier can modify audio data.
/// \param micModifier The modifier to receive audio data before audio transmission.
///
@property (nonatomic, weak) id <PlanetKitAudioMicCaptureDelegate> _Nullable micModifier;
/// Sets a receiver to receive volume level events at intervals for the microphone.
@property (nonatomic, weak) id <PlanetKitAudioDeviceVolumeDelegate> _Nullable micVolumeReceiver;
/// Sets the volume level event interval for the microphone.
@property (nonatomic) NSTimeInterval micVolumeInterval;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


@interface PlanetKitAudioMic (SWIFT_EXTENSION(PlanetKit)) <PlanetAudioUnitTargetDelegate>
- (int32_t)onFrames:(uint32_t)unitId frameNum:(uint32_t)frameNums format:(AudioStreamBasicDescription * _Null_unspecified)format timestamp:(AudioTimeStamp const * _Null_unspecified)timestamp buffer:(void * _Null_unspecified)aBuffer size:(uint32_t)aBufferSize SWIFT_WARN_UNUSED_RESULT;
@end


@interface PlanetKitAudioMic (SWIFT_EXTENSION(PlanetKit))
/// Adds a microphone receiver to receive a copy of captured audio data.
- (void)addMicReceiver:(id <PlanetKitAudioMicCaptureDelegate> _Nonnull)micReceiver;
/// Removes the targeted microphone receiver.
- (void)removeMicReceiver:(id <PlanetKitAudioMicCaptureDelegate> _Nonnull)micReceiver;
@end


SWIFT_PROTOCOL("_TtP9PlanetKit29PlanetKitAudioMicControllable_")
@protocol PlanetKitAudioMicControllable
/// Enables or disables the use of VoiceProcessingIO.
/// remark:
///
/// This value will be modified during call setup by our service configuration.
/// If you want to override our suggested configuration, you should call <code>withIgnoreVpioServiceConfigKey(ignore:)</code>.
@property (nonatomic) BOOL vpioEnabled;
@property (nonatomic) BOOL micEnabled;
@property (nonatomic, readonly) BOOL isOpened;
@property (nonatomic, readonly) BOOL isStarted;
- (void)open;
- (void)start;
- (void)stop;
- (void)close;
- (void)asyncWithCompletion:(void (^ _Nonnull)(void))completion;
/// Provides device type information to PlanetKit, indicating if it is a real device or a virtual device.
/// remark:
///
/// If this device instance is a virtual device, meaning it does not use a physical audio microphone, then <code>isVirtualDevice</code> should return true.
/// It should return <code>false</code> when your custom device uses PlanetKit’s default audio device like <code>PlanetKitAudio.spk</code> or <code>PlanetKitAudio.mic</code> without changing the system’s default device.
/// This value will affect the reset of VQE (Voice Quality Enhancement) if this device is a real device.
@property (nonatomic, readonly) BOOL isVirtualDevice;
- (void)addMicReceiver:(id <PlanetKitAudioMicCaptureDelegate> _Nonnull)micReceiver;
- (void)removeMicReceiver:(id <PlanetKitAudioMicCaptureDelegate> _Nonnull)micReceiver;
@property (nonatomic, weak) id <PlanetKitAudioMicCaptureDelegate> _Nullable micModifier;
@property (nonatomic, weak) id <PlanetKitAudioMicCaptureDelegate> _Nullable micPrivateDelegate;
@property (nonatomic, weak) id <PlanetKitAudioDeviceVolumeDelegate> _Nullable micVolumeReceiver;
@property (nonatomic) NSTimeInterval micVolumeInterval;
@end


@interface PlanetKitAudioMic (SWIFT_EXTENSION(PlanetKit)) <PlanetKitAudioMicControllable>
/// Queries the state of the audio instance.
@property (nonatomic, readonly) BOOL isOpened;
@property (nonatomic, readonly) BOOL isStarted;
/// Creates an audio processing graph instance and configures AVAudioSession.
/// <h2>iOS Only</h2>
/// If you have configured <code>PlanetKitAudio.shared.openSettings</code>, the configuration of <code>AVAudioSession</code> will be
/// changed to the configuration of <code>PlanetKitAudio.shared.openSettings</code>.
- (void)open;
/// Starts audio processing for the microphone.
/// <h2>iOS Only</h2>
/// It will call <code>AVAudioSession.sharedInstance().setActive(true)</code> internally.
- (void)start;
/// Stops audio processing for the microphone.
- (void)stop;
/// Releases the audio processing graph instance and resets AVAudioSession.
/// <h2>iOS Only</h2>
/// If you have configured <code>PlanetKitAudio.shared.closeSettings</code>, the configuration of <code>AVAudioSession</code> will be
/// changed to the configuration of <code>PlanetKitAudio.shared.closeSettings</code>.
- (void)close;
/// Executes the <code>completion</code> handler after all current audio work items are completed.
/// remark:
///
/// If you use this function for frequent or heavy jobs, it will affect the performance of setting up the microphone device.
/// Be sure not to enqueue an overload job.
- (void)asyncWithCompletion:(void (^ _Nonnull)(void))completion;
@property (nonatomic, readonly) BOOL isVirtualDevice;
@end


enum PlanetKitAudioSampleType : NSInteger;

SWIFT_PROTOCOL("_TtP9PlanetKit32PlanetKitAudioMicCaptureDelegate_")
@protocol PlanetKitAudioMicCaptureDelegate
- (void)didCaptureWithFrameCnt:(uint32_t)frameCnt channels:(uint32_t)channels sampleRate:(uint32_t)sampleRate sampleType:(enum PlanetKitAudioSampleType)sampleType timestamp:(AudioTimeStamp)timestamp outData:(void * _Null_unspecified)outData outDataLen:(uint32_t)outDataLen;
@end



SWIFT_CLASS("_TtC9PlanetKit20PlanetKitAudioMicSpk")
@interface PlanetKitAudioMicSpk : NSObject
@property (nonatomic) BOOL vpioEnabled;
@property (nonatomic) BOOL micEnabled;
@property (nonatomic) BOOL spkEnabled;
/// Sets a private delegate for a <code>PlanetKitCall</code> or <code>PlanetKitConference</code> instance.
/// remark:
///
/// You should not set this delegate directly.
/// It will be called when the call is connected or the conference is joined.
/// If you implement it, you should call the delegate’s <code>didCapture(frameCnt:channels:sampleRate:sampleType:timestamp:outData:outDataLen:)</code> when the speaker needs to play sound.
@property (nonatomic, weak) id <PlanetKitAudioMicCaptureDelegate> _Nullable micPrivateDelegate;
/// Sets a modifier to receive audio data before sending audio to the server.
/// The modifier can modify audio data.
/// \param micModifier The modifier to receive audio data before audio transmission.
///
@property (nonatomic, weak) id <PlanetKitAudioMicCaptureDelegate> _Nullable micModifier;
/// Sets a receiver to receive volume level events at intervals for the microphone.
@property (nonatomic, weak) id <PlanetKitAudioDeviceVolumeDelegate> _Nullable micVolumeReceiver;
/// Sets the volume level event interval for the microphone.
@property (nonatomic) NSTimeInterval micVolumeInterval;
/// Sets a private delegate for a <code>PlanetKitCall</code> or <code>PlanetKitConference</code> instance.
/// remark:
///
/// You should not set this delegate directly.
/// It will be called when the call is connected or the conference is joined.
/// If you implement it, you should call the delegate’s <code>willPlay(frameCnt:channels:sampleRate:sampleType:timestamp:playBuf:playBufSize:)</code> when the speaker needs to play sound.
@property (nonatomic, weak) id <PlanetKitAudioSpkPlayDelegate> _Nullable spkPrivateDelegate;
/// Sets a modifier to receive audio data before speaker out.
/// The modifier can modify audio data.
@property (nonatomic, weak) id <PlanetKitAudioSpkPlayDelegate> _Nullable spkModifier;
/// Sets a receiver to receive volume level events at intervals for the speaker.
@property (nonatomic, weak) id <PlanetKitAudioDeviceVolumeDelegate> _Nullable spkVolumeReceiver;
/// Sets the interval to receive volume level events for the speaker.
@property (nonatomic) NSTimeInterval spkVolumeInterval;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


@interface PlanetKitAudioMicSpk (SWIFT_EXTENSION(PlanetKit)) <PlanetAudioUnitSourceDelegate>
- (int32_t)getFrame:(uint32_t)unitId frameNum:(uint32_t)frameNums format:(AudioStreamBasicDescription * _Null_unspecified)format timestamp:(AudioTimeStamp const * _Null_unspecified)timestamp buffer:(void * _Null_unspecified)aBuffer size:(uint32_t)aBufferSize SWIFT_WARN_UNUSED_RESULT;
@end


@interface PlanetKitAudioMicSpk (SWIFT_EXTENSION(PlanetKit)) <PlanetAudioPlayerDelegate>
- (void)playDidFinish:(NSString * _Null_unspecified)type userData:(int32_t)userData;
@end


@interface PlanetKitAudioMicSpk (SWIFT_EXTENSION(PlanetKit)) <PlanetAudioUnitTargetDelegate>
- (int32_t)onFrames:(uint32_t)unitId frameNum:(uint32_t)frameNums format:(AudioStreamBasicDescription * _Null_unspecified)format timestamp:(AudioTimeStamp const * _Null_unspecified)timestamp buffer:(void * _Null_unspecified)aBuffer size:(uint32_t)aBufferSize SWIFT_WARN_UNUSED_RESULT;
@end


@interface PlanetKitAudioMicSpk (SWIFT_EXTENSION(PlanetKit))
/// Adds a speaker receiver to receive a copy of rendered audio data.
- (void)addSpkReceiver:(id <PlanetKitAudioSpkPlayDelegate> _Nonnull)spkDelegate;
/// Removes the targeted speaker receiver.
- (void)removeSpkReceiver:(id <PlanetKitAudioSpkPlayDelegate> _Nonnull)spkDelegate;
@end


@interface PlanetKitAudioMicSpk (SWIFT_EXTENSION(PlanetKit))
/// Adds a microphone receiver to receive a copy of captured audio data.
- (void)addMicReceiver:(id <PlanetKitAudioMicCaptureDelegate> _Nonnull)micReceiver;
/// Removes the targeted microphone receiver.
- (void)removeMicReceiver:(id <PlanetKitAudioMicCaptureDelegate> _Nonnull)micReceiver;
@end


@interface PlanetKitAudioMicSpk (SWIFT_EXTENSION(PlanetKit))
/// Plays a local audio file.
/// \param type Identifies a unique playing instance. Generally used to stop playing the audio file.
///
- (void)playFileWithFileResourceUrl:(NSURL * _Nonnull)fileResourceUrl type:(NSString * _Nonnull)type loopCount:(int32_t)loopCount;
/// Plays a local audio file.
/// \param type Identifies a unique playing instance. Generally used to stop playing the audio file.
///
/// \param completion It is called after the audio file has finished playing.
///
- (void)playFileWithFileResourceUrl:(NSURL * _Nonnull)fileResourceUrl type:(NSString * _Nonnull)type loopCount:(int32_t)loopCount completion:(void (^ _Nonnull)(BOOL))completion;
/// Stops playing the audio file.
- (void)playStopWithType:(NSString * _Nonnull)type;
@end


enum PlanetKitAudioRoute : NSInteger;

SWIFT_PROTOCOL("_TtP9PlanetKit29PlanetKitAudioSpkControllable_")
@protocol PlanetKitAudioSpkControllable
/// Enables or disables the use of VoiceProcessingIO.
/// remark:
///
/// This value will be modified during call setup by our service configuration.
/// If you want to override our suggested configuration, you should call <code>withIgnoreVpioServiceConfigKey(ignore:)</code>.
@property (nonatomic) BOOL vpioEnabled;
@property (nonatomic) BOOL spkEnabled;
@property (nonatomic, readonly) BOOL isOpened;
@property (nonatomic, readonly) BOOL isStarted;
- (void)open;
- (void)start;
- (void)stop;
- (void)close;
- (void)asyncWithCompletion:(void (^ _Nonnull)(void))completion;
@property (nonatomic, readonly) BOOL isSpeakerOut;
- (void)speakerOut:(BOOL)out;
- (void)setCategory:(AVAudioSessionCategory _Nonnull)category options:(AVAudioSessionCategoryOptions)options;
- (void)setMode:(AVAudioSessionMode _Nonnull)mode;
- (void)setPreferredAudioRoute:(enum PlanetKitAudioRoute)route;
/// Provides device type information to PlanetKit, indicating if it is a real device or a virtual device.
/// remark:
///
/// If this device instance is a virtual device, meaning it does not use a physical audio microphone, then <code>isVirtualDevice</code> should return true.
/// It should return <code>false</code> when your custom device uses PlanetKit’s default audio device like <code>PlanetKitAudio.spk</code> or <code>PlanetKitAudio.mic</code> without changing the system’s default device.
/// This value will affect the reset of VQE (Voice Quality Enhancement) if this device is a real device.
@property (nonatomic, readonly) BOOL isVirtualDevice;
- (void)addSpkReceiver:(id <PlanetKitAudioSpkPlayDelegate> _Nonnull)spkReceiver;
- (void)removeSpkReceiver:(id <PlanetKitAudioSpkPlayDelegate> _Nonnull)spkReceiver;
@property (nonatomic, weak) id <PlanetKitAudioSpkPlayDelegate> _Nullable spkModifier;
@property (nonatomic, weak) id <PlanetKitAudioSpkPlayDelegate> _Nullable spkPrivateDelegate;
@property (nonatomic, weak) id <PlanetKitAudioDeviceVolumeDelegate> _Nullable spkVolumeReceiver;
@property (nonatomic) NSTimeInterval spkVolumeInterval;
- (void)playFileWithFileResourceUrl:(NSURL * _Nonnull)fileResourceUrl type:(NSString * _Nonnull)type loopCount:(int32_t)loopCount;
- (void)playFileWithFileResourceUrl:(NSURL * _Nonnull)fileResourceUrl type:(NSString * _Nonnull)type loopCount:(int32_t)loopCount completion:(void (^ _Nonnull)(BOOL))completion;
- (void)playStopWithType:(NSString * _Nonnull)type;
@end


@interface PlanetKitAudioMicSpk (SWIFT_EXTENSION(PlanetKit)) <PlanetKitAudioMicControllable, PlanetKitAudioSpkControllable>
/// Queries the state of the audio instance.
@property (nonatomic, readonly) BOOL isOpened;
@property (nonatomic, readonly) BOOL isStarted;
/// Creates an audio processing graph instance and configures AVAudioSession.
/// <h2>iOS Only</h2>
/// If you have configured <code>PlanetKitAudio.shared.openSettings</code>, the configuration of <code>AVAudioSession</code> will be
/// changed to the configuration of <code>PlanetKitAudio.shared.openSettings</code>.
- (void)open;
/// Starts audio processing for the microphone.
/// <h2>iOS Only</h2>
/// It will call <code>AVAudioSession.sharedInstance().setActive(true)</code> internally.
- (void)start;
/// Stops audio processing for the microphone.
- (void)stop;
/// Releases the audio processing graph instance and resets AVAudioSession.
/// <h2>iOS Only</h2>
/// If you have configured <code>PlanetKitAudio.shared.closeSettings</code>, the configuration of <code>AVAudioSession</code> will be
/// changed to the configuration of <code>PlanetKitAudio.shared.closeSettings</code>.
- (void)close;
/// Executes the <code>completion</code> handler after all current audio work items are completed.
/// remark:
///
/// If you use this function for frequent or heavy jobs, it will affect the performance of setting up the microphone and the speaker device.
/// Be sure not to enqueue an overload job.
- (void)asyncWithCompletion:(void (^ _Nonnull)(void))completion;
@property (nonatomic, readonly) BOOL isSpeakerOut;
/// Attempts to change the audio route to the speaker temporarily.
/// You can check whether the state has been changed internally with a periodic query on <code>isSpeakerOut</code> for value changes.
/// remark:
///
/// If the current audio route changed by connecting with a Bluetooth audio device, it will be reset by the system.
/// See more details on <a href="https://developer.apple.com/library/archive/qa/qa1754/_index.html">QA1754</a>.
/// You can also change the audio route using <a href="https://developer.apple.com/documentation/avkit/avroutepickerview">AVRoutePickerView</a>.
- (void)speakerOut:(BOOL)out;
- (void)setCategory:(AVAudioSessionCategory _Nonnull)category options:(AVAudioSessionCategoryOptions)options;
- (void)setMode:(AVAudioSessionMode _Nonnull)mode;
- (void)setPreferredAudioRoute:(enum PlanetKitAudioRoute)route;
@property (nonatomic, readonly) BOOL isVirtualDevice;
@end

typedef SWIFT_ENUM(NSInteger, PlanetKitAudioRoute, closed) {
  PlanetKitAudioRouteBuiltInHandset = 0,
  PlanetKitAudioRouteBuiltInSpeakerphone = 1,
  PlanetKitAudioRouteExternalHeadset = 2,
};

typedef SWIFT_ENUM(NSInteger, PlanetKitAudioSampleType, closed) {
  PlanetKitAudioSampleTypeSignedFloat32 = 0,
  PlanetKitAudioSampleTypeSignedShort16 = 1,
};


SWIFT_CLASS("_TtC9PlanetKit29PlanetKitAudioSessionSettings")
@interface PlanetKitAudioSessionSettings : NSObject
@property (nonatomic) AVAudioSessionCategory _Nonnull category;
@property (nonatomic) AVAudioSessionMode _Nonnull mode;
@property (nonatomic) AVAudioSessionCategoryOptions options;
@property (nonatomic) AVAudioSessionPortOverride audioPort;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC9PlanetKit17PlanetKitAudioSpk")
@interface PlanetKitAudioSpk : NSObject
@property (nonatomic) BOOL vpioEnabled;
@property (nonatomic) BOOL spkEnabled;
/// Sets a private delegate for a <code>PlanetKitCall</code> or <code>PlanetKitConference</code> instance.
/// remark:
///
/// You should not set this delegate directly.
/// It will be called when the call is connected or the conference is joined.
/// If you implement it, you should call the delegate’s <code>willPlay(frameCnt:channels:sampleRate:sampleType:timestamp:playBuf:playBufSize:)</code> when the speaker needs to play sound.
@property (nonatomic, weak) id <PlanetKitAudioSpkPlayDelegate> _Nullable spkPrivateDelegate;
/// Sets a modifier to receive audio data before speaker out.
/// The modifier can modify audio data.
@property (nonatomic, weak) id <PlanetKitAudioSpkPlayDelegate> _Nullable spkModifier;
/// Sets a receiver to receive volume level events at intervals for the speaker.
@property (nonatomic, weak) id <PlanetKitAudioDeviceVolumeDelegate> _Nullable spkVolumeReceiver;
/// Sets the interval to receive volume level events for the speaker.
@property (nonatomic) NSTimeInterval spkVolumeInterval;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


@interface PlanetKitAudioSpk (SWIFT_EXTENSION(PlanetKit)) <PlanetAudioPlayerDelegate>
- (void)playDidFinish:(NSString * _Null_unspecified)type userData:(int32_t)userData;
@end


@interface PlanetKitAudioSpk (SWIFT_EXTENSION(PlanetKit)) <PlanetAudioUnitSourceDelegate>
- (int32_t)getFrame:(uint32_t)unitId frameNum:(uint32_t)frameNums format:(AudioStreamBasicDescription * _Null_unspecified)format timestamp:(AudioTimeStamp const * _Null_unspecified)timestamp buffer:(void * _Null_unspecified)aBuffer size:(uint32_t)aBufferSize SWIFT_WARN_UNUSED_RESULT;
@end


@interface PlanetKitAudioSpk (SWIFT_EXTENSION(PlanetKit))
/// Adds a speaker receiver to receive a copy of rendered audio data.
- (void)addSpkReceiver:(id <PlanetKitAudioSpkPlayDelegate> _Nonnull)spkReceiver;
/// Removes the targeted speaker receiver.
- (void)removeSpkReceiver:(id <PlanetKitAudioSpkPlayDelegate> _Nonnull)spkReceiver;
@end


@interface PlanetKitAudioSpk (SWIFT_EXTENSION(PlanetKit))
/// Plays a local audio file.
/// \param type Identifies a unique playing instance. Generally used to stop playing the audio file.
///
- (void)playFileWithFileResourceUrl:(NSURL * _Nonnull)fileResourceUrl type:(NSString * _Nonnull)type loopCount:(int32_t)loopCount;
/// Plays a local audio file.
/// \param type Identifies a unique playing instance. Generally used to stop playing the audio file.
///
/// \param completion It is called after the audio file has finished playing.
///
- (void)playFileWithFileResourceUrl:(NSURL * _Nonnull)fileResourceUrl type:(NSString * _Nonnull)type loopCount:(int32_t)loopCount completion:(void (^ _Nonnull)(BOOL))completion;
/// Stops playing the audio file.
- (void)playStopWithType:(NSString * _Nonnull)type;
@end



@interface PlanetKitAudioSpk (SWIFT_EXTENSION(PlanetKit)) <PlanetKitAudioSpkControllable>
/// Queries the state of the audio instance.
@property (nonatomic, readonly) BOOL isOpened;
@property (nonatomic, readonly) BOOL isStarted;
/// Creates an audio processing graph instance and configures AVAudioSession.
- (void)open;
/// Starts audio processing for the speaker.
- (void)start;
/// Stops audio processing for the speaker.
- (void)stop;
/// Releases the audio processing graph instance and resets AVAudioSession.
- (void)close;
/// Executes the <code>completion</code> handler after all current audio work items are completed.
/// remark:
///
/// If you use this function for frequent or heavy jobs, it will affect the performance of setting up the speaker device.
/// Be sure not to enqueue an overload job.
- (void)asyncWithCompletion:(void (^ _Nonnull)(void))completion;
@property (nonatomic, readonly) BOOL isSpeakerOut;
/// Attempts to change the audio route to the speaker temporarily.
/// You can check whether the state has been changed internally with a periodic query on <code>isSpeakerOut</code> for value changes.
/// remark:
///
/// If the current audio route changed by connecting with a Bluetooth audio device, it will be reset by the system.
/// See more details on <a href="https://developer.apple.com/library/archive/qa/qa1754/_index.html">QA1754</a>.
/// You can also change the audio route using <a href="https://developer.apple.com/documentation/avkit/avroutepickerview">AVRoutePickerView</a>.
- (void)speakerOut:(BOOL)out;
- (void)setCategory:(AVAudioSessionCategory _Nonnull)category options:(AVAudioSessionCategoryOptions)options;
- (void)setMode:(AVAudioSessionMode _Nonnull)mode;
- (void)setPreferredAudioRoute:(enum PlanetKitAudioRoute)route;
@property (nonatomic, readonly) BOOL isVirtualDevice;
@end



SWIFT_PROTOCOL("_TtP9PlanetKit29PlanetKitAudioSpkPlayDelegate_")
@protocol PlanetKitAudioSpkPlayDelegate
- (int32_t)willPlayWithFrameCnt:(uint32_t)frameCnt channels:(uint32_t)channels sampleRate:(uint32_t)sampleRate sampleType:(enum PlanetKitAudioSampleType)sampleType timestamp:(AudioTimeStamp)timestamp playBuf:(void * _Null_unspecified)playBuf playBufSize:(uint32_t)playBufSize SWIFT_WARN_UNUSED_RESULT;
@end


typedef SWIFT_ENUM(NSInteger, PlanetKitAutoGainControlMode, closed) {
  PlanetKitAutoGainControlModeDisabled = 0,
  PlanetKitAutoGainControlModeSoftware = 1,
  PlanetKitAutoGainControlModeHardware = 2,
};

enum PlanetKitMediaType : NSInteger;

SWIFT_CLASS("_TtC9PlanetKit16PlanetKitCCParam")
@interface PlanetKitCCParam : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull ccParam;
@property (nonatomic, readonly, copy) NSString * _Nullable peerId;
@property (nonatomic, readonly, copy) NSString * _Nullable serviceId;
@property (nonatomic, readonly) enum PlanetKitMediaType mediaType;
- (nullable instancetype)initWithCcParam:(NSString * _Nonnull)ccParam OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class PlanetKitUserId;
enum PlanetKitCallDirection : NSInteger;
@class NSUUID;
@protocol PlanetKitCallDelegate;
@class PlanetKitSendVoiceProcessor;
enum PlanetKitResponseOnEnableVideo : NSInteger;
@class PlanetKitVideoCapability;
enum PlanetKitCallKitType : NSInteger;
@class PlanetKitCallKitParam;
@class PlanetKitMyMediaStatus;
enum PlanetKitCallState : NSInteger;
@class PlanetKitVideoStream;
@protocol PlanetKitCameraControllable;
@protocol PlanetKitScreenControllable;
@protocol PlanetKitVideoOutputDelegate;
@protocol PlanetKitPeerAudioDescriptionDelegate;
@protocol PlanetKitMyAudioDescriptionDelegate;
@protocol PlanetKitVideoModifierDelegate;

SWIFT_CLASS("_TtC9PlanetKit13PlanetKitCall")
@interface PlanetKitCall : NSObject
@property (nonatomic, readonly, strong) PlanetKitUserId * _Null_unspecified myUserId;
@property (nonatomic, readonly, strong) PlanetKitUserId * _Nullable peerUserId;
@property (nonatomic, readonly) enum PlanetKitCallDirection direction;
@property (nonatomic, readonly, copy) NSString * _Nullable APIKey;
@property (nonatomic, readonly, copy) NSString * _Nullable accessToken;
@property (nonatomic, readonly) BOOL enableStatistics;
@property (nonatomic, readonly, copy) NSUUID * _Nonnull uuid;
@property (nonatomic, readonly, weak) id <PlanetKitCallDelegate> _Nullable delegate;
@property (nonatomic, readonly, strong) PlanetKitAudioManager * _Nonnull audioManager;
@property (nonatomic, readonly, strong) PlanetKitSendVoiceProcessor * _Nonnull sendVoiceProcessor;
@property (nonatomic, readonly) enum PlanetKitResponseOnEnableVideo responseOnEnableVideo;
@property (nonatomic, readonly, strong) PlanetKitVideoCapability * _Nonnull myVideoSendCapability;
@property (nonatomic, readonly, strong) PlanetKitVideoCapability * _Nonnull myVideoReceiveCapability;
@property (nonatomic, readonly) enum PlanetKitCallKitType callKitType;
@property (nonatomic, readonly, strong) PlanetKitCallKitParam * _Nullable callKitParam;
@property (nonatomic, readonly, strong) PlanetKitMyMediaStatus * _Null_unspecified myMediaStatus;
@property (nonatomic, readonly) enum PlanetKitCallState state;
@property (nonatomic, readonly) enum PlanetKitMediaType mediaType;
@property (nonatomic, readonly, strong) PlanetKitVideoStream * _Null_unspecified myCameraStream;
@property (nonatomic, readonly, strong) PlanetKitVideoStream * _Null_unspecified myScreenShareStream;
@property (nonatomic, strong) id <PlanetKitCameraControllable> _Nullable camera;
@property (nonatomic, strong) id <PlanetKitScreenControllable> _Nullable screen;
@property (nonatomic, weak) id <PlanetKitVideoOutputDelegate> _Nullable myVideoReceiver;
@property (nonatomic, weak) id <PlanetKitVideoOutputDelegate> _Nullable peerVideoReceiver;
/// Sets a modifier to receive audio data before speaker out.
/// The modifier can modify audio data.
@property (nonatomic, weak) id <PlanetKitAudioSpkPlayDelegate> _Nullable spkModifier;
/// Sets a receiver to receive audio data after speaker out.
/// The receiver cannot modify audio data.
@property (nonatomic, weak) id <PlanetKitAudioSpkPlayDelegate> _Nullable spkReceiver;
/// Sets a modifier to receive audio data before sending audio to the server.
/// The modifier can modify audio data.
@property (nonatomic, weak) id <PlanetKitAudioMicCaptureDelegate> _Nullable micModifier;
/// Sets a receiver to receive audio data after sending audio to the server.
/// The receiver cannot modify audio data.
@property (nonatomic, weak) id <PlanetKitAudioMicCaptureDelegate> _Nullable micReceiver;
/// Sets a receiver to receive the updated event of audio description for the peer.
/// remark:
///
/// The update interval can be set by <code>PlanetKitMakeCallSettingBuilder.withAudioDescriptionUpdateIntervalKey(interval:)</code> and <code>PlanetKitVerifyCallSettingBuilder.withAudioDescriptionUpdateIntervalKey(interval:)</code>.
/// The default update interval is 0.5 seconds.
@property (nonatomic, weak) id <PlanetKitPeerAudioDescriptionDelegate> _Nullable peerAudioDescriptionReceiver;
/// Sets a receiver to receive the updated event of audio description for the local user’s audio.
/// remark:
///
/// The update interval can be set by <code>PlanetKitMakeCallSettingBuilder.withAudioDescriptionUpdateIntervalKey(interval:)</code> and <code>PlanetKitVerifyCallSettingBuilder.withAudioDescriptionUpdateIntervalKey(interval:)</code>.
/// The default update interval is 0.5 seconds.
@property (nonatomic, weak) id <PlanetKitMyAudioDescriptionDelegate> _Nullable myAudioDescriptionReceiver;
/// Sets a modifier to receive the local user’s video data before requesting video transmission.
/// The modifier can modify video data.
@property (nonatomic, weak) id <PlanetKitVideoModifierDelegate> _Nullable myVideoModifier;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



@class NSData;

@interface PlanetKitCall (SWIFT_EXTENSION(PlanetKit))
/// Sends short data to the connected peer.
/// The maximum size of <code>type</code> is 100 bytes and the maximum size of <code>data</code> is 800 bytes.
/// The completion callback is called with <code>false</code> when this session is not in [.connected] state
/// or when the [data] or [type] exceeds the size limit.
/// When the [shortData] is sent successfully from this device, the completion callback is called with <code>true</code>.
/// If it fails, the completion callback is called with <code>false</code>.
/// \param type User-defined data type to be sent along with [data]
///
/// \param data Data to be sent
///
/// \param completion Callback to be called when the peer received [data] successfully or failed
///
- (void)sendShortDataWithType:(NSString * _Nonnull)type data:(NSData * _Nonnull)data completion:(void (^ _Nonnull)(BOOL))completion;
@end


@interface PlanetKitCall (SWIFT_EXTENSION(PlanetKit))
/// Finishes preparation and starts the call.
- (void)finishPreparation;
@end


@interface PlanetKitCall (SWIFT_EXTENSION(PlanetKit))
- (void)requestPeerMute:(BOOL)mute completion:(void (^ _Nonnull)(BOOL))completion;
@end


@interface PlanetKitCall (SWIFT_EXTENSION(PlanetKit))
- (void)notifyCallKitAudioActivation;
@end



@interface PlanetKitCall (SWIFT_EXTENSION(PlanetKit)) <PlanetKitAudioVolumeDelegate>
- (void)didChangeVolume:(enum PlanetKitAudioDeviceType)type volume:(float)volume;
@end


@interface PlanetKitCall (SWIFT_EXTENSION(PlanetKit)) <PlanetKitAudioMicCaptureDelegate>
- (void)didCaptureWithFrameCnt:(uint32_t)frameCnt channels:(uint32_t)channels sampleRate:(uint32_t)sampleRate sampleType:(enum PlanetKitAudioSampleType)sampleType timestamp:(AudioTimeStamp)timestamp outData:(void * _Null_unspecified)outData outDataLen:(uint32_t)outDataLen;
@end

@class PlanetKitVideoBuffer;

SWIFT_PROTOCOL("_TtP9PlanetKit28PlanetKitVideoOutputDelegate_")
@protocol PlanetKitVideoOutputDelegate
- (void)videoOutput:(PlanetKitVideoBuffer * _Nonnull)videoBuffer;
@end


@interface PlanetKitCall (SWIFT_EXTENSION(PlanetKit)) <PlanetKitVideoOutputDelegate>
/// Implements the <code>PlanetKitVideoOutputDelegate</code> to send video data to the peer.
/// Do not call this function unless you have to handle cam output instead of PlanetKit.
- (void)videoOutput:(PlanetKitVideoBuffer * _Nonnull)videoBuffer;
@end


@interface PlanetKitCall (SWIFT_EXTENSION(PlanetKit)) <PlanetKitAudioSpkPlayDelegate>
- (int32_t)willPlayWithFrameCnt:(uint32_t)frameCnt channels:(uint32_t)channels sampleRate:(uint32_t)sampleRate sampleType:(enum PlanetKitAudioSampleType)sampleType timestamp:(AudioTimeStamp)timestamp playBuf:(void * _Null_unspecified)playBuf playBufSize:(uint32_t)playBufSize SWIFT_WARN_UNUSED_RESULT;
@end



@interface PlanetKitCall (SWIFT_EXTENSION(PlanetKit))
@property (nonatomic, readonly) BOOL isRecordOnCloudActivated;
@end


@interface PlanetKitCall (SWIFT_EXTENSION(PlanetKit))
/// Starts the camera preview when the local user answers an incoming call.
- (void)startPreview;
/// Stops the camera preview.
- (void)stopPreview;
@end




@interface PlanetKitCall (SWIFT_EXTENSION(PlanetKit))
/// Sends raw data.
/// remark:
///
/// This is functionally equivalent to <code>PlanetKitCall.didCapture(frameCnt:channels:sampleRate:sampleType:timestamp:outData:outDataLen:)</code> that handles the Modifier, the Receivers, and the Volume Receiver.
- (void)sendMicDataWithFrameCnt:(uint32_t)frameCnt sampleRate:(uint32_t)sampleRate sampleType:(enum PlanetKitAudioSampleType)sampleType outData:(void * _Null_unspecified)outData outDataLen:(uint32_t)outDataLen;
/// Receives raw data.
/// remark:
///
/// This is functionally equivalent to <code>PlanetKitCall.willPlay(frameCnt:channels:sampleRate:sampleType:timestamp:playBuf:playBufSize:)</code> that handles the Modifier, the Receivers, and the Volume Receiver.
- (int32_t)recvSpkDataWithFrameCnt:(uint32_t)frameCnt sampleRate:(uint32_t)sampleRate sampleType:(enum PlanetKitAudioSampleType)sampleType playBuf:(void * _Null_unspecified)playBuf playBufSize:(uint32_t)playBufSize SWIFT_WARN_UNUSED_RESULT;
@end

enum PlanetKitMediaDisableReason : NSInteger;

@interface PlanetKitCall (SWIFT_EXTENSION(PlanetKit))
- (void)enableVideoWithCompletion:(void (^ _Nonnull)(BOOL))completion;
- (void)disableVideoWithReason:(enum PlanetKitMediaDisableReason)reason stopCamera:(BOOL)stopCamera completion:(void (^ _Nonnull)(BOOL))completion;
@end




SWIFT_PROTOCOL("_TtP9PlanetKit29PlanetKitVideoLimiterDelegate_")
@protocol PlanetKitVideoLimiterDelegate
- (BOOL)isVideoSendAvailable:(CMTime)timestamp SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isScreenShareSendAvailable:(CMTime)timestamp SWIFT_WARN_UNUSED_RESULT;
@end


@interface PlanetKitCall (SWIFT_EXTENSION(PlanetKit)) <PlanetKitVideoLimiterDelegate>
- (BOOL)isScreenShareSendAvailable:(CMTime)timestamp SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isVideoSendAvailable:(CMTime)timestamp SWIFT_WARN_UNUSED_RESULT;
@end

@class PlanetKitStatistics;

SWIFT_PROTOCOL("_TtP9PlanetKit31PlanetKitStatisticsControllable_")
@protocol PlanetKitStatisticsControllable
@property (nonatomic, readonly, strong) PlanetKitStatistics * _Nullable statistics;
@end


@interface PlanetKitCall (SWIFT_EXTENSION(PlanetKit)) <PlanetKitStatisticsControllable>
@property (nonatomic, readonly, strong) PlanetKitStatistics * _Nullable statistics;
@end


SWIFT_PROTOCOL("_TtP9PlanetKit32PlanetKitCameraInterruptDelegate_")
@protocol PlanetKitCameraInterruptDelegate
- (void)camDidInterruptBegin:(enum AVCaptureSessionInterruptionReason)reason;
- (void)camDidInterruptEnd;
@end


@interface PlanetKitCall (SWIFT_EXTENSION(PlanetKit)) <PlanetKitCameraInterruptDelegate>
- (void)camDidInterruptBegin:(enum AVCaptureSessionInterruptionReason)reason;
- (void)camDidInterruptEnd;
@end



@interface PlanetKitCall (SWIFT_EXTENSION(PlanetKit))
/// Starts the use of the user’s reference audio data for AEC to resolve echo.
/// remark:
///
/// To resolve echo using the user’s reference data, you should provide reference data using <code>PlanetKitCall.putUserAcousticEchoCancellerReference(frameCnt:...)</code> after calling this function.
- (void)startUserAcousticEchoCancellerReference:(void (^ _Nonnull)(BOOL))completion;
/// Stops the use of the user’s reference audio data for AEC to resolve echo.
/// remark:
///
/// You should call this function to stop putting reference audio data for AEC.
- (void)stopUserAcousticEchoCancellerReference:(void (^ _Nonnull)(BOOL))completion;
/// Puts reference audio data for AEC.
- (void)putUserAcousticEchoCancellerReferenceWithFrameCnt:(uint32_t)frameCnt channels:(uint32_t)channels sampleRate:(uint32_t)sampleRate sampleType:(enum PlanetKitAudioSampleType)sampleType outData:(void * _Null_unspecified)outData outDataLen:(uint32_t)outDataLen;
@end



@interface PlanetKitCall (SWIFT_EXTENSION(PlanetKit))
- (BOOL)setMyScreenShareVideoShareModeWithEnable:(BOOL)enable SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) BOOL isMyScreenShareVideoShareModeEnabled;
@end




SWIFT_PROTOCOL("_TtP9PlanetKit21PlanetKitDebugMonitor_")
@protocol PlanetKitDebugMonitor
- (NSString * _Nonnull)getMonitorInfo SWIFT_WARN_UNUSED_RESULT;
@end


@interface PlanetKitCall (SWIFT_EXTENSION(PlanetKit)) <PlanetKitDebugMonitor>
/// Gets the monitoring information string.
- (NSString * _Nonnull)getMonitorInfo SWIFT_WARN_UNUSED_RESULT;
@end



enum PlanetKitDataSessionType : NSInteger;
@protocol PlanetKitOutboundDataSessionDelegate;
@class PlanetKitOutboundDataSession;
enum PlanetKitDataSessionFailReason : NSInteger;
@protocol PlanetKitInboundDataSessionDelegate;
@class PlanetKitInboundDataSession;

SWIFT_PROTOCOL("_TtP9PlanetKit32PlanetKitDataSessionControllable_")
@protocol PlanetKitDataSessionControllable
- (void)makeOutboundDataSessionWithStreamId:(uint32_t)streamId type:(enum PlanetKitDataSessionType)type delegate:(id <PlanetKitOutboundDataSessionDelegate> _Nonnull)delegate completion:(void (^ _Nonnull)(PlanetKitOutboundDataSession * _Nullable, enum PlanetKitDataSessionFailReason))completion;
- (void)makeInboundDataSessionWithStreamId:(uint32_t)streamId delegate:(id <PlanetKitInboundDataSessionDelegate> _Nonnull)delegate completion:(void (^ _Nonnull)(PlanetKitInboundDataSession * _Nullable, enum PlanetKitDataSessionFailReason))completion;
- (void)unsupportInboundDataSessionWithStreamId:(uint32_t)streamId;
- (PlanetKitOutboundDataSession * _Nullable)getOutboundDataSessionWithStreamId:(uint32_t)streamId SWIFT_WARN_UNUSED_RESULT;
- (PlanetKitInboundDataSession * _Nullable)getInboundDataSessionWithStreamId:(uint32_t)streamId SWIFT_WARN_UNUSED_RESULT;
@end


@interface PlanetKitCall (SWIFT_EXTENSION(PlanetKit)) <PlanetKitDataSessionControllable>
/// Makes a new outbound data session.
/// \param streamId The predefined ID for the app. The ID must be in the range [100, 999].
///
/// \param type The type of the outbound data session.
///
/// \param delegate The event callback for the outbound data session.
///
/// \param completion If successful, the completion handler returns an outbound data session. Otherwise, the completion handler returns <code>nil</code>.
///
- (void)makeOutboundDataSessionWithStreamId:(uint32_t)streamId type:(enum PlanetKitDataSessionType)type delegate:(id <PlanetKitOutboundDataSessionDelegate> _Nonnull)delegate completion:(void (^ _Nonnull)(PlanetKitOutboundDataSession * _Nullable, enum PlanetKitDataSessionFailReason))completion;
/// Makes a new inbound data session.
/// \param streamId The predefined ID for the app. The ID must be in the range [100, 999].
///
/// \param delegate The event callback for the inbound data session.
///
/// \param completion If successful, the completion handler returns an inbound data session. Otherwise, the completion handler returns <code>nil</code>.
///
- (void)makeInboundDataSessionWithStreamId:(uint32_t)streamId delegate:(id <PlanetKitInboundDataSessionDelegate> _Nonnull)delegate completion:(void (^ _Nonnull)(PlanetKitInboundDataSession * _Nullable, enum PlanetKitDataSessionFailReason))completion;
/// Ignores receiving data for the given stream ID.
/// remark:
///
/// In a 1-to-1 call, calling this function notifies the sender that the receiver will ignore receiving data for the given stream ID.
/// To ignore receiving data for the incoming stream ID, call <code>unsupportInboundDataSession(streamId:)</code> in <code>PlanetKitCallDelegate.dataSessionIncoming(_:streamId:type:)</code>.
- (void)unsupportInboundDataSessionWithStreamId:(uint32_t)streamId;
/// Gets the existing outbound data session with the stream ID.
- (PlanetKitOutboundDataSession * _Nullable)getOutboundDataSessionWithStreamId:(uint32_t)streamId SWIFT_WARN_UNUSED_RESULT;
/// Gets the existing inbound data session with the stream ID.
- (PlanetKitInboundDataSession * _Nullable)getInboundDataSessionWithStreamId:(uint32_t)streamId SWIFT_WARN_UNUSED_RESULT;
@end



SWIFT_PROTOCOL("_TtP9PlanetKit35PlanetKitSharedContentsControllable_")
@protocol PlanetKitSharedContentsControllable
- (void)setSharedContentsWithData:(NSData * _Nonnull)data completion:(void (^ _Nonnull)(BOOL))completion;
- (void)unsetSharedContentsWithCompletion:(void (^ _Nonnull)(BOOL))completion;
- (void)setExclusivelySharedContentsWithData:(NSData * _Nonnull)data completion:(void (^ _Nonnull)(BOOL))completion;
- (void)unsetExclusivelySharedContentsWithCompletion:(void (^ _Nonnull)(BOOL))completion;
- (void)setRoomSharedContentsWithData:(NSData * _Nonnull)data completion:(void (^ _Nonnull)(BOOL))completion;
- (void)unsetRoomSharedContentsWithCompletion:(void (^ _Nonnull)(BOOL))completion;
@end


@interface PlanetKitCall (SWIFT_EXTENSION(PlanetKit)) <PlanetKitSharedContentsControllable>
- (void)setSharedContentsWithData:(NSData * _Nonnull)data completion:(void (^ _Nonnull)(BOOL))completion;
- (void)unsetSharedContentsWithCompletion:(void (^ _Nonnull)(BOOL))completion;
- (void)setExclusivelySharedContentsWithData:(NSData * _Nonnull)data completion:(void (^ _Nonnull)(BOOL))completion;
- (void)unsetExclusivelySharedContentsWithCompletion:(void (^ _Nonnull)(BOOL))completion;
/// This function will not work at 1:1 call.
- (void)setRoomSharedContentsWithData:(NSData * _Nonnull)data completion:(void (^ _Nonnull)(BOOL))completion;
/// This function will not work at 1:1 call.
- (void)unsetRoomSharedContentsWithCompletion:(void (^ _Nonnull)(BOOL))completion;
@end

@protocol PlanetKitCallInterceptedAudioDelegate;
@class PlanetKitInterceptedAudio;

@interface PlanetKitCall (SWIFT_EXTENSION(PlanetKit))
- (void)enableInterceptMyAudioWithDelegate:(id <PlanetKitCallInterceptedAudioDelegate> _Nonnull)delegate completion:(void (^ _Nonnull)(BOOL))completion;
@property (nonatomic, readonly) BOOL isInterceptMyAudioEnabled;
- (void)disableInterceptMyAudioWithCompletion:(void (^ _Nonnull)(BOOL))completion;
- (BOOL)putInterceptedMyAudioBackWithAudio:(PlanetKitInterceptedAudio * _Nonnull)audio SWIFT_WARN_UNUSED_RESULT;
@end


@interface PlanetKitCall (SWIFT_EXTENSION(PlanetKit))
- (void)pauseMyVideoWithCompletion:(void (^ _Nonnull)(BOOL))completion;
- (void)resumeMyVideoWithCompletion:(void (^ _Nonnull)(BOOL))completion;
- (void)muteMyAudio:(BOOL)mute completion:(void (^ _Nonnull)(BOOL))completion;
/// Makes all peers’ voices silent by removing speaker output.
- (void)silencePeerAudio:(BOOL)silent completion:(void (^ _Nonnull)(BOOL))completion;
@end


@class PlanetKitCallStartMessage;

@interface PlanetKitCall (SWIFT_EXTENSION(PlanetKit))
/// Declines the incoming call.
- (void)declineCall;
/// Accepts the incoming call using the client’s media with own <code>useResponderPreparation</code> and <code>startMessage</code>.
/// remark:
///
/// DO NOT set <code>recordOnCloud</code> to <code>true</code> before consulting with the LINE Planet team.
/// If you want to use this feature, please contact us. (https://docs.lineplanet.me/ko/help/contact)
- (void)acceptCallWithStartMessage:(PlanetKitCallStartMessage * _Nullable)startMessage useResponderPreparation:(BOOL)useResponderPreparation recordOnCloud:(BOOL)recordOnCloud;
/// Finishes the call with a normal reason, which means success.
- (void)endCall;
/// Finishes the call with a normal code.
/// \param normalUserReleaseCode User code for successful call end.
/// Maximum size of user code is 128 bytes including null termination.
///
- (void)endCallWithNormalUserReleaseCode:(NSString * _Nonnull)normalUserReleaseCode;
/// Finishes the call with an error code.
/// \param errorUserReleaseCode User code for error call end.
/// Maximum size of user code is 128 bytes including null termination.
///
- (void)endCallWithErrorUserReleaseCode:(NSString * _Nonnull)errorUserReleaseCode;
/// Holds the call to interact with another call or OS operations.
/// \param reason Maximum size of reason is 255 bytes with UTF-8 encoded string.
///
- (void)holdWithReason:(NSString * _Nullable)reason completion:(void (^ _Nonnull)(BOOL))completion;
/// Unholds the call to resume.
- (void)unholdWithCompletion:(void (^ _Nonnull)(BOOL))completion;
@end


@interface PlanetKitCall (SWIFT_EXTENSION(PlanetKit))
- (void)startMyScreenShareWithCompletion:(void (^ _Nonnull)(BOOL))completion;
- (void)stopMyScreenShareWithCompletion:(void (^ _Nonnull)(BOOL))completion;
/// Stops the local user’s screen share with a reason code.
/// remark:
///
/// The <code>reason</code> value must be between 0 and 39.
- (void)stopMyScreenShareWithReason:(int32_t)reason completion:(void (^ _Nonnull)(BOOL))completion;
- (void)addPeerScreenShareViewWithDelegate:(id <PlanetKitVideoOutputDelegate> _Nonnull)delegate;
- (void)removePeerScreenShareViewWithDelegate:(id <PlanetKitVideoOutputDelegate> _Nonnull)delegate;
- (NSArray<id <PlanetKitVideoOutputDelegate>> * _Nonnull)getPeerScreenShareViews SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) BOOL isMyScreenShared;
@property (nonatomic, readonly) BOOL isPeerScreenShared;
- (void)stopMyBroadcast;
@end

@class PlanetKitVideoStatus;

@interface PlanetKitCall (SWIFT_EXTENSION(PlanetKit))
@property (nonatomic, readonly) BOOL isMyAudioMuted;
@property (nonatomic, readonly) BOOL isPeerAudioMuted;
@property (nonatomic, readonly) BOOL isPeerAudioSilenced;
@property (nonatomic, readonly, strong) PlanetKitVideoStatus * _Nonnull myVideoStatus;
@property (nonatomic, readonly, strong) PlanetKitVideoStatus * _Nonnull peerVideoStatus;
/// Gets the current hold state for audio/video.
/// It will return <code>true</code> after <code>hold(reason:completion:)</code> is called, and <code>false</code> after <code>unhold(completion:)</code> is called.
@property (nonatomic, readonly) BOOL isOnHold;
/// Gets the call duration.
/// If the duration is invalid, it returns -1.
@property (nonatomic, readonly) NSTimeInterval duration;
@end



SWIFT_CLASS("_TtC9PlanetKit27PlanetKitCallConnectedParam")
@interface PlanetKitCallConnectedParam : NSObject
@property (nonatomic, readonly) BOOL isDataSessionSupported;
@property (nonatomic, readonly) BOOL isVideoHwCodecEnabled;
@property (nonatomic, readonly) BOOL isVideoShareModeSupported;
@property (nonatomic, readonly, strong) PlanetKitCallStartMessage * _Nullable peerStartMessage;
@property (nonatomic, readonly) BOOL isInResponderPreparation;
@property (nonatomic, readonly) BOOL shouldFinishPreparation;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class PlanetKitDisconnectedParam;
enum PlanetKitVideoPauseReason : NSInteger;
enum BroadcastError : NSInteger;
@class PlanetKitRecordOnCloudUpdatedParam;

SWIFT_PROTOCOL("_TtP9PlanetKit21PlanetKitCallDelegate_")
@protocol PlanetKitCallDelegate
/// Called if the local user makes a call and needs to wait until the peer accepts the call.
- (void)didWaitConnect:(PlanetKitCall * _Nonnull)call;
/// Called when the callee accepted this call.
- (void)didConnect:(PlanetKitCall * _Nonnull)call connected:(PlanetKitCallConnectedParam * _Nonnull)connected;
/// Called when the call is disconnected.
/// <ul>
///   <li>
///     <code>disconnected</code>: An additional parameter delivered when the call is disconnected. <code>PlanetKitDisconnectedParam.userCode</code> has a valid release code if <code>PlanetKitDisconnectedParam.reason</code> is <code>.userError</code>.
///   </li>
/// </ul>
- (void)didDisconnect:(PlanetKitCall * _Nonnull)call disconnected:(PlanetKitDisconnectedParam * _Nonnull)disconnected;
/// Called when <code>PlanetKitManger.verifyCall(myUserId:ccParam:delegate:completion:)</code> is successful.
- (void)didVerify:(PlanetKitCall * _Nonnull)call peerStartMessage:(PlanetKitCallStartMessage * _Nullable)peerStartMessage peerUseResponderPreparation:(BOOL)peerUseResponderPreparation;
/// Called when the peer finishes preparation.
- (void)didFinishPreparation:(PlanetKitCall * _Nonnull)call;
@optional
- (void)networkDidUnavailable:(PlanetKitCall * _Nonnull)call isPeer:(BOOL)isPeer willDisconnected:(NSTimeInterval)seconds;
- (void)networkDidReavailable:(PlanetKitCall * _Nonnull)call isPeer:(BOOL)isPeer;
- (void)peerVideoDidPause:(PlanetKitCall * _Nonnull)call reason:(enum PlanetKitVideoPauseReason)reason;
- (void)peerVideoDidResume:(PlanetKitCall * _Nonnull)call;
- (void)videoEnabledByPeer:(PlanetKitCall * _Nonnull)call;
- (void)videoDisabledByPeer:(PlanetKitCall * _Nonnull)call reason:(enum PlanetKitMediaDisableReason)reason;
- (void)didDetectMyVideoNoSource:(PlanetKitCall * _Nonnull)call;
- (void)didReceiveShortData:(PlanetKitCall * _Nonnull)call dataType:(NSString * _Nonnull)dataType data:(NSData * _Nonnull)data;
- (void)peerMicDidMute:(PlanetKitCall * _Nonnull)call;
- (void)peerMicDidUnmute:(PlanetKitCall * _Nonnull)call;
- (void)myMuteRequestedByPeer:(PlanetKitCall * _Nonnull)call mute:(BOOL)mute;
- (void)peerDidHold:(PlanetKitCall * _Nonnull)call reason:(NSString * _Nullable)reason;
- (void)peerDidUnhold:(PlanetKitCall * _Nonnull)call;
- (void)peerDidStartScreenShare:(PlanetKitCall * _Nonnull)call;
- (void)peerDidStopScreenShare:(PlanetKitCall * _Nonnull)call reason:(int32_t)reason;
- (void)myScreenShareDidStopByHold:(PlanetKitCall * _Nonnull)call;
- (void)dataSessionIncoming:(PlanetKitCall * _Nonnull)call streamId:(uint32_t)streamId type:(enum PlanetKitDataSessionType)type;
- (void)didStartMyBroadcast:(PlanetKitCall * _Nonnull)call;
- (void)didFinishMyBroadcast:(PlanetKitCall * _Nonnull)call;
- (void)didErrorMyBroadcast:(PlanetKitCall * _Nonnull)call error:(enum BroadcastError)error;
- (void)peerDidSetSharedContents:(PlanetKitCall * _Nonnull)call data:(NSData * _Nonnull)data elapsed:(NSTimeInterval)seconds;
- (void)peerDidUnsetSharedContents:(PlanetKitCall * _Nonnull)call;
- (void)peerDidSetExclusivelySharedContents:(PlanetKitCall * _Nonnull)call data:(NSData * _Nonnull)data elapsed:(NSTimeInterval)seconds;
- (void)peerDidUnsetExclusivelySharedContents:(PlanetKitCall * _Nonnull)call;
- (void)recordOnCloudDidUpdate:(PlanetKitCall * _Nonnull)call updated:(PlanetKitRecordOnCloudUpdatedParam * _Nonnull)updated;
@end

typedef SWIFT_ENUM(NSInteger, PlanetKitCallDirection, closed) {
  PlanetKitCallDirectionUnknown = 0,
  PlanetKitCallDirectionOutgoing = 1,
  PlanetKitCallDirectionIncoming = 2,
};


SWIFT_PROTOCOL("_TtP9PlanetKit37PlanetKitCallInterceptedAudioDelegate_")
@protocol PlanetKitCallInterceptedAudioDelegate
- (void)didIntercept:(PlanetKitCall * _Nonnull)call audio:(PlanetKitInterceptedAudio * _Nonnull)audio;
@end


SWIFT_CLASS("_TtC9PlanetKit21PlanetKitCallKitParam")
@interface PlanetKitCallKitParam : NSObject
/// appName is available for iOS version greater than or equal to 10.0 and less than 14.0
@property (nonatomic, readonly, copy) NSString * _Nullable appName;
@property (nonatomic, readonly, copy) NSString * _Nonnull callerName;
@property (nonatomic, readonly) BOOL hasVideo;
@property (nonatomic, readonly, copy) NSURL * _Nullable ringtoneSound;
@property (nonatomic, readonly, copy) NSString * _Nullable icon;
@property (nonatomic, readonly) BOOL addCallToList;
@property (nonatomic, readonly) BOOL supportsHolding;
@property (nonatomic, readonly, strong) PlanetKitCallStartMessage * _Nullable startMessage;
@property (nonatomic, readonly) BOOL useResponderPreparation;
@property (nonatomic, readonly) BOOL recordOnCloud;
- (nonnull instancetype)initWithAppName:(NSString * _Nullable)appName callerName:(NSString * _Nonnull)callerName isVideo:(BOOL)isVideo ringtoneSound:(NSURL * _Nullable)ringtoneSound icon:(NSString * _Nullable)icon addCallToList:(BOOL)addCallToList supportsHolding:(BOOL)supportsHolding startMessage:(PlanetKitCallStartMessage * _Nullable)startMessage useResponderPreparation:(BOOL)useResponderPreparation recordOnCloud:(BOOL)recordOnCloud OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



SWIFT_CLASS("_TtC9PlanetKit23PlanetKitCallKitSetting")
@interface PlanetKitCallKitSetting : NSObject
@property (nonatomic) enum PlanetKitCallKitType type;
@property (nonatomic, strong) PlanetKitCallKitParam * _Nullable param;
- (nonnull instancetype)initWithType:(enum PlanetKitCallKitType)type param:(PlanetKitCallKitParam * _Nullable)param OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// CallKit implementation types
/// remark:
///
/// <code>PlanetKitCall</code> instance’s default <code>PlanetKitCallKitType</code> value is <code>PlanetKitCallKitType.none</code>.
/// When using PlanetKit internal CallKit or application implemented CallKit, please set <code>AVAudioSession.Category</code> to <code>playAndRecord</code> before calling <code>PlanetKitManager.makeCall()</code> or <code>PlanetKitManager.verifyCall()</code> to avoid <code>AVAudioSession</code> malfunction that occurs in older iOS devices.
typedef SWIFT_ENUM(NSInteger, PlanetKitCallKitType, closed) {
/// PlanetKit internal CallKit is not used and the application does not implement CallKit.
  PlanetKitCallKitTypeNone = 0,
/// PlanetKit internal CallKit is not used and the application implements CallKit.
  PlanetKitCallKitTypeUser = 1,
/// PlanetKit internal CallKit is used and the application does not implement CallKit.
  PlanetKitCallKitTypePlanetKit = 2,
};

enum PlanetKitStartFailReason : NSInteger;

SWIFT_CLASS("_TtC9PlanetKit23PlanetKitCallMakeResult")
@interface PlanetKitCallMakeResult : NSObject
@property (nonatomic, readonly) enum PlanetKitStartFailReason reason;
@property (nonatomic, readonly, strong) PlanetKitCall * _Nullable call;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC9PlanetKit18PlanetKitCallParam")
@interface PlanetKitCallParam : NSObject
@property (nonatomic, readonly, strong) PlanetKitUserId * _Nonnull myUserId;
@property (nonatomic, readonly, strong) PlanetKitUserId * _Nonnull peerUserId;
@property (nonatomic, readonly, copy) NSString * _Nullable APIKey;
@property (nonatomic, readonly, copy) NSString * _Nullable accessToken;
@property (nonatomic, readonly, weak) id <PlanetKitCallDelegate> _Nullable delegate;
/// App server data for establishing a new call.
/// remark:
///
/// Maximum size of <code>appServerData</code> is 4096 bytes including null termination.
/// If the size of <code>appServerData</code> exceed 4096 bytes, <code>makeCall(param:settings:)</code> will return <code>PlanetKitStartFailReason.tooLongAppServerData</code>.
@property (nonatomic, copy) NSString * _Nullable appServerData;
/// Initial media type
@property (nonatomic) enum PlanetKitMediaType mediaType;
/// Whether to allow the callee to use responder preparation when accepting the call.
/// remark:
///
/// The callee can check the caller’s parameter with <code>PlanetKitCallDelegate.didVerify(_:peerStartMessage:peerUseResponderPreparation:)</code>.
/// For more information, see https://docs.lineplanet.me/iosmacos/extended-functions/responder-preparation-status.
@property (nonatomic) BOOL useResponderPreparation;
/// Short message for initial connection (max. 200 bytes).
/// remark:
///
/// <code>PlanetKitCallParam.startMessage</code> will be sent to the callee through <code>PlanetKitCallDelegate.didVerify(_:peerStartMessage:peerUseResponderPreparation:)</code>.
/// For more information, see https://docs.lineplanet.me/iosmacos/extended-functions/call-start-message.
@property (nonatomic, strong) PlanetKitCallStartMessage * _Nullable startMessage;
/// Whether to enable recording on the cloud.
/// remark:
///
/// DO NOT set <code>recordOnCloud</code> to <code>true</code> before consulting with the LINE Planet team.
/// If you want to use this feature, please contact us. (https://docs.lineplanet.me/ko/help/contact)
@property (nonatomic) BOOL recordOnCloud;
- (nonnull instancetype)initWithMyUserId:(PlanetKitUserId * _Nonnull)myUserId peerUserId:(PlanetKitUserId * _Nonnull)peerUserId delegate:(id <PlanetKitCallDelegate> _Nonnull)delegate APIKey:(NSString * _Nonnull)APIKey OBJC_DESIGNATED_INITIALIZER SWIFT_DEPRECATED_MSG("Due to a security reason, use init(myUserId:peerUserId:delegate:accessToken:) instead");
- (nonnull instancetype)initWithMyUserId:(PlanetKitUserId * _Nonnull)myUserId peerUserId:(PlanetKitUserId * _Nonnull)peerUserId delegate:(id <PlanetKitCallDelegate> _Nonnull)delegate accessToken:(NSString * _Nonnull)accessToken OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC9PlanetKit25PlanetKitCallStartMessage")
@interface PlanetKitCallStartMessage : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull data;
- (nullable instancetype)initWithData:(NSString * _Nonnull)data OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, PlanetKitCallState, closed) {
  PlanetKitCallStateIdle = 0,
  PlanetKitCallStateTrying = 1,
  PlanetKitCallStateWaitAnswer = 2,
  PlanetKitCallStateVerified = 3,
  PlanetKitCallStateConnected = 4,
  PlanetKitCallStateDisconnected = 5,
};


SWIFT_CLASS("_TtC9PlanetKit25PlanetKitCallVerifyResult")
@interface PlanetKitCallVerifyResult : NSObject
@property (nonatomic, readonly) enum PlanetKitStartFailReason reason;
@property (nonatomic, readonly, strong) PlanetKitCall * _Nullable call;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class PlanetKitVirtualBackground;
enum PlanetKitCameraPosition : NSInteger;
@class PlanetKitCameraPreset;
@class PlanetKitFrameRate;
@class PlanetKitVideoCaptureDevice;

SWIFT_CLASS("_TtC9PlanetKit15PlanetKitCamera")
@interface PlanetKitCamera : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PlanetKitCamera * _Nonnull shared;)
+ (PlanetKitCamera * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// Gets or sets the virtual background.
/// remark:
/// The <code>virtualBackground</code> property is available on iOS 15.0 and macOS 12.0 or newer versions.
/// Set <code>virtualBackground</code> with desired <code>PlanetKitVirtualBackground</code> settings to apply a virtual background.
/// Set <code>virtualBackground</code> to <code>nil</code> to remove the virtual background.
/// The default value is <code>nil</code>.
/// For iOS: Due to the segmentation performance requirements, we recommend using this feature for iPhone 12 or newer models.
@property (nonatomic, strong) PlanetKitVirtualBackground * _Nullable virtualBackground SWIFT_AVAILABILITY(macos,introduced=12.0) SWIFT_AVAILABILITY(ios,introduced=15.0);
@property (nonatomic, readonly) enum PlanetKitCameraPosition cameraPosition;
@property (nonatomic, readonly, strong) PlanetKitCameraPreset * _Nullable cameraPreset;
@property (nonatomic, readonly, strong) PlanetKitFrameRate * _Nullable cameraFrameRate;
@property (nonatomic, readonly, copy) NSArray<PlanetKitVideoCaptureDevice *> * _Nonnull devices;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL isCameraAvailable;)
+ (BOOL)isCameraAvailable SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, strong) PlanetKitVideoCaptureDevice * _Nullable currentDevice;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface PlanetKitCamera (SWIFT_EXTENSION(PlanetKit))
/// remark:
///
/// This is a heuristic function based on experience.
/// The following pixel type will return <code>false</code> and others will return <code>true</code>:
/// <ul>
///   <li>
///     <code>kCVPixelFormatType_24RGB</code>
///   </li>
/// </ul>
+ (BOOL)canSupportVideoSettings:(OSType)pixelFormat SWIFT_WARN_UNUSED_RESULT;
@end


@class AVCaptureOutput;
@class AVCaptureConnection;

@interface PlanetKitCamera (SWIFT_EXTENSION(PlanetKit)) <AVCaptureVideoDataOutputSampleBufferDelegate>
- (void)captureOutput:(AVCaptureOutput * _Nonnull)captureOutput didOutputSampleBuffer:(CMSampleBufferRef _Nonnull)sampleBuffer fromConnection:(AVCaptureConnection * _Nonnull)connection;
@end


@protocol PlanetKitCameraDeviceChangeDelegate;

@interface PlanetKitCamera (SWIFT_EXTENSION(PlanetKit))
- (void)addDeviceChangeDelegate:(id <PlanetKitCameraDeviceChangeDelegate> _Nonnull)delegate;
- (void)removeDeviceChangeDelegate:(id <PlanetKitCameraDeviceChangeDelegate> _Nonnull)delegate;
@end


@interface PlanetKitCamera (SWIFT_EXTENSION(PlanetKit))
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSNotificationName _Nonnull didOpenNotification;)
+ (NSNotificationName _Nonnull)didOpenNotification SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSNotificationName _Nonnull didCloseNotification;)
+ (NSNotificationName _Nonnull)didCloseNotification SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSNotificationName _Nonnull didStartNotification;)
+ (NSNotificationName _Nonnull)didStartNotification SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSNotificationName _Nonnull didStopNotification;)
+ (NSNotificationName _Nonnull)didStopNotification SWIFT_WARN_UNUSED_RESULT;
@end



SWIFT_PROTOCOL("_TtP9PlanetKit31PlanetKitFpsLimitUpdateDelegate_")
@protocol PlanetKitFpsLimitUpdateDelegate
@optional
/// Informs <code>PlanetKitCameraControllable</code> and <code>PlanetKitScreenControllable</code> of the optimal FPS for the PlanetKit SDK.
/// If <code>enabled</code> is <code>true</code>, use <code>fps</code> to configure the FPS of your <code>PlanetKitCameraControllable</code> and  <code>PlanetKitScreenControllable</code> implementation to optimize their performance.
- (void)didFpsLimitUpdateWithEnabled:(BOOL)enabled fps:(int32_t)fps;
@end

@protocol PlanetKitVideoStreamDelegate;

SWIFT_PROTOCOL("_TtP9PlanetKit27PlanetKitCameraControllable_")
@protocol PlanetKitCameraControllable <PlanetKitFpsLimitUpdateDelegate>
/// Opens with the default device.
- (void)open;
- (void)openWithDevice:(PlanetKitVideoCaptureDevice * _Nullable)device;
- (void)close;
- (void)changeWithDevice:(PlanetKitVideoCaptureDevice * _Nullable)device;
@property (nonatomic, readonly, strong) PlanetKitVideoCaptureDevice * _Nullable currentDevice;
- (void)start;
- (void)stop;
@property (nonatomic, readonly) BOOL isOpened;
@property (nonatomic, readonly) BOOL isStarted;
@property (nonatomic, readonly) enum PlanetKitCameraPosition cameraPosition;
@property (nonatomic, readonly, strong) PlanetKitCameraPreset * _Nullable cameraPreset;
@property (nonatomic, readonly, strong) PlanetKitFrameRate * _Nullable cameraFrameRate;
- (void)addReceiver:(id <PlanetKitVideoStreamDelegate> _Nonnull)delegate;
- (void)removeReceiver:(id <PlanetKitVideoStreamDelegate> _Nonnull)delegate;
- (void)switchPosition;
- (void)addInterruptReceiver:(id <PlanetKitCameraInterruptDelegate> _Nonnull)interruptReceiver;
- (void)removeInterruptReceiver:(id <PlanetKitCameraInterruptDelegate> _Nonnull)interruptReceiver;
@end


@interface PlanetKitCamera (SWIFT_EXTENSION(PlanetKit)) <PlanetKitCameraControllable>
- (void)didFpsLimitUpdateWithEnabled:(BOOL)enabled fps:(int32_t)fps;
/// Initializes a camera session with the default device.
/// remark:
///
/// This is functionally equivalent to <code>PlanetKitCamera.open(device: nil)</code>.
- (void)open;
/// Initializes a camera session with a proposed capture device.
/// remark:
///
/// If <code>device</code> is nil, PlanetKit will open the last used camera device or the default camera device.
/// The default camera is the first one in <code>PlanetKitCamera.devices</code>.
- (void)openWithDevice:(PlanetKitVideoCaptureDevice * _Nullable)device;
/// Releases the camera session.
- (void)close;
/// Starts the camera session.
- (void)start;
/// Stops the camera session.
- (void)stop;
/// Changes the device for the current camera session.
/// remark:
///
/// If <code>device</code> is nil, PlanetKit will change the camera to the default one.
/// The default camera is the first one in <code>PlanetKitCamera.devices</code>.
- (void)changeWithDevice:(PlanetKitVideoCaptureDevice * _Nullable)device;
@property (nonatomic, readonly) BOOL isOpened;
@property (nonatomic, readonly) BOOL isStarted;
- (void)addReceiver:(id <PlanetKitVideoStreamDelegate> _Nonnull)delegate;
- (void)removeReceiver:(id <PlanetKitVideoStreamDelegate> _Nonnull)delegate;
- (void)addInterruptReceiver:(id <PlanetKitCameraInterruptDelegate> _Nonnull)interruptReceiver;
- (void)removeInterruptReceiver:(id <PlanetKitCameraInterruptDelegate> _Nonnull)interruptReceiver;
/// Switches between the front camera and the back camera.
- (void)switchPosition;
@end



SWIFT_PROTOCOL("_TtP9PlanetKit35PlanetKitCameraDeviceChangeDelegate_")
@protocol PlanetKitCameraDeviceChangeDelegate
- (void)didCameraDeviceConnectWithDevice:(PlanetKitVideoCaptureDevice * _Nonnull)device;
- (void)didCameraDeviceDisconnectWithDevice:(PlanetKitVideoCaptureDevice * _Nonnull)device;
- (void)didCameraDeviceSelectWithDevice:(PlanetKitVideoCaptureDevice * _Nonnull)device preset:(PlanetKitCameraPreset * _Nonnull)preset;
@end


typedef SWIFT_ENUM(NSInteger, PlanetKitCameraPosition, closed) {
  PlanetKitCameraPositionUnknown = 0,
  PlanetKitCameraPositionFront = 1,
  PlanetKitCameraPositionBack = 2,
};


SWIFT_CLASS("_TtC9PlanetKit21PlanetKitCameraPreset")
@interface PlanetKitCameraPreset : NSObject
@property (nonatomic) AVCaptureSessionPreset _Nonnull preset;
- (nonnull instancetype)initWithPreset:(AVCaptureSessionPreset _Nonnull)preset OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum PlanetKitConferenceState : NSInteger;
@protocol PlanetKitConferenceDelegate;
@class PlanetKitSubgroupManager;
@class PlanetKitConferencePeer;

SWIFT_CLASS("_TtC9PlanetKit19PlanetKitConference")
@interface PlanetKitConference : NSObject
@property (nonatomic, readonly) enum PlanetKitConferenceState state;
@property (nonatomic, readonly) enum PlanetKitMediaType mediaType;
@property (nonatomic, readonly, strong) PlanetKitUserId * _Null_unspecified myUserId;
@property (nonatomic, readonly, copy) NSString * _Nonnull roomId;
@property (nonatomic, readonly, copy) NSString * _Nonnull roomServiceId;
@property (nonatomic, readonly, copy) NSString * _Nullable APIKey;
@property (nonatomic, readonly, copy) NSString * _Nullable accessToken;
@property (nonatomic, readonly) BOOL enableStatistics;
@property (nonatomic, readonly, copy) NSUUID * _Nonnull uuid;
@property (nonatomic, readonly, weak) id <PlanetKitConferenceDelegate> _Nullable delegate;
@property (nonatomic, readonly, strong) PlanetKitVideoStream * _Null_unspecified myCameraStream;
@property (nonatomic, readonly, strong) PlanetKitVideoStream * _Null_unspecified myScreenShareStream;
@property (nonatomic, readonly) enum PlanetKitCallKitType callKitType;
@property (nonatomic, readonly, strong) PlanetKitCallKitParam * _Nullable callKitParam;
@property (nonatomic, strong) id <PlanetKitCameraControllable> _Nullable camera;
@property (nonatomic, strong) id <PlanetKitScreenControllable> _Nullable screen;
@property (nonatomic, readonly, strong) PlanetKitAudioManager * _Nonnull audioManager;
@property (nonatomic, readonly, strong) PlanetKitSendVoiceProcessor * _Nonnull sendVoiceProcessor;
/// Gets the subgroup manager.
@property (nonatomic, readonly, strong) PlanetKitSubgroupManager * _Null_unspecified subgroupManager;
/// Gets the total count of all connected peers, including the local user.
/// remark:
///
/// If the local user is connected, their count is added.
@property (nonatomic, readonly) NSInteger peersCount;
/// Gets the list of all peers.
/// remark:
///
/// This is copied from the internal dictionary using locks. If this function is called frequently, it will affect performance.
/// To find a peer member, it’s better to use <code>getPeerMember(peerId:)</code>.
@property (nonatomic, readonly, copy) NSDictionary<NSString *, PlanetKitConferencePeer *> * _Nonnull peers;
/// Gets the total count of peers in the room. The count does not include the local user.
/// remark:
///
/// Initially, the peer list on the client-side does not contain the complete peer list.
/// The list is updated gradually as the VoIP server sends the remaining peer list to the client.
@property (nonatomic, readonly) NSInteger totalPeersCount;
@property (nonatomic, readonly, strong) PlanetKitMyMediaStatus * _Null_unspecified myMediaStatus;
@property (nonatomic, readonly, strong) PlanetKitVideoCapability * _Nonnull myVideoSendCapability;
@property (nonatomic, readonly) BOOL myVideoRecvPreferredHwCodec;
/// Sets a modifier to receive audio data before speaker out.
/// The modifier can modify audio data.
@property (nonatomic, weak) id <PlanetKitAudioSpkPlayDelegate> _Nullable spkModifier;
/// Sets a receiver to receive audio data after speaker out.
/// The receiver cannot modify audio data.
@property (nonatomic, weak) id <PlanetKitAudioSpkPlayDelegate> _Nullable spkReceiver;
/// Sets a modifier to receive audio data before sending audio to the server.
/// The modifier can modify audio data.
@property (nonatomic, weak) id <PlanetKitAudioMicCaptureDelegate> _Nullable micModifier;
/// Sets a receiver to receive audio data after sending audio to the server.
/// The receiver cannot modify audio data.
@property (nonatomic, weak) id <PlanetKitAudioMicCaptureDelegate> _Nullable micReceiver;
/// Sets a receiver to receive the updated event of audio description for the peer.
/// remark:
///
/// The update interval can be set by <code>PlanetKitJoinConferenceSettingBuilder.withAudioDescriptionUpdateIntervalKey(interval:)</code>
/// The default update interval is 0.5 seconds.
@property (nonatomic, weak) id <PlanetKitPeerAudioDescriptionDelegate> _Nullable peerAudioDescriptionReceiver;
/// Sets a receiver to receive the updated event of audio description for the local user’s audio.
/// remark:
///
/// The update interval can be set by <code>PlanetKitJoinConferenceSettingBuilder.withAudioDescriptionUpdateIntervalKey(interval:)</code>
/// The default update interval is 0.5 seconds.
@property (nonatomic, weak) id <PlanetKitMyAudioDescriptionDelegate> _Nullable myAudioDescriptionReceiver;
/// Sets a modifier to receive the local user’s video data before requesting video transmission.
/// The modifier can modify video data.
@property (nonatomic, weak) id <PlanetKitVideoModifierDelegate> _Nullable myVideoModifier;
@property (nonatomic, weak) id <PlanetKitVideoOutputDelegate> _Nullable myVideoReceiver;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




@interface PlanetKitConference (SWIFT_EXTENSION(PlanetKit))
- (void)notifyCallKitAudioActivation;
@end



@interface PlanetKitConference (SWIFT_EXTENSION(PlanetKit)) <PlanetKitAudioMicCaptureDelegate>
/// Implements the <code>PlanetKitAudioMicCaptureDelegate</code> to send audio data to a conference.
/// Do not call this function unless you have to handle mic input instead of PlanetKit.
- (void)didCaptureWithFrameCnt:(uint32_t)frameCnt channels:(uint32_t)channels sampleRate:(uint32_t)sampleRate sampleType:(enum PlanetKitAudioSampleType)sampleType timestamp:(AudioTimeStamp)timestamp outData:(void * _Null_unspecified)outData outDataLen:(uint32_t)outDataLen;
@end


@interface PlanetKitConference (SWIFT_EXTENSION(PlanetKit)) <PlanetKitAudioSpkPlayDelegate>
/// Implements the <code>PlanetKitAudioSpkPlayDelegate</code> to get audio data from a conference.
/// Do not call this function unless you have to handle speaker and play out instead of PlanetKit.
- (int32_t)willPlayWithFrameCnt:(uint32_t)frameCnt channels:(uint32_t)channels sampleRate:(uint32_t)sampleRate sampleType:(enum PlanetKitAudioSampleType)sampleType timestamp:(AudioTimeStamp)timestamp playBuf:(void * _Null_unspecified)playBuf playBufSize:(uint32_t)playBufSize SWIFT_WARN_UNUSED_RESULT;
@end


@interface PlanetKitConference (SWIFT_EXTENSION(PlanetKit)) <PlanetKitAudioVolumeDelegate>
- (void)didChangeVolume:(enum PlanetKitAudioDeviceType)type volume:(float)volume;
@end


@interface PlanetKitConference (SWIFT_EXTENSION(PlanetKit)) <PlanetKitVideoOutputDelegate>
/// Implements the <code>PlanetKitVideoOutputDelegate</code> to send video data to a conference.
/// Do not call this function unless you have to handle cam output instead of PlanetKit.
- (void)videoOutput:(PlanetKitVideoBuffer * _Nonnull)videoBuffer;
@end


@interface PlanetKitConference (SWIFT_EXTENSION(PlanetKit))
/// Requests a targeted peer to mute or unmute audio.
- (void)requestPeerMute:(BOOL)mute peerId:(PlanetKitUserId * _Nonnull)peerId completion:(void (^ _Nonnull)(BOOL))completion;
/// Requests all peers to mute or unmute audio.
- (void)requestPeersMute:(BOOL)mute completion:(void (^ _Nonnull)(BOOL))completion;
@end


@interface PlanetKitConference (SWIFT_EXTENSION(PlanetKit))
/// Sends raw data.
/// remark:
///
/// This is functionally equivalent to <code>PlanetKitConference.didCapture(frameCnt:channels:sampleRate:sampleType:timestamp:outData:outDataLen:)</code> that handles the Modifier, the Receivers, and the Volume Receiver.
- (void)sendMicDataWithFrameCnt:(uint32_t)frameCnt sampleRate:(uint32_t)sampleRate sampleType:(enum PlanetKitAudioSampleType)sampleType outData:(void * _Null_unspecified)outData outDataLen:(uint32_t)outDataLen;
/// Receives raw data.
/// remark:
///
/// This is functionally equivalent to <code>PlanetKitConference.willPlay(frameCnt:channels:sampleRate:sampleType:timestamp:playBuf:playBufSize:)</code> that handles the Modifier, the Receivers, and the Volume Receiver.
- (int32_t)recvSpkDataWithFrameCnt:(uint32_t)frameCnt sampleRate:(uint32_t)sampleRate sampleType:(enum PlanetKitAudioSampleType)sampleType playBuf:(void * _Null_unspecified)playBuf playBufSize:(uint32_t)playBufSize SWIFT_WARN_UNUSED_RESULT;
@end




@interface PlanetKitConference (SWIFT_EXTENSION(PlanetKit))
/// Starts the camera preview when the local user answers an incoming call.
- (void)startPreview;
/// Stops the camera preview.
- (void)stopPreview;
@end


@interface PlanetKitConference (SWIFT_EXTENSION(PlanetKit))
/// Checks if the peer is the local user.
- (BOOL)isMeWithPeer:(PlanetKitConferencePeer * _Nonnull)peer SWIFT_WARN_UNUSED_RESULT;
/// Gets a peer object from the main room.
- (PlanetKitConferencePeer * _Nullable)getPeerWithPeerId:(PlanetKitUserId * _Nonnull)peerId SWIFT_WARN_UNUSED_RESULT;
@end




@interface PlanetKitConference (SWIFT_EXTENSION(PlanetKit))
- (void)enableVideoWithCompletion:(void (^ _Nonnull)(BOOL))completion;
- (void)disableVideoWithStopCamera:(BOOL)stopCamera completion:(void (^ _Nonnull)(BOOL))completion;
@end


@interface PlanetKitConference (SWIFT_EXTENSION(PlanetKit)) <PlanetKitStatisticsControllable>
@property (nonatomic, readonly, strong) PlanetKitStatistics * _Nullable statistics;
@end


@interface PlanetKitConference (SWIFT_EXTENSION(PlanetKit)) <PlanetKitVideoLimiterDelegate>
- (BOOL)isScreenShareSendAvailable:(CMTime)timestamp SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isVideoSendAvailable:(CMTime)timestamp SWIFT_WARN_UNUSED_RESULT;
@end


@interface PlanetKitConference (SWIFT_EXTENSION(PlanetKit)) <PlanetKitCameraInterruptDelegate>
- (void)camDidInterruptBegin:(enum AVCaptureSessionInterruptionReason)reason;
- (void)camDidInterruptEnd;
@end



@interface PlanetKitConference (SWIFT_EXTENSION(PlanetKit))
- (BOOL)setMyScreenShareVideoShareModeWithEnable:(BOOL)enable SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) BOOL isMyScreenShareVideoShareModeEnabled;
@end



@interface PlanetKitConference (SWIFT_EXTENSION(PlanetKit))
/// Sends short data to a peer in the room.
/// The maximum size of <code>type</code> is 100 bytes and the maximum size of <code>data</code> is 800 bytes.
/// If the completion callback is called with <code>false</code>, the session is not in <code>.connected</code> state
/// or the <code>data</code> or <code>type</code> exceeds the size limit.
/// If the short data is sent successfully, the completion callback is called with <code>true</code>.
/// \param peerId Peer to receive short data.
///
/// \param type User-defined data type to be sent along with <code>data</code>
///
/// \param data Data to be sent
///
/// \param completion Completion callback to receive the result of sending short data
///
- (void)sendShortDataWithPeerId:(PlanetKitUserId * _Nonnull)peerId type:(NSString * _Nonnull)type data:(NSData * _Nonnull)data completion:(void (^ _Nonnull)(BOOL))completion;
/// Sends short data to all peers in the room.
/// The maximum size of <code>type</code> is 100 bytes and the maximum size of <code>data</code> is 800 bytes.
/// If the completion callback is called with <code>false</code>, the session is not in <code>.connected</code> state
/// or the <code>data</code> or <code>type</code> exceeds the size limit.
/// If the short data is sent successfully, the completion callback is called with <code>true</code>.
/// \param type User-defined data type to be sent along with <code>data</code>
///
/// \param data Data to be sent
///
/// \param completion Completion callback to receive the result of sending short data
///
- (void)sendShortDataWithType:(NSString * _Nonnull)type data:(NSData * _Nonnull)data completion:(void (^ _Nonnull)(BOOL))completion;
@end


@interface PlanetKitConference (SWIFT_EXTENSION(PlanetKit))
/// Starts the use of the user’s reference audio data for AEC to resolve echo.
/// remark:
///
/// To resolve echo using the user’s reference data, you should provide reference data using <code>PlanetKitConference.putUserAcousticEchoCancellerReference(frameCnt:...)</code> after calling this function.
- (void)startUserAcousticEchoCancellerReference:(void (^ _Nonnull)(BOOL))completion;
/// Stops the use of the user’s reference audio data for AEC to resolve echo.
/// remark:
///
/// You should call this function to stop putting reference audio data for AEC.
- (void)stopUserAcousticEchoCancellerReference:(void (^ _Nonnull)(BOOL))completion;
/// Puts reference audio data for AEC.
- (void)putUserAcousticEchoCancellerReferenceWithFrameCnt:(uint32_t)frameCnt channels:(uint32_t)channels sampleRate:(uint32_t)sampleRate sampleType:(enum PlanetKitAudioSampleType)sampleType outData:(void * _Null_unspecified)outData outDataLen:(uint32_t)outDataLen;
@end


@interface PlanetKitConference (SWIFT_EXTENSION(PlanetKit)) <PlanetKitDebugMonitor>
/// Gets the monitoring information string.
- (NSString * _Nonnull)getMonitorInfo SWIFT_WARN_UNUSED_RESULT;
@end



@interface PlanetKitConference (SWIFT_EXTENSION(PlanetKit))
@property (nonatomic, readonly) BOOL isPeersAudioSilenced;
/// Gets the call duration.
/// If the duration is invalid, it returns -1.
@property (nonatomic, readonly) NSTimeInterval duration;
@end


@interface PlanetKitConference (SWIFT_EXTENSION(PlanetKit))
/// Gets the maximum concurrent video count.
/// remark:
///
/// The count of received peer videos increases with a successful <code>startVideo(maxResolution:delegate:subgroupName:completion:)</code> and decreases with <code>stopVideo(completion:)</code>.
/// If the count of concurrently received peer videos is equal to the maximum count, a new <code>startVideo(maxResolution:delegate:subgroupName:completion:)</code> will fail.
@property (nonatomic, readonly) NSInteger peersVideoMaxCount;
/// Gets the maximum concurrent screen share count.
/// remark:
///
/// The count of received peer screen shares increases with a successful <code>startScreenShare(delegate:subgroupName:completion:)</code> and decreases with <code>stopScreenShare(completion:)</code>.
/// If the count of concurrently received peer screen shares is equal to the maximum count, a new <code>startScreenShare(delegate:subgroupName:completion:)</code> will fail.
@property (nonatomic, readonly) NSInteger peersScreenShareMaxCount;
@end




enum PlanetKitVideoResolution : NSInteger;

@interface PlanetKitConference (SWIFT_EXTENSION(PlanetKit))
/// Requests the target peer’s video.
/// remark:
///
/// Use the function with the resolution handler if the resulting resolution must be known.
/// The <code>requestPeerVideo</code> affects call quality.
/// Please refer to the document and use this API appropriately.
/// https://docs.lineplanet.me/iosmacos/extended-functions/peer-video-resolution-in-group-call
- (void)requestPeerVideoWithId:(PlanetKitUserId * _Nonnull)id maxResolution:(enum PlanetKitVideoResolution)maxResolution delegate:(id <PlanetKitVideoOutputDelegate> _Nonnull)delegate subgroupName:(NSString * _Nullable)subgroupName completion:(void (^ _Nonnull)(BOOL))completion SWIFT_DEPRECATED_MSG("Use startVideo(maxResolution:delegate:subgroupName:completion:) of PlanetKitPeerControl instead");
/// Requests the target peer’s video.
/// remark:
///
/// The <code>requestPeerVideo</code> affects call quality.
/// Please refer to the document and use this API appropriately.
/// https://docs.lineplanet.me/iosmacos/extended-functions/peer-video-resolution-in-group-call
- (void)requestPeerVideoWithId:(PlanetKitUserId * _Nonnull)id maxResolution:(enum PlanetKitVideoResolution)maxResolution delegate:(id <PlanetKitVideoOutputDelegate> _Nonnull)delegate subgroupName:(NSString * _Nullable)subgroupName resolution:(void (^ _Nonnull)(BOOL, enum PlanetKitVideoResolution, enum PlanetKitVideoResolution, NSString * _Nonnull))resolution SWIFT_DEPRECATED_MSG("Use startVideo(maxResolution:delegate:subgroupName:resolution:) of PlanetKitPeerControl instead");
/// Stops the target peer’s video.
/// remark:
/// The operation fails if the peer’s video has already been stopped.
- (void)stopPeerVideoWithId:(PlanetKitUserId * _Nonnull)id subgroupName:(NSString * _Nullable)subgroupName completion:(void (^ _Nonnull)(BOOL))completion SWIFT_DEPRECATED_MSG("Use stopVideo(completion:) of PlanetKitPeerControl instead");
@end



@interface PlanetKitConference (SWIFT_EXTENSION(PlanetKit))
/// Requests receiving a peer’s screen share.
- (void)requestPeerScreenShareWithPeerId:(PlanetKitUserId * _Nonnull)peerId subgroupName:(NSString * _Nullable)subgroupName completion:(void (^ _Nonnull)(BOOL))completion SWIFT_DEPRECATED_MSG("Use startScreenShare(delegate:subgroupName:completion:) of PlanetKitPeerControl instead");
/// Stops receiving a peer’s screen share.
- (void)stopPeerScreenShareWithPeerId:(PlanetKitUserId * _Nonnull)peerId subgroupName:(NSString * _Nullable)subgroupName completion:(void (^ _Nonnull)(BOOL))completion SWIFT_DEPRECATED_MSG("Use stopScreenShare(completion:) of PlanetKitPeerControl instead");
- (void)addPeerScreenShareViewWithPeerId:(PlanetKitUserId * _Nonnull)peerId subgroupName:(NSString * _Nullable)subgroupName delegate:(id <PlanetKitVideoOutputDelegate> _Nonnull)delegate;
- (void)removePeerScreenShareViewWithPeerId:(PlanetKitUserId * _Nonnull)peerId subgroupName:(NSString * _Nullable)subgroupName delegate:(id <PlanetKitVideoOutputDelegate> _Nonnull)delegate;
- (void)removeAllPeerScreenShareViewWithPeerId:(PlanetKitUserId * _Nonnull)peerId subgroupName:(NSString * _Nullable)subgroupName;
- (NSArray<id <PlanetKitVideoOutputDelegate>> * _Nullable)getPeerScreenShareViewsWithPeerId:(PlanetKitUserId * _Nonnull)peerId subgroupName:(NSString * _Nullable)subgroupName SWIFT_WARN_UNUSED_RESULT;
@end

enum PlanetKitUserEquipmentType : NSInteger;

@interface PlanetKitConference (SWIFT_EXTENSION(PlanetKit))
@property (nonatomic, readonly) BOOL isOnHold;
@property (nonatomic, readonly) enum PlanetKitUserEquipmentType myUserEquipmentType;
@property (nonatomic, readonly, copy) NSString * _Nullable myDisplayName;
@end


@interface PlanetKitConference (SWIFT_EXTENSION(PlanetKit)) <PlanetKitSharedContentsControllable>
- (void)setSharedContentsWithData:(NSData * _Nonnull)data completion:(void (^ _Nonnull)(BOOL))completion;
- (void)unsetSharedContentsWithCompletion:(void (^ _Nonnull)(BOOL))completion;
- (void)setExclusivelySharedContentsWithData:(NSData * _Nonnull)data completion:(void (^ _Nonnull)(BOOL))completion;
- (void)unsetExclusivelySharedContentsWithCompletion:(void (^ _Nonnull)(BOOL))completion;
- (void)setRoomSharedContentsWithData:(NSData * _Nonnull)data completion:(void (^ _Nonnull)(BOOL))completion;
- (void)unsetRoomSharedContentsWithCompletion:(void (^ _Nonnull)(BOOL))completion;
@end


@interface PlanetKitConference (SWIFT_EXTENSION(PlanetKit))
/// Leaves the conference.
- (void)leaveConference;
/// Holds the conference to interact with another call or OS operations.
/// \param reason Maximum size of reason is 255 bytes with UTF-8 encoded string.
///
- (void)holdWithReason:(NSString * _Nullable)reason completion:(void (^ _Nonnull)(BOOL))completion;
/// Unholds the conference to resume.
- (void)unholdWithCompletion:(void (^ _Nonnull)(BOOL))completion;
@end

@class PlanetKitPeerControl;

@interface PlanetKitConference (SWIFT_EXTENSION(PlanetKit))
- (PlanetKitPeerControl * _Nullable)createPeerControlWithPeer:(PlanetKitConferencePeer * _Nonnull)peer SWIFT_WARN_UNUSED_RESULT;
@end


@interface PlanetKitConference (SWIFT_EXTENSION(PlanetKit))
- (void)pauseMyVideoWithCompletion:(void (^ _Nonnull)(BOOL))completion;
- (void)resumeMyVideoWithCompletion:(void (^ _Nonnull)(BOOL))completion;
- (void)muteMyAudio:(BOOL)mute completion:(void (^ _Nonnull)(BOOL))completion;
@end


@interface PlanetKitConference (SWIFT_EXTENSION(PlanetKit)) <PlanetKitDataSessionControllable>
/// Makes a new outbound data session for the main room.
/// \param streamId The predefined ID for the app. The ID must be in the range [100, 999].
///
/// \param type The type of the outbound data session.
///
/// \param delegate The event callback for the outbound data session.
///
/// \param completion If successful, the completion handler returns an outbound data session. Otherwise, the completion handler returns <code>nil</code>.
///
- (void)makeOutboundDataSessionWithStreamId:(uint32_t)streamId type:(enum PlanetKitDataSessionType)type delegate:(id <PlanetKitOutboundDataSessionDelegate> _Nonnull)delegate completion:(void (^ _Nonnull)(PlanetKitOutboundDataSession * _Nullable, enum PlanetKitDataSessionFailReason))completion;
/// Makes a new inbound data session for the main room.
/// \param streamId The predefined ID for the app. The ID must be in the range [100, 999].
///
/// \param delegate The event callback for the inbound data session.
///
/// \param completion If successful, the completion handler returns an inbound data session. Otherwise, the completion handler returns <code>nil</code>.
///
- (void)makeInboundDataSessionWithStreamId:(uint32_t)streamId delegate:(id <PlanetKitInboundDataSessionDelegate> _Nonnull)delegate completion:(void (^ _Nonnull)(PlanetKitInboundDataSession * _Nullable, enum PlanetKitDataSessionFailReason))completion;
/// Ignores receiving data for the given stream ID.
/// remark:
///
/// In a conference, when <code>PlanetKitConferenceDelegate.dataSessionIncoming(_:streamId:subgroup:type:)</code> occurs, the user must either call <code>makeInboundDataSession(streamId:delegate:completion:)</code> to receive the incoming data or call this function to ignore receiving the incoming data.
/// To ignore receiving data for the incoming stream ID, call <code>unsupportInboundDataSession(streamId:)</code> in <code>PlanetKitConferenceDelegate.dataSessionIncoming(_:streamId:subgroup:type:)</code>.
- (void)unsupportInboundDataSessionWithStreamId:(uint32_t)streamId;
/// Gets the existing outbound data session with the stream ID.
- (PlanetKitOutboundDataSession * _Nullable)getOutboundDataSessionWithStreamId:(uint32_t)streamId SWIFT_WARN_UNUSED_RESULT;
/// Gets the existing inbound data session with the stream ID.
- (PlanetKitInboundDataSession * _Nullable)getInboundDataSessionWithStreamId:(uint32_t)streamId SWIFT_WARN_UNUSED_RESULT;
@end


@interface PlanetKitConference (SWIFT_EXTENSION(PlanetKit))
- (void)startMyScreenShareWithSubgroupName:(NSString * _Nullable)subgroupName completion:(void (^ _Nonnull)(BOOL))completion;
- (void)stopMyScreenShareWithCompletion:(void (^ _Nonnull)(BOOL))completion;
/// Stops the local user’s screen share with a reason code.
/// remark:
///
/// The <code>reason</code> value must be between 0 and 39.
- (void)stopMyScreenShareWithReason:(int32_t)reason completion:(void (^ _Nonnull)(BOOL))completion;
- (void)changeMyScreenShareDestinationWithSubgroupName:(NSString * _Nonnull)subgroupName completion:(void (^ _Nonnull)(BOOL))completion;
- (void)changeMyScreenShareDestinationToMainRoomWithCompletion:(void (^ _Nonnull)(BOOL))completion;
- (void)stopMyBroadcast;
@end




SWIFT_CLASS("_TtC9PlanetKit33PlanetKitConferenceConnectedParam")
@interface PlanetKitConferenceConnectedParam : NSObject
@property (nonatomic, readonly) BOOL isVideoHwCodecEnabled;
@property (nonatomic, readonly) BOOL isVideoShareModeSupported;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class PlanetKitConferencePeerListUpdateParam;
@class PlanetKitConferenceVideoUpdateParam;
@class PlanetKitConferencePeerHold;
@class PlanetKitConferenceScreenShareUpdateParam;
@class PlanetKitSubgroup;
@class PlanetKitConferenceSetSharedContent;
@class PlanetKitConferenceSubgroupUpdateParam;
@class PlanetKitConferenceExceptionMessage;

SWIFT_PROTOCOL("_TtP9PlanetKit27PlanetKitConferenceDelegate_")
@protocol PlanetKitConferenceDelegate
/// Called when the conference room is connected.
- (void)didConnect:(PlanetKitConference * _Nonnull)conference connected:(PlanetKitConferenceConnectedParam * _Nonnull)connected;
/// Called when the conference room is disconnected.
/// <ul>
///   <li>
///     <code>disconnected</code>: An additional parameter delivered when the call is disconnected. <code>PlanetKitDisconnectedParam.userCode</code> has a valid release code if <code>PlanetKitDisconnectedParam.reason</code> is <code>.userError</code>.
///   </li>
/// </ul>
- (void)didDisconnect:(PlanetKitConference * _Nonnull)conference disconnected:(PlanetKitDisconnectedParam * _Nonnull)disconnected;
/// Called if the peer list of the conference has changes in state.
- (void)peerListDidUpdate:(PlanetKitConference * _Nonnull)conference updated:(PlanetKitConferencePeerListUpdateParam * _Nonnull)updated;
/// Called if the peer’s video of the conference has changes in state.
- (void)peersVideoDidUpdate:(PlanetKitConference * _Nonnull)conference updated:(PlanetKitConferenceVideoUpdateParam * _Nonnull)updated;
@optional
- (void)didReceiveAppControlMessage:(PlanetKitConference * _Nonnull)conference message:(NSData * _Nonnull)message;
- (void)didDetectMyVideoNoSource:(PlanetKitConference * _Nonnull)conference;
- (void)didReceiveShortData:(PlanetKitConference * _Nonnull)conference senderId:(PlanetKitUserId * _Nonnull)senderId dataType:(NSString * _Nonnull)dataType data:(NSData * _Nonnull)data;
- (void)peersMicDidMute:(PlanetKitConference * _Nonnull)conference peers:(NSArray<PlanetKitConferencePeer *> * _Nonnull)peers;
- (void)peersMicDidUnmute:(PlanetKitConference * _Nonnull)conference peers:(NSArray<PlanetKitConferencePeer *> * _Nonnull)peers;
- (void)myMuteRequestedByPeer:(PlanetKitConference * _Nonnull)conference peer:(PlanetKitConferencePeer * _Nonnull)peer mute:(BOOL)mute;
- (void)peersDidHold:(PlanetKitConference * _Nonnull)conference peerHolds:(NSArray<PlanetKitConferencePeerHold *> * _Nonnull)peerHolds;
- (void)peersDidUnhold:(PlanetKitConference * _Nonnull)conference peers:(NSArray<PlanetKitConferencePeer *> * _Nonnull)peers;
- (void)screenShareDidUpdate:(PlanetKitConference * _Nonnull)conference updated:(PlanetKitConferenceScreenShareUpdateParam * _Nonnull)updated;
- (void)myScreenShareDidStopByHold:(PlanetKitConference * _Nonnull)conference;
- (void)dataSessionIncoming:(PlanetKitConference * _Nonnull)conference streamId:(uint32_t)streamId subgroup:(PlanetKitSubgroup * _Nullable)subgroup type:(enum PlanetKitDataSessionType)type;
- (void)didStartMyBroadcast:(PlanetKitConference * _Nonnull)conference;
- (void)didFinishMyBroadcast:(PlanetKitConference * _Nonnull)conference;
- (void)didErrorMyBroadcast:(PlanetKitConference * _Nonnull)conference error:(enum BroadcastError)error;
- (void)peersDidSetSharedContents:(PlanetKitConference * _Nonnull)conference sharedContents:(NSArray<PlanetKitConferenceSetSharedContent *> * _Nonnull)sharedContents;
- (void)peersDidUnsetSharedContents:(PlanetKitConference * _Nonnull)conference peers:(NSArray<PlanetKitConferencePeer *> * _Nonnull)peers;
- (void)peerDidSetExclusivelySharedContents:(PlanetKitConference * _Nonnull)conference peer:(PlanetKitConferencePeer * _Nonnull)peer data:(NSData * _Nonnull)data elapsed:(NSTimeInterval)seconds;
- (void)peerDidUnsetExclusivelySharedContents:(PlanetKitConference * _Nonnull)conference peer:(PlanetKitConferencePeer * _Nonnull)peer;
- (void)peerDidSetRoomSharedContents:(PlanetKitConference * _Nonnull)conference peerId:(PlanetKitUserId * _Nonnull)peerId data:(NSData * _Nonnull)data elapsed:(NSTimeInterval)seconds;
- (void)peerDidUnsetRoomSharedContents:(PlanetKitConference * _Nonnull)conference peerId:(PlanetKitUserId * _Nonnull)peerId;
- (void)peersDidUpdatePublicSubgroup:(PlanetKitConference * _Nonnull)conference updated:(PlanetKitConferenceSubgroupUpdateParam * _Nonnull)updated;
- (void)networkDidUnavailable:(PlanetKitConference * _Nonnull)conference willDisconnected:(NSTimeInterval)seconds;
- (void)networkDidReavailable:(PlanetKitConference * _Nonnull)conference;
- (void)exception:(PlanetKitConference * _Nonnull)conference exceptions:(NSArray<PlanetKitConferenceExceptionMessage *> * _Nonnull)exceptions;
@end

typedef SWIFT_ENUM(NSInteger, PlanetKitConferenceError, closed) {
  PlanetKitConferenceErrorMicNoSrc = 0,
  PlanetKitConferenceErrorCamNoSrc = 1,
  PlanetKitConferenceErrorUnknown = 2,
};

enum PlanetKitConferenceExceptionType : NSInteger;

SWIFT_CLASS("_TtC9PlanetKit35PlanetKitConferenceExceptionMessage")
@interface PlanetKitConferenceExceptionMessage : NSObject
@property (nonatomic, readonly, strong) PlanetKitConferencePeer * _Nonnull peer;
@property (nonatomic, readonly, strong) PlanetKitSubgroup * _Nonnull subgroup;
@property (nonatomic, readonly) enum PlanetKitConferenceExceptionType type;
@property (nonatomic, readonly, copy) NSString * _Nullable message;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, PlanetKitConferenceExceptionType, closed) {
  PlanetKitConferenceExceptionTypeNone = 0,
  PlanetKitConferenceExceptionTypePeerUsedUnsupportedFeature = 1,
  PlanetKitConferenceExceptionTypeUser = 2,
};


SWIFT_CLASS("_TtC9PlanetKit29PlanetKitConferenceJoinResult")
@interface PlanetKitConferenceJoinResult : NSObject
@property (nonatomic, readonly) enum PlanetKitStartFailReason reason;
@property (nonatomic, readonly, strong) PlanetKitConference * _Nullable conference;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC9PlanetKit24PlanetKitConferenceParam")
@interface PlanetKitConferenceParam : NSObject
@property (nonatomic, readonly, strong) PlanetKitUserId * _Nonnull myUserId;
@property (nonatomic, readonly, copy) NSString * _Nonnull roomId;
@property (nonatomic, readonly, copy) NSString * _Nonnull roomServiceId;
/// Represents the local user’s display name.
/// remark:
///
/// Maximum size of <code>displayName</code> is 128 bytes including null termination.
/// Any trailing part of the string that exceeds the maximum size is discarded.
@property (nonatomic, readonly, copy) NSString * _Nullable displayName;
@property (nonatomic, readonly, copy) NSString * _Nullable APIKey;
@property (nonatomic, readonly, copy) NSString * _Nullable accessToken;
@property (nonatomic, readonly, weak) id <PlanetKitConferenceDelegate> _Nullable delegate;
/// App server data for establishing a new conference.
/// remark:
///
/// Maximum size of <code>appServerData</code> is 4096 bytes including null termination.
/// If the size of <code>appServerData</code> exceed 4096 bytes, <code>joinConference(param:settings:)</code> will return <code>PlanetKitStartFailReason.tooLongAppServerData</code>.
@property (nonatomic, copy) NSString * _Nullable appServerData;
/// Initial media type
@property (nonatomic) enum PlanetKitMediaType mediaType;
- (nonnull instancetype)initWithMyUserId:(PlanetKitUserId * _Nonnull)myUserId roomId:(NSString * _Nonnull)roomId roomServiceId:(NSString * _Nonnull)roomServiceId displayName:(NSString * _Nullable)displayName delegate:(id <PlanetKitConferenceDelegate> _Nonnull)delegate APIKey:(NSString * _Nonnull)APIKey OBJC_DESIGNATED_INITIALIZER SWIFT_DEPRECATED_MSG("Due to a security reason, use init(myUserId:roomId:roomServiceId:displayName:delegate:accessToken:) instead");
- (nonnull instancetype)initWithMyUserId:(PlanetKitUserId * _Nonnull)myUserId roomId:(NSString * _Nonnull)roomId roomServiceId:(NSString * _Nonnull)roomServiceId displayName:(NSString * _Nullable)displayName delegate:(id <PlanetKitConferenceDelegate> _Nonnull)delegate accessToken:(NSString * _Nonnull)accessToken OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class PlanetKitHoldStatus;
@class PlanetKitSharedContents;

SWIFT_CLASS("_TtC9PlanetKit23PlanetKitConferencePeer")
@interface PlanetKitConferencePeer : NSObject
@property (nonatomic, readonly, strong) PlanetKitUserId * _Nonnull id;
@property (nonatomic, readonly) BOOL isDataSessionSupported;
/// Gets the current mute status.
@property (nonatomic, readonly) BOOL isMuted;
/// Gets the current hold status.
@property (nonatomic, readonly, strong) PlanetKitHoldStatus * _Nonnull holdStatus;
/// Gets all the names of the currently subscribed subgroups.
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable subgroupNames;
/// Gets the current subgroup name of video from the subgroup video event.
@property (nonatomic, readonly, copy) NSString * _Nullable currentVideoSubgroupName;
/// Gets the current subgroup name of screen share from the screen share event.
@property (nonatomic, readonly, copy) NSString * _Nullable currentScreenShareSubgroupName;
/// Gets the current shared contents.
@property (nonatomic, readonly, strong) PlanetKitSharedContents * _Nullable sharedContents;
@property (nonatomic, readonly) enum PlanetKitUserEquipmentType userEquipmentType;
@property (nonatomic, readonly, copy) NSString * _Nullable displayName;
@property (nonatomic, readonly, copy) NSString * _Nullable sipLocalIP;
@property (nonatomic, readonly, copy) NSString * _Nullable sipDeviceInfo;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class PlanetKitScreenShareStatus;
@class PlanetKitVolumeLevel;

@interface PlanetKitConferencePeer (SWIFT_EXTENSION(PlanetKit))
/// Gets the current peer’s video status.
/// remark:
///
/// The error code thrown is defined at <code>PlanetKitNSErrorCode</code>.
- (PlanetKitVideoStatus * _Nullable)videoStatusWithSubgroupName:(NSString * _Nullable)subgroupName error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Checks if this peer is sending screen share.
/// remark:
///
/// The error code thrown is defined at <code>PlanetKitNSErrorCode</code>.
- (PlanetKitScreenShareStatus * _Nullable)screenShareStatusWithSubgroupName:(NSString * _Nullable)subgroupName error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Gets the peer’s audio volume setting.
/// remark:
///
/// The volume setting range is in percentage from 0 to 110. The value 0 is muted, 100 is the original volume, and 110 amplifies the original volume to +9dB.
/// The error code thrown is defined at <code>PlanetKitNSErrorCode</code>.
- (PlanetKitVolumeLevel * _Nullable)volumeLevelSettingWithSubgroupName:(NSString * _Nullable)subgroupName error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
@end



SWIFT_CLASS("_TtC9PlanetKit27PlanetKitConferencePeerHold")
@interface PlanetKitConferencePeerHold : NSObject
@property (nonatomic, readonly, strong) PlanetKitConferencePeer * _Nonnull peer;
@property (nonatomic, readonly, copy) NSString * _Nullable reason;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC9PlanetKit38PlanetKitConferencePeerListUpdateParam")
@interface PlanetKitConferencePeerListUpdateParam : NSObject
@property (nonatomic, readonly, strong) PlanetKitSubgroup * _Nonnull subgroup;
@property (nonatomic, readonly, copy) NSArray<PlanetKitConferencePeer *> * _Nonnull addedPeers;
@property (nonatomic, readonly, copy) NSArray<PlanetKitConferencePeer *> * _Nonnull removedPeers;
@property (nonatomic, readonly) NSInteger totalPeersCount;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC9PlanetKit33PlanetKitConferencePeerVideoPause")
@interface PlanetKitConferencePeerVideoPause : NSObject
@property (nonatomic, readonly, strong) PlanetKitConferencePeer * _Nonnull peer;
@property (nonatomic, readonly) enum PlanetKitVideoPauseReason reason;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum PlanetKitScreenShareState : NSInteger;

SWIFT_CLASS("_TtC9PlanetKit41PlanetKitConferenceScreenShareUpdateParam")
@interface PlanetKitConferenceScreenShareUpdateParam : NSObject
@property (nonatomic, readonly, strong) PlanetKitUserId * _Nonnull peerId;
@property (nonatomic, readonly, copy) NSString * _Nullable subgroupName;
@property (nonatomic, readonly) enum PlanetKitScreenShareState state;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC9PlanetKit35PlanetKitConferenceSetSharedContent")
@interface PlanetKitConferenceSetSharedContent : NSObject
@property (nonatomic, readonly, strong) PlanetKitConferencePeer * _Nonnull peer;
@property (nonatomic, readonly, copy) NSData * _Nonnull data;
@property (nonatomic, readonly) NSTimeInterval elapsedSeconds;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, PlanetKitConferenceState, closed) {
  PlanetKitConferenceStateIdle = 0,
  PlanetKitConferenceStateTrying = 1,
  PlanetKitConferenceStateConnected = 2,
  PlanetKitConferenceStateDisconnected = 3,
};

@class PlanetKitConferenceSubgroupUpdatedPeer;

SWIFT_CLASS("_TtC9PlanetKit38PlanetKitConferenceSubgroupUpdateParam")
@interface PlanetKitConferenceSubgroupUpdateParam : NSObject
@property (nonatomic, readonly, copy) NSArray<PlanetKitConferenceSubgroupUpdatedPeer *> * _Nonnull updatedPeers;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC9PlanetKit38PlanetKitConferenceSubgroupUpdatedPeer")
@interface PlanetKitConferenceSubgroupUpdatedPeer : NSObject
@property (nonatomic, readonly, strong) PlanetKitConferencePeer * _Nonnull peer;
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull subscribedSubgroupNames;
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull unsubscribedSubgroupNames;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class PlanetKitConferenceVideoUpdatedPeer;

SWIFT_CLASS("_TtC9PlanetKit35PlanetKitConferenceVideoUpdateParam")
@interface PlanetKitConferenceVideoUpdateParam : NSObject
@property (nonatomic, readonly, strong) PlanetKitSubgroup * _Nonnull subgroup;
@property (nonatomic, readonly, copy) NSArray<PlanetKitConferenceVideoUpdatedPeer *> * _Nonnull videoUpdatedPeers;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC9PlanetKit35PlanetKitConferenceVideoUpdatedPeer")
@interface PlanetKitConferenceVideoUpdatedPeer : NSObject
@property (nonatomic, readonly, strong) PlanetKitConferencePeer * _Nonnull peer;
@property (nonatomic, readonly, strong) PlanetKitVideoStatus * _Nonnull videoStatus;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, PlanetKitDataSessionClosedReason, closed) {
/// Data session has ended.
  PlanetKitDataSessionClosedReasonSessionEnd = 0,
/// Unexpected error occurred internally.
  PlanetKitDataSessionClosedReasonInternal = 1,
/// Data session ID is unsupported by the peer.
  PlanetKitDataSessionClosedReasonUnsupported = 2,
};


typedef SWIFT_ENUM(NSInteger, PlanetKitDataSessionFailReason, closed) {
/// Success.
  PlanetKitDataSessionFailReasonNone = 0,
/// An unexpected error occurred internally.
  PlanetKitDataSessionFailReasonInternal = 1,
/// Cannot make an inbound data session without an incoming event (<code>PlanetKitCallDelegate.dataSessionIncoming(_:streamId:type:)</code> or <code>PlanetKitConferenceDelegate.dataSessionIncoming(_:streamId:type:)</code>).
  PlanetKitDataSessionFailReasonNotIncoming = 3,
/// The data session ID already exists.
/// You can get the data session instance by calling <code>getOutboundDataSession(streamId:)</code> or <code>getInboundDataSession(streamId:)</code>.
  PlanetKitDataSessionFailReasonAlreadyExist = 4,
/// The data session ID is invalid. Valid IDs are 100 to 999.
  PlanetKitDataSessionFailReasonInvalidId = 5,
/// The data session type is invalid.
  PlanetKitDataSessionFailReasonInvalidType = 6,
};

/// Supported data session types.
/// remark:
///
/// The maximum chunk size for each data stream type is 128 KBytes for <code>.reliableMsg</code>, <code>reliableBytes</code> and 4 MBytes for <code>.unreliableBytes</code>, <code>.unreliableMsg</code>.
typedef SWIFT_ENUM(NSInteger, PlanetKitDataSessionType, closed) {
  PlanetKitDataSessionTypeUnknown = 0,
  PlanetKitDataSessionTypeReliableMsg = 1,
  PlanetKitDataSessionTypeReliableBytes = 2,
  PlanetKitDataSessionTypeUnreliableBytes = 3,
  PlanetKitDataSessionTypeUnreliableMsg = 4,
};



SWIFT_CLASS("_TtC9PlanetKit22PlanetKitDeviceHandler")
@interface PlanetKitDeviceHandler : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PlanetKitDeviceHandler * _Nonnull shared;)
+ (PlanetKitDeviceHandler * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic) UIInterfaceOrientation orientation;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Describes the disconnect reasons.
/// remark:
///
/// See more details at https://docs.lineplanet.me/help/troubleshooting/troubleshooting-disconnect-reason/.
typedef SWIFT_ENUM(NSInteger, PlanetKitDisconnectReason, closed) {
/// [Both][Caller, Callee, Participant] Disconnected the call without exceptions.
  PlanetKitDisconnectReasonNormal = 1001,
/// [Both][Callee, CloudServer]
/// <ul>
///   <li>
///     1:1 Call: Responder rejects a call.
///   </li>
///   <li>
///     Conference: Joining previously joined conference that the user did not properly leave (e.g. due to a crash) is declined until the user is disconnected by the server.
///   </li>
/// </ul>
  PlanetKitDisconnectReasonDecline = 1002,
/// [Both][Caller, Callee, Participant] Received a cellular call during the PlanetKit call.
  PlanetKitDisconnectReasonCellCall = 1003,
/// [Both][Caller, Callee, Participant, CloudServer] Disconnected by PlanetKit’s internal error.
  PlanetKitDisconnectReasonInternalError = 1109,
/// [Both][Caller, Callee, AppServer]
/// Application defined error. userCode is accompanied.
/// <ul>
///   <li>
///     For events, userCode is in PlanetKitDisconnectedParam.
///   </li>
///   <li>
///     For API, userErrorReleasePhrase is the parameter of ‘PlanetKitCall.EndCall()’.
///   </li>
/// </ul>
/// 1:1 call: userCode is defined by the call peer.
/// Group call: userCode is defined by AppServer. For example)
/// https://docs.lineplanet.me/server-api/server-api-kickout
  PlanetKitDisconnectReasonUserError = 1110,
/// [Both][Caller, Callee, Participant] Disconnected by an OS-specific error.
  PlanetKitDisconnectReasonInternalKitError = 1111,
/// [Both][Caller, Callee, Participant] Audio source (e.g. mic) has not sent any audio data for a while.
  PlanetKitDisconnectReasonMicNoSource = 1112,
/// [1:1][Caller] Initiator disconnected the call before the responder answers.
  PlanetKitDisconnectReasonCancel = 1201,
/// [1:1][Callee] Responder is calling.
  PlanetKitDisconnectReasonBusy = 1202,
/// [1:1][Caller] Responder doesn’t answer for 60 seconds.
  PlanetKitDisconnectReasonNoAnswer = 1203,
/// [Both][CloudServer] The initiator or the participant already has an incoming call but not received push yet.
  PlanetKitDisconnectReasonAlreadyGotACall = 1204,
/// [Both][CloudServer] The same ID pair (user-id and service-id) is calling in another device.
  PlanetKitDisconnectReasonMultiDeviceInUse = 1205,
/// [1:1][CloudServer] Responder using the same ID pair (user-id and service-id) answered the call in another device.
  PlanetKitDisconnectReasonMultiDeviceAnswer = 1206,
/// [1:1][CloudServer] Responder using the same ID pair(user-id and service-id) declined the call in another device.
  PlanetKitDisconnectReasonMultiDeviceDecline = 1207,
/// [Both][Caller, Callee, Participant, CloudServer] Network is unavailable to keep a call.
  PlanetKitDisconnectReasonNetworkUnstable = 1301,
/// [1:1][CloudServer] LINE Planet GW failed to call Notify or notify_cb returned a failure. Please check AppServer or Notify url.
  PlanetKitDisconnectReasonPushError = 1302,
/// [Both][CloudServer] Authentication failure
  PlanetKitDisconnectReasonAuthError = 1303,
/// [Both][CloudServer] The call was already released. Example: Initiator already canceled.
  PlanetKitDisconnectReasonReleasedCall = 1304,
/// [Both][CloudServer] Server disconnected a call because of internal error.
  PlanetKitDisconnectReasonServerInternalError = 1305,
/// [Both][Caller, Callee, Participant] Disconnected due to the network being unavailable for a certain period of time.
  PlanetKitDisconnectReasonUnavailableNetwork = 1308,
/// [Both][Caller, Callee, Participant] Application process is terminated.
  PlanetKitDisconnectReasonAppDestroy = 1309,
/// [Both][Caller, Callee, Participant] Application is in sleep mode.
  PlanetKitDisconnectReasonSystemSleep = 1310,
/// [Both][Caller, Callee, Participant] Application is in logoff mode.
  PlanetKitDisconnectReasonSystemLogOff = 1311,
/// [Both][Caller, Callee, Participant] The call is not connected because the MTU is exceeded.
  PlanetKitDisconnectReasonMtuExceeded = 1312,
/// [Both][CloudServer] Planet Cloud Server failed to deliver app server data to AppServer
  PlanetKitDisconnectReasonAppServerDataError = 1313,
/// [Group][CloudServer] The number of participants in this room is full.
  PlanetKitDisconnectReasonRoomIsFull = 1401,
/// [Group][CloudServer] Server kicks out a user when the user stays in a conference room alone for a long time.
  PlanetKitDisconnectReasonAloneKickOut = 1402,
/// [Group][CloudServer] The room is destroyed because all remaining participants left before the other participant’s <code>PlanetKitManager.joinConference(param:settings:)</code> is complete.
  PlanetKitDisconnectReasonRoomNotFound = 1404,
/// [Group][Participant] Disconnected by trying to join from another instance.
  PlanetKitDisconnectReasonAnotherInstanceTryToJoin = 1405,
/// [Both][CloudServer] Invalid Access token
  PlanetKitDisconnectReasonServiceAccessTokenError = 1501,
/// [Both][CloudServer] Unacceptable character is used in service-id or user-id.
/// Please refer to https://docs.lineplanet.me/overview/glossary#service-id.
  PlanetKitDisconnectReasonServiceInvalidID = 1502,
/// [Both][CloudServer] Under maintenance
  PlanetKitDisconnectReasonServiceMaintenance = 1503,
/// [Both][CloudServer]  LINE Planet GW is busy for now.
  PlanetKitDisconnectReasonServiceBusy = 1504,
/// [Both][CloudServer] LINE Planet GW internal error. Join failure in old version(PlanetKit under 3.6) because the room has the SUBGROUP room attribute (Created by PlanetKit 3.6 or above)
  PlanetKitDisconnectReasonServiceInternalError = 1505,
/// [Both][Caller, Participant] Could not make an HTTP request.
/// Please check the user’s network environment.
/// <ol>
///   <li>
///     Firewall https://docs.lineplanet.me/help/troubleshooting/troubleshooting-firewall
///   </li>
///   <li>
///     Client vaccine program
///   </li>
/// </ol>
  PlanetKitDisconnectReasonServiceHttpError = 1506,
/// See <code>serviceHttpError</code>
  PlanetKitDisconnectReasonServiceHttpConnectionTimeOut = 1507,
/// [Both][Caller, Participant]  SSL peer certificate or SSH remote key was not OK.
  PlanetKitDisconnectReasonServiceHttpInvalidPeerCert = 1508,
/// See <code>serviceHttpError</code>
  PlanetKitDisconnectReasonServiceHttpConnectFail = 1509,
/// [Both][Caller, Participant] Wrong URL format or could not resolve host or proxy name.
  PlanetKitDisconnectReasonServiceHttpInvalidUrl = 1510,
/// [Both][CloudServer] The current PlanetKit version is deprecated. Need to upgrade.
  PlanetKitDisconnectReasonServiceIncompatiblePlanetKitVer = 1511,
  PlanetKitDisconnectReasonUnknown = -1,
};

typedef SWIFT_ENUM(NSInteger, PlanetKitDisconnectSource, closed) {
  PlanetKitDisconnectSourceUndefined = 0,
  PlanetKitDisconnectSourceCallee = 1,
  PlanetKitDisconnectSourceCaller = 2,
  PlanetKitDisconnectSourceParticipant = 3,
  PlanetKitDisconnectSourceCloudServer = 4,
  PlanetKitDisconnectSourceAppServer = 5,
};


SWIFT_CLASS("_TtC9PlanetKit26PlanetKitDisconnectedParam")
@interface PlanetKitDisconnectedParam : NSObject
@property (nonatomic, readonly) enum PlanetKitDisconnectSource source;
@property (nonatomic, readonly) enum PlanetKitDisconnectReason reason;
@property (nonatomic, readonly, copy) NSString * _Nullable userCode;
@property (nonatomic, readonly) BOOL byRemote;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



SWIFT_CLASS("_TtC9PlanetKit18PlanetKitFrameRate")
@interface PlanetKitFrameRate : NSObject
@property (nonatomic, readonly) int32_t minFps;
@property (nonatomic, readonly) int32_t maxFps;
- (nonnull instancetype)initWithMinFps:(int32_t)minFps maxFps:(int32_t)maxFps OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC9PlanetKit19PlanetKitHoldStatus")
@interface PlanetKitHoldStatus : NSObject
@property (nonatomic, readonly) BOOL isOnHold;
@property (nonatomic, readonly, copy) NSString * _Nullable holdReason;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC9PlanetKit27PlanetKitInboundDataSession")
@interface PlanetKitInboundDataSession : NSObject
@property (nonatomic, readonly) uint32_t streamId;
/// This property is only available in the conference.
@property (nonatomic, readonly, copy) NSString * _Nullable subgroupName;
@property (nonatomic, readonly) enum PlanetKitDataSessionType type;
@property (nonatomic, weak) id <PlanetKitInboundDataSessionDelegate> _Nullable delegate;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



SWIFT_PROTOCOL("_TtP9PlanetKit35PlanetKitInboundDataSessionDelegate_")
@protocol PlanetKitInboundDataSessionDelegate
- (void)didClose:(PlanetKitInboundDataSession * _Nonnull)session reason:(enum PlanetKitDataSessionClosedReason)reason;
- (void)didReceive:(PlanetKitInboundDataSession * _Nonnull)session peerId:(PlanetKitUserId * _Nonnull)peerId data:(NSData * _Nonnull)data timestamp:(uint64_t)timestamp offset:(uint64_t)offset;
@end

enum PlanetKitLogLevel : int32_t;
enum PlanetKitLogSizeLimit : NSInteger;

SWIFT_CLASS("_TtC9PlanetKit30PlanetKitInitialSettingBuilder")
@interface PlanetKitInitialSettingBuilder : NSObject
/// Disables PlanetKit from handling the camera internally.
/// remark:
///
/// If PlanetKit is configured to use video at a call or conference, the camera device is automatically started by default.
/// If you want to handle the camera on your own, you need to disable this feature.
- (PlanetKitInitialSettingBuilder * _Nonnull)withDisableKitCameraKeyWithDisable:(BOOL)disable SWIFT_WARN_UNUSED_RESULT;
- (PlanetKitInitialSettingBuilder * _Nonnull)withSetKitVideoFormatBGRA32KeyWithBgra32:(BOOL)bgra32 SWIFT_WARN_UNUSED_RESULT;
/// remark:
///
/// This configuration takes precedence over <code>withSetKitVideoFormatBGRA32Key(bgra32:)</code> for <code>PlanetKitCamera.format</code>.
/// It means if you set this configuration, it will affect <code>PlanetKitCamera.format</code> and ignore the config given by <code>withSetKitVideoFormatBGRA32Key(bgra32:)</code>.
- (PlanetKitInitialSettingBuilder * _Nonnull)withSetKitCameraFormatBGRA32KeyWithBgra32:(BOOL)bgra32 SWIFT_WARN_UNUSED_RESULT;
- (PlanetKitInitialSettingBuilder * _Nonnull)withSetKitServerKeyWithServerUrl:(NSString * _Nonnull)serverUrl SWIFT_WARN_UNUSED_RESULT;
/// Sets the configuration of logging.
/// remark:
///
/// PlanetKit does not write a log file by default unless you call this function.
/// If you want to record minimal logs in a release build, we recommend using the <code>.vital</code> log level and <code>.small</code> log size.
/// \param level Sets the log level.
///
/// \param enable Sets whether to enable writing a log.
///
/// \param logSize Sets the maximum log file size.
///
- (PlanetKitInitialSettingBuilder * _Nonnull)withEnableKitLogKeyWithLevel:(enum PlanetKitLogLevel)level enable:(BOOL)enable logSize:(enum PlanetKitLogSizeLimit)logSize SWIFT_WARN_UNUSED_RESULT;
- (PlanetKitInitialSettingBuilder * _Nullable)withSetKitBasePathKeyWithPath:(NSString * _Nonnull)path error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (PlanetKitInitialSettingBuilder * _Nonnull)withSetKitLogFilePathKeyWithFilePath:(NSString * _Nonnull)filePath SWIFT_WARN_UNUSED_RESULT;
/// Disables automatic adaptation of the default audio route.
/// remark:
///
/// The default value is <code>false</code>.
/// PlanetKit adjusts the default audio route when the audio device changes.
/// If the current route is the built-in handset and the media is video, then it tries to change to speaker phone.
/// If the current route is an external headset, then it tries to change to Bluetooth by HFP, LE, A2DP order or not.
/// You can disable this option by setting it to <code>true</code>.
- (PlanetKitInitialSettingBuilder * _Nonnull)withDisableDefaultAudioRouteKeyWithDisable:(BOOL)disable SWIFT_WARN_UNUSED_RESULT;
- (PlanetKitInitialSettingBuilder * _Nonnull)withRecordingAudioFileKeyWithMic:(BOOL)mic spk:(BOOL)spk SWIFT_WARN_UNUSED_RESULT;
- (PlanetKitInitialSettingBuilder * _Nonnull)withRecordingVideoFrameFileKeyWithCam:(BOOL)cam peers:(NSArray<PlanetKitUserId *> * _Nonnull)peers SWIFT_WARN_UNUSED_RESULT;
- (NSDictionary<NSString *, id> * _Nonnull)build SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC9PlanetKit25PlanetKitInterceptedAudio")
@interface PlanetKitInterceptedAudio : NSObject
@property (nonatomic, readonly) uint32_t sampleRate;
@property (nonatomic, readonly) uint32_t channel;
@property (nonatomic, readonly) enum PlanetKitAudioSampleType sampleType;
@property (nonatomic, readonly) uint32_t sampleCount;
@property (nonatomic, readonly) int64_t seq;
@property (nonatomic, copy) NSData * _Nonnull data;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC9PlanetKit37PlanetKitJoinConferenceSettingBuilder")
@interface PlanetKitJoinConferenceSettingBuilder : NSObject
/// Allows a conference without a microphone.
/// remark:
///
/// The default value is <code>false</code>.
/// When this value is <code>false</code>, if the system can’t access the microphone, it will cause <code>PlanetKitDisconnectReason.micNoSource</code> and end the call.
/// If you want to keep the conference without microphone access, you should set this to <code>true</code>.
- (PlanetKitJoinConferenceSettingBuilder * _Nonnull)withAllowConferenceWithoutMicKeyWithAllow:(BOOL)allow SWIFT_WARN_UNUSED_RESULT;
/// Sets preferred maximum video encoding settings.
/// remark:
///
/// The capability will be set internally by default according to the device type.
/// The default capability is <code>PlanetKitVideoCapability.conferenceSendDefault</code>.
- (PlanetKitJoinConferenceSettingBuilder * _Nonnull)withMyVideoSendCapabilityKeyWithCapability:(PlanetKitVideoCapability * _Nonnull)capability SWIFT_WARN_UNUSED_RESULT;
/// Sets preferred H/W codec usage settings.
/// remark:
///
/// The default value is <code>true</code>.
- (PlanetKitJoinConferenceSettingBuilder * _Nonnull)withMyVideoRecvPreferredHwCodecKeyWithEnable:(BOOL)enable SWIFT_WARN_UNUSED_RESULT;
/// Enables sending and receiving screen share video.
/// remark:
///
/// This setting is supported only for iOS.
/// The default setting is ‘false’, so if you don’t want to use screen share, do not use this key.
/// Set information for interworking with the broadcast extension.
- (PlanetKitJoinConferenceSettingBuilder * _Nonnull)withEnableScreenShareKeyWithBroadcastPort:(uint16_t)broadcastPort broadcastPeerToken:(NSString * _Nonnull)broadcastPeerToken broadcastMyToken:(NSString * _Nonnull)broadcastMyToken SWIFT_WARN_UNUSED_RESULT;
/// Sets the maximum network link bandwidth for sending.
/// remark:
///
/// If the <code>kbps</code> value is 0 or not given, it will use the internal value by default.
- (PlanetKitJoinConferenceSettingBuilder * _Nonnull)withMaxSendLinkBandwidthKeyWithKbps:(uint32_t)kbps SWIFT_WARN_UNUSED_RESULT;
/// Sets the maximum network link bandwidth for receiving.
/// remark:
///
/// If the <code>kbps</code> value is 0 or not given, it will use the internal value by default.
- (PlanetKitJoinConferenceSettingBuilder * _Nonnull)withMaxRecvLinkBandwidthKeyWithKbps:(uint32_t)kbps SWIFT_WARN_UNUSED_RESULT;
/// Sets the preferred bitrate according to a video resolution.
/// remark:
///
/// If the <code>kbps</code> value is 0 or not given, it will use the internal value by default.
- (PlanetKitJoinConferenceSettingBuilder * _Nullable)withPreferredVideoResolutionBitrateKeyWithResolution:(enum PlanetKitVideoResolution)resolution kbps:(uint32_t)kbps error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Ignores VPIO service configuration.
- (PlanetKitJoinConferenceSettingBuilder * _Nonnull)withIgnoreVpioServiceConfigKeyWithIgnore:(BOOL)ignore SWIFT_WARN_UNUSED_RESULT;
/// Disables MLNS and enables WebRTC NS.
/// remark:
///
/// The MLNS (Multi Level Noise Suppressor, or Machine Learning based Noise Suppressor) will be activated by default, if the machine has sufficient CPU power.
/// But, sometimes it produces unintended results and if you don’t want this, you can disable the MLNS feature by using this function.
/// Currently, the MLNS is disabled by default in iOS.
- (PlanetKitJoinConferenceSettingBuilder * _Nonnull)withDisableMLNSKeyWithDisable:(BOOL)disable SWIFT_WARN_UNUSED_RESULT;
/// Enables PlanetKit statistics.
/// remark:
///
/// Enable the PlanetKit statistics feature to use <code>PlanetKitCall.statistics</code>.
/// Statistics will be updated at 200-millisecond intervals.
- (PlanetKitJoinConferenceSettingBuilder * _Nonnull)withEnableStatisticsKeyWithEnable:(BOOL)enable SWIFT_WARN_UNUSED_RESULT;
/// Changes to a custom microphone controllable.
/// remark:
///
/// This is useful when a custom microphone controllable should be used for a conference from the beginning.
- (PlanetKitJoinConferenceSettingBuilder * _Nonnull)withCustomMicKeyWithMic:(id <PlanetKitAudioMicControllable> _Nonnull)mic SWIFT_WARN_UNUSED_RESULT;
/// Changes to a custom speaker controllable.
/// remark:
///
/// This is useful when a custom speaker controllable should be used for a conference from the beginning.
- (PlanetKitJoinConferenceSettingBuilder * _Nonnull)withCustomSpkKeyWithSpk:(id <PlanetKitAudioSpkControllable> _Nonnull)spk SWIFT_WARN_UNUSED_RESULT;
/// Changes to a custom camera controllable.
/// remark:
///
/// This is useful when a custom camera controllable should be used for a conference from the beginning.
- (PlanetKitJoinConferenceSettingBuilder * _Nonnull)withCustomCameraKeyWithCamera:(id <PlanetKitCameraControllable> _Nonnull)camera SWIFT_WARN_UNUSED_RESULT;
/// Changes to a custom screen controllable.
/// remark:
///
/// This is useful when a custom screen controllable should be used for a conference from the beginning.
- (PlanetKitJoinConferenceSettingBuilder * _Nonnull)withCustomScreenKeyWithScreen:(id <PlanetKitScreenControllable> _Nonnull)screen SWIFT_WARN_UNUSED_RESULT;
/// Changes to a custom camera stream.
/// remark:
///
/// This is useful when a custom camera stream should be used to implement a video modifier before the conference starts.
- (PlanetKitJoinConferenceSettingBuilder * _Nonnull)withCustomCameraStreamKeyWithVideoStream:(PlanetKitVideoStream * _Nonnull)videoStream SWIFT_WARN_UNUSED_RESULT;
/// Changes to a custom screen share stream.
/// remark:
///
/// This is useful when a custom screen share stream should be used to implement a video modifier before the conference starts.
- (PlanetKitJoinConferenceSettingBuilder * _Nonnull)withCustomScreenShareStreamKeyWithVideoStream:(PlanetKitVideoStream * _Nonnull)videoStream SWIFT_WARN_UNUSED_RESULT;
/// Sets CallKit settings.
/// remark:
///
/// Set <code>PlanetKitCallKitSetting.type</code> to <code>.planetKit</code> and set <code>PlanetKitCallKitSetting.param</code> to use PlanetKit’s internal CallKit.
/// Set <code>PlanetKitCallKitSetting.type</code> to <code>.user</code> if the application uses its own implementation of CallKit.
/// Make sure you call <code>PlanetKitCall.notifyCallKitAudioActivation()</code> on <code>CXProviderDelegate.provider(_ provider: CXProvider, didActivate audioSession: AVAudioSession)</code>.
/// Otherwise, set <code>PlanetKitCallKitSetting.type</code> to <code>.none</code>.
/// If <code>withCallKitSettingsKey</code> is not used, <code>PlanetKitCallKitSetting.type</code> will be <code>.none</code> by default.
/// Please note that it is recommended that CallKit and PushKit are used together to handle VoIP push notifications.
/// See more details at the link below.
/// https://developer.apple.com/documentation/pushkit/responding_to_voip_notifications_from_pushkit
- (PlanetKitJoinConferenceSettingBuilder * _Nonnull)withCallKitSettingsKeyWithSetting:(PlanetKitCallKitSetting * _Nonnull)setting SWIFT_WARN_UNUSED_RESULT;
/// Sets whether to enable the updated event of audio description.
/// remark:
///
/// The default value is enabled.
- (PlanetKitJoinConferenceSettingBuilder * _Nonnull)withEnableAudioDescriptionKeyWithEnable:(BOOL)enable SWIFT_WARN_UNUSED_RESULT;
/// Changes the interval for volume level updates.
/// remark:
///
/// The default interval is 0.5 seconds.
/// The minimum value is 0.2 seconds. If less, the interval is set to 0.2 seconds.
/// This interval value affects <code>PlanetKitConference.setPeerAudioDescriptionReceiver(_:)</code> and <code>PlanetKitConference.setMyAudioDescriptionReceiver(_:)</code>.
- (PlanetKitJoinConferenceSettingBuilder * _Nonnull)withAudioDescriptionUpdateIntervalKeyWithInterval:(NSTimeInterval)interval SWIFT_WARN_UNUSED_RESULT;
- (PlanetKitJoinConferenceSettingBuilder * _Nullable)withSetEndToneKeyWithFileResourceUrl:(NSURL * _Nonnull)fileResourceUrl error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (NSDictionary<NSString *, id> * _Nonnull)build SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@protocol PlanetKitLogObserver;

SWIFT_CLASS("_TtC9PlanetKit12PlanetKitLog")
@interface PlanetKitLog : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) PlanetKitLog * _Nonnull shared;)
+ (PlanetKitLog * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
+ (void)setShared:(PlanetKitLog * _Nonnull)value;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (void)setErrorObservableWithObserver:(id <PlanetKitLogObserver> _Nullable)observer;
- (void)resetAllObserver;
+ (void)i:(SWIFT_NOESCAPE NSString * _Nonnull (^ _Nonnull)(void))message :(NSInteger)line;
+ (void)v:(SWIFT_NOESCAPE NSString * _Nonnull (^ _Nonnull)(void))message :(NSInteger)line;
+ (void)e:(SWIFT_NOESCAPE NSString * _Nonnull (^ _Nonnull)(void))message :(NSInteger)line;
+ (void)c:(SWIFT_NOESCAPE NSString * _Nonnull (^ _Nonnull)(void))message :(NSInteger)line;
@end




typedef SWIFT_ENUM(int32_t, PlanetKitLogLevel, closed) {
  PlanetKitLogLevelDetailed = 5,
  PlanetKitLogLevelSimple = 4,
  PlanetKitLogLevelSilent = 0,
};


SWIFT_PROTOCOL("_TtP9PlanetKit20PlanetKitLogObserver_")
@protocol PlanetKitLogObserver
- (void)kitLogDidWrite:(enum PlanetKitLogLevel)level message:(NSString * _Nonnull)message;
@end

typedef SWIFT_ENUM(NSInteger, PlanetKitLogSizeLimit, closed) {
/// The maximum log size is 16MB.
  PlanetKitLogSizeLimitSmall = 0,
/// The maximum log size is 64MB.
  PlanetKitLogSizeLimitMedium = 1,
/// The maximum log size is 256MB.
  PlanetKitLogSizeLimitLarge = 2,
/// The maximum log size is unlimited.
  PlanetKitLogSizeLimitUnlimited = 3,
};

@protocol PlanetKitMTKViewDelegate;
@class NSNumber;
enum PlanetKitMirroredType : NSInteger;
enum PlanetKitRenderingPolicy : NSInteger;
@protocol MTLDevice;
@class NSCoder;

SWIFT_CLASS("_TtC9PlanetKit16PlanetKitMTKView")
@interface PlanetKitMTKView : MTKView
/// Sets the delegate to receive draw events.
@property (nonatomic, weak) id <PlanetKitMTKViewDelegate> _Nullable drawDelegate;
/// If the first frame of video is rendered, the <code>isFirstFrameDrawn</code> will return <code>true</code>.
@property (nonatomic, readonly) BOOL isFirstFrameDrawn;
/// If you want to change rotation of video, set rotation with <code>PlanetKitVideoRotation</code> integer type value.
/// remark:
///
/// The default value is <code>nil</code>.
@property (nonatomic, strong) NSNumber * _Nullable rotation;
/// Represents the mirrored state applied when the video is displayed.
/// remark:
///
/// The default value is <code>.auto</code>.
@property (nonatomic) enum PlanetKitMirroredType mirroredType;
/// Sets the rendering algorithm.
/// remark:
///
/// The default value is <code>.doubleBuffering</code> and we do not recommend changing this value.
@property (nonatomic, readonly) enum PlanetKitRenderingPolicy renderingPolicy;
- (nonnull instancetype)initWithFrame:(CGRect)frame device:(id <MTLDevice> _Nullable)device OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame device:(id <MTLDevice> _Nullable)device renderingPolicy:(enum PlanetKitRenderingPolicy)renderingPolicy OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (void)clear;
@end


@interface PlanetKitMTKView (SWIFT_EXTENSION(PlanetKit)) <PlanetKitVideoOutputDelegate>
- (void)videoOutput:(PlanetKitVideoBuffer * _Nonnull)videoBuffer;
@end


@interface PlanetKitMTKView (SWIFT_EXTENSION(PlanetKit))
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL isMetalAvailable;)
+ (BOOL)isMetalAvailable SWIFT_WARN_UNUSED_RESULT;
@end

@class PlanetKitMTKViewResolution;

SWIFT_PROTOCOL("_TtP9PlanetKit24PlanetKitMTKViewDelegate_")
@protocol PlanetKitMTKViewDelegate
- (void)didDrawFirstFrame:(PlanetKitMTKView * _Nonnull)view;
@optional
- (void)didChangeFrameResolution:(PlanetKitMTKView * _Nonnull)view oldResolution:(PlanetKitMTKViewResolution * _Nonnull)oldResolution newResolution:(PlanetKitMTKViewResolution * _Nonnull)newResolution;
@end

enum PlanetKitVideoRotation : int32_t;

SWIFT_CLASS("_TtC9PlanetKit26PlanetKitMTKViewResolution")
@interface PlanetKitMTKViewResolution : NSObject
@property (nonatomic, readonly) NSInteger width;
@property (nonatomic, readonly) NSInteger height;
@property (nonatomic, readonly) enum PlanetKitVideoRotation rotation;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC9PlanetKit31PlanetKitMakeCallSettingBuilder")
@interface PlanetKitMakeCallSettingBuilder : NSObject
/// Controls whether the local user’s video starts immediately or not when the peer calls <code>enableVideo(completion:)</code>.
/// The default value is <code>PlanetKitResponseOnEnableVideo.pause</code>.
/// See more on <code>PlanetKitResponseOnEnableVideo</code> and
/// visit https://docs.lineplanet.me/iosmacos/extended-functions/enable-video-call-from-audio-call.
- (PlanetKitMakeCallSettingBuilder * _Nonnull)withResponseOnEnableVideoWithResponse:(enum PlanetKitResponseOnEnableVideo)response SWIFT_WARN_UNUSED_RESULT;
/// Allows a call without a microphone.
/// remark:
///
/// The default value is <code>false</code>.
/// When this value is <code>false</code>, if the system can’t access the microphone, it will cause <code>PlanetKitDisconnectReason.micNoSource</code> and end the call.
/// If you want to keep the call without microphone access, you should set this to <code>true</code>.
- (PlanetKitMakeCallSettingBuilder * _Nonnull)withAllowCallWithoutMicKeyWithAllow:(BOOL)allow SWIFT_WARN_UNUSED_RESULT;
- (PlanetKitMakeCallSettingBuilder * _Nullable)withSetRingbackToneKeyWithFileResourceUrl:(NSURL * _Nonnull)fileResourceUrl error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (PlanetKitMakeCallSettingBuilder * _Nullable)withSetEndToneKeyWithFileResourceUrl:(NSURL * _Nonnull)fileResourceUrl error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (PlanetKitMakeCallSettingBuilder * _Nullable)withSetHoldToneKeyWithFileResourceUrl:(NSURL * _Nonnull)fileResourceUrl error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Sets preferred maximum video encoding settings.
/// remark:
///
/// The capability will be set internally by default according to the device type.
/// The default capability is <code>PlanetKitVideoCapability.callSendDefault</code>.
- (PlanetKitMakeCallSettingBuilder * _Nonnull)withMyVideoSendCapabilityKeyWithCapability:(PlanetKitVideoCapability * _Nonnull)capability SWIFT_WARN_UNUSED_RESULT;
/// Sets preferred maximum video decoding settings.
/// remark:
///
/// The capability will be set internally by default according to the device type.
/// The default capability is <code>PlanetKitVideoCapability.callReceiveDefault</code>.
- (PlanetKitMakeCallSettingBuilder * _Nonnull)withMyVideoReceiveCapabilityKeyWithCapability:(PlanetKitVideoCapability * _Nonnull)capability SWIFT_WARN_UNUSED_RESULT;
/// Enables sending and receiving screen share video.
/// remark:
///
/// This setting is supported only for iOS.
/// The default setting is ‘false’, so if you don’t want to use screen share, do not use this key.
/// Set information for interworking with the broadcast extension.
- (PlanetKitMakeCallSettingBuilder * _Nonnull)withEnableScreenShareKeyWithBroadcastPort:(uint16_t)broadcastPort broadcastPeerToken:(NSString * _Nonnull)broadcastPeerToken broadcastMyToken:(NSString * _Nonnull)broadcastMyToken SWIFT_WARN_UNUSED_RESULT;
/// Sets the maximum network link bandwidth for sending.
/// remark:
///
/// If the <code>kbps</code> value is 0 or not given, it will use the internal value by default.
- (PlanetKitMakeCallSettingBuilder * _Nonnull)withMaxSendLinkBandwidthKeyWithKbps:(uint32_t)kbps SWIFT_WARN_UNUSED_RESULT;
/// Sets the maximum network link bandwidth for receiving.
/// remark:
///
/// If the <code>kbps</code> value is 0 or not given, it will use the internal value by default.
- (PlanetKitMakeCallSettingBuilder * _Nonnull)withMaxRecvLinkBandwidthKeyWithKbps:(uint32_t)kbps SWIFT_WARN_UNUSED_RESULT;
/// Ignores VPIO service configuration.
- (PlanetKitMakeCallSettingBuilder * _Nonnull)withIgnoreVpioServiceConfigKeyWithIgnore:(BOOL)ignore SWIFT_WARN_UNUSED_RESULT;
/// Disables MLNS and enables WebRTC NS.
/// remark:
///
/// The MLNS (Multi Level Noise Suppressor, or Machine Learning based Noise Suppressor) will be activated by default, if the machine has sufficient CPU power.
/// But, sometimes it produces unintended results and if you don’t want this, you can disable the MLNS feature by using this function.
/// Currently, the MLNS is disabled by default in iOS.
- (PlanetKitMakeCallSettingBuilder * _Nonnull)withDisableMLNSKeyWithDisable:(BOOL)disable SWIFT_WARN_UNUSED_RESULT;
/// Enables PlanetKit statistics.
/// remark:
///
/// Enable the PlanetKit statistics feature to use <code>PlanetKitCall.statistics</code>.
/// Statistics will be updated at 200-millisecond intervals.
- (PlanetKitMakeCallSettingBuilder * _Nonnull)withEnableStatisticsKeyWithEnable:(BOOL)enable SWIFT_WARN_UNUSED_RESULT;
/// Changes to a custom microphone controllable.
/// remark:
///
/// This is useful when a custom microphone controllable should be used for a call from the beginning.
- (PlanetKitMakeCallSettingBuilder * _Nonnull)withCustomMicKeyWithMic:(id <PlanetKitAudioMicControllable> _Nonnull)mic SWIFT_WARN_UNUSED_RESULT;
/// Changes to a custom speaker controllable.
/// remark:
///
/// This is useful when a custom speaker controllable should be used for a call from the beginning.
- (PlanetKitMakeCallSettingBuilder * _Nonnull)withCustomSpkKeyWithSpk:(id <PlanetKitAudioSpkControllable> _Nonnull)spk SWIFT_WARN_UNUSED_RESULT;
/// Changes to a custom camera controllable.
/// remark:
///
/// This is useful when a custom camera controllable should be used for a call from the beginning.
- (PlanetKitMakeCallSettingBuilder * _Nonnull)withCustomCameraKeyWithCamera:(id <PlanetKitCameraControllable> _Nonnull)camera SWIFT_WARN_UNUSED_RESULT;
/// Changes to a custom screen controllable.
/// remark:
///
/// This is useful when a custom screen controllable should be used for a call from the beginning.
- (PlanetKitMakeCallSettingBuilder * _Nonnull)withCustomScreenKeyWithScreen:(id <PlanetKitScreenControllable> _Nonnull)screen SWIFT_WARN_UNUSED_RESULT;
/// Changes to a custom camera stream.
/// remark:
///
/// This is useful when a custom camera stream should be used to implement a video modifier before the call starts.
- (PlanetKitMakeCallSettingBuilder * _Nonnull)withCustomCameraStreamKeyWithVideoStream:(PlanetKitVideoStream * _Nonnull)videoStream SWIFT_WARN_UNUSED_RESULT;
/// Changes to a custom screen share stream.
/// remark:
///
/// This is useful when a custom screen share stream should be used to implement a video modifier before the call starts.
- (PlanetKitMakeCallSettingBuilder * _Nonnull)withCustomScreenShareStreamKeyWithVideoStream:(PlanetKitVideoStream * _Nonnull)videoStream SWIFT_WARN_UNUSED_RESULT;
/// Sets CallKit settings.
/// remark:
///
/// Set <code>PlanetKitCallKitSetting.type</code> to <code>.planetKit</code> and set <code>PlanetKitCallKitSetting.param</code> to use PlanetKit’s internal CallKit.
/// Set <code>PlanetKitCallKitSetting.type</code> to <code>.user</code> if the application uses its own implementation of CallKit.
/// Make sure you call <code>PlanetKitCall.notifyCallKitAudioActivation()</code> on <code>CXProviderDelegate.provider(_ provider: CXProvider, didActivate audioSession: AVAudioSession)</code>.
/// Otherwise, set <code>PlanetKitCallKitSetting.type</code> to <code>.none</code>.
/// If <code>withCallKitSettingsKey</code> is not used, <code>PlanetKitCallKitSetting.type</code> will be <code>.none</code> by default.
/// Please note that it is recommended that CallKit and PushKit are used together to handle VoIP push notifications.
/// See more details at the link below.
/// https://developer.apple.com/documentation/pushkit/responding_to_voip_notifications_from_pushkit
- (PlanetKitMakeCallSettingBuilder * _Nonnull)withCallKitSettingsKeyWithSetting:(PlanetKitCallKitSetting * _Nonnull)setting SWIFT_WARN_UNUSED_RESULT;
/// Sets whether to enable the updated event of audio description.
/// remark:
///
/// The default value is enabled.
- (PlanetKitMakeCallSettingBuilder * _Nonnull)withEnableAudioDescriptionKeyWithEnable:(BOOL)enable SWIFT_WARN_UNUSED_RESULT;
/// Changes the interval for volume level updates.
/// remark:
///
/// The default interval is 0.5 seconds.
/// The minimum value is 0.2 seconds. If less, the interval is set to 0.2 seconds.
/// This interval value affects <code>PlanetKitCall.setPeerAudioDescriptionReceiver(_:)</code> and <code>PlanetKitCall.setMyAudioDescriptionReceiver(_:)</code>.
- (PlanetKitMakeCallSettingBuilder * _Nonnull)withAudioDescriptionUpdateIntervalKeyWithInterval:(NSTimeInterval)interval SWIFT_WARN_UNUSED_RESULT;
- (NSDictionary<NSString *, id> * _Nonnull)build SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// PlanetKit main API
SWIFT_CLASS("_TtC9PlanetKit16PlanetKitManager")
@interface PlanetKitManager : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PlanetKitManager * _Nonnull shared;)
+ (PlanetKitManager * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



@interface PlanetKitManager (SWIFT_EXTENSION(PlanetKit))
/// Initializes PlanetKit with custom settings by <code>PlanetKitInitialSettingBuilder</code>.
/// remark:
///
/// The <code>initialize(initialSettings:)</code> must be called once before using the PlanetKit API.
/// If you call <code>initialize(initialSettings:)</code> again, it is ignored because PlanetKit is already initialized.
/// If PlanetKit is already initialized, any subsequent call of <code>initialize(initialSettings:)</code> is ignored even if the method is called with new settings.
- (void)initializeWithInitialSettings:(NSDictionary<NSString *, id> * _Nonnull)initialSettings;
/// Updates partial settings with custom settings by <code>PlanetKitInitialSettingBuilder</code>.
/// <h2>Supported settings</h2>
/// <ul>
///   <li>
///     <code>PlanetKitInitialSettingBuilder.withSetKitServerKey(serverUrl:)</code>
///   </li>
///   <li>
///     <code>PlanetKitInitialSettingBuilder.withDisableKitCallKitKey(disable:)</code>
///   </li>
///   <li>
///     <code>PlanetKitInitialSettingBuilder.withDisableKitCameraKey(disable:)</code>
///   </li>
///   <li>
///     <code>PlanetKitInitialSettingBuilder.withSetKitVideoFormatBGRA32Key(bgra32:)</code>
///   </li>
///   <li>
///     <code>PlanetKitInitialSettingBuilder.withSetKitCameraFormatBGRA32Key(bgra32:)</code>
///   </li>
/// </ul>
- (void)updateWithInitialSettings:(NSDictionary<NSString *, id> * _Nonnull)settings;
@end


@interface PlanetKitManager (SWIFT_EXTENSION(PlanetKit))
/// Joins a conference.
/// <ul>
///   <li>
///     If a conference that matches the given information does not exist, a new conference is created and the local user joins the conference.
///   </li>
///   <li>
///     If a conference that matches the given information exists, the local user joins the existing conference.
///   </li>
/// </ul>
/// \param param Provide conference related parameters by using <code>PlanetKitConferenceParam</code>.
///
/// \param settings Configure the local user’s own settings using <code>PlanetKitJoinConferenceSettingBuilder</code>.
///
///
/// returns:
/// <code>PlanetKitConferenceJoinResult</code> with a new <code>PlanetKitConference</code> instance if successful, or with a fail reason otherwise.
- (PlanetKitConferenceJoinResult * _Nonnull)joinConferenceWithParam:(PlanetKitConferenceParam * _Nonnull)param settings:(NSDictionary<NSString *, id> * _Nullable)settings SWIFT_WARN_UNUSED_RESULT;
/// Gets the current conference.
@property (nonatomic, readonly, strong) PlanetKitConference * _Nullable conference;
@end

enum PlanetKitVideoHardwareStatus : NSInteger;

@interface PlanetKitManager (SWIFT_EXTENSION(PlanetKit))
@property (nonatomic, readonly) enum PlanetKitVideoHardwareStatus canSupportVideoHardware;
@property (nonatomic, readonly) BOOL canSupportVideoHardwareCodec;
@end



@interface PlanetKitManager (SWIFT_EXTENSION(PlanetKit))
/// Makes a new one-to-one call.
/// \param param Provide call related parameters by using <code>PlanetKitCallParam</code>.
///
///
/// returns:
/// <code>PlanetKitCallMakeResult</code> with a new <code>PlanetKitCall</code> instance if successful, or with a fail reason otherwise.
- (PlanetKitCallMakeResult * _Nonnull)makeCallWithParam:(PlanetKitCallParam * _Nonnull)param SWIFT_WARN_UNUSED_RESULT;
/// Makes a new one-to-one call with custom settings.
/// \param param Provide call related parameters by using <code>PlanetKitCallParam</code>.
///
/// \param settings Configure the local user’s own settings using <code>PlanetKitMakeCallSettingBuilder</code>.
///
///
/// returns:
/// <code>PlanetKitCallMakeResult</code> with a new <code>PlanetKitCall</code> instance if successful, or with a fail reason otherwise.
- (PlanetKitCallMakeResult * _Nonnull)makeCallWithParam:(PlanetKitCallParam * _Nonnull)param settings:(NSDictionary<NSString *, id> * _Nullable)settings SWIFT_WARN_UNUSED_RESULT;
/// Verifies an incoming call from the application server.
/// remark:
///
/// This function parses <code>PlanetKitCCParam</code> and verifies whether the incoming call is currently valid or not.
/// \param myUserId The local user’s user ID
///
/// \param ccParam ccParam of Push message received from APNs or long polling response
///
/// \param delegate Initial callback delegate
///
///
/// returns:
/// <code>PlanetKitCallVerifyResult</code> with a new <code>PlanetKitCall</code> instance if successful, or with a fail reason otherwise.
- (PlanetKitCallVerifyResult * _Nonnull)verifyCallWithMyUserId:(PlanetKitUserId * _Nonnull)myUserId ccParam:(PlanetKitCCParam * _Nonnull)ccParam delegate:(id <PlanetKitCallDelegate> _Nullable)delegate SWIFT_WARN_UNUSED_RESULT;
/// Verifies an incoming call from the application server with custom settings.
/// remark:
///
/// This function parses <code>PlanetKitCCParam</code> and verifies whether the incoming call is currently valid or not.
/// \param myUserId The local user’s user ID
///
/// \param ccParam ccParam of Push message
///
/// \param settings Configure the local user’s own settings using <code>PlanetKitVerifyCallSettingBuilder</code>.
///
/// \param delegate Initial callback delegate
///
///
/// returns:
/// <code>PlanetKitCallVerifyResult</code> with a new <code>PlanetKitCall</code> instance if successful, or with a fail reason otherwise.
- (PlanetKitCallVerifyResult * _Nonnull)verifyCallWithMyUserId:(PlanetKitUserId * _Nonnull)myUserId ccParam:(PlanetKitCCParam * _Nonnull)ccParam settings:(NSDictionary<NSString *, id> * _Nullable)settings delegate:(id <PlanetKitCallDelegate> _Nullable)delegate SWIFT_WARN_UNUSED_RESULT;
@end



@interface PlanetKitManager (SWIFT_EXTENSION(PlanetKit))
/// Gets the framework version.
@property (nonatomic, readonly, copy) NSString * _Nonnull version;
/// Gets detailed version information like userAgent.
/// remark:
///
/// It will be valid after <code>PlanetKitManager.initialize()</code> is called.
/// Format: https://tools.ietf.org/html/rfc7231#section-5.5.3
@property (nonatomic, readonly, copy) NSString * _Nonnull userAgent;
@property (nonatomic, readonly, copy) NSString * _Nonnull basePath;
@end




typedef SWIFT_ENUM(NSInteger, PlanetKitMediaDisableReason, closed) {
  PlanetKitMediaDisableReasonUndefined = 0,
  PlanetKitMediaDisableReasonUser = 1,
  PlanetKitMediaDisableReasonDecline = 2,
};

typedef SWIFT_ENUM(NSInteger, PlanetKitMediaType, closed) {
  PlanetKitMediaTypeUnknown = 0,
  PlanetKitMediaTypeAudio = 1,
  PlanetKitMediaTypeVideo = 2,
  PlanetKitMediaTypeAudiovideo = 3,
};

/// Types representing the mirrored state of the video.
/// This controls the horizontal flip functionality of the video.
typedef SWIFT_ENUM(NSInteger, PlanetKitMirroredType, closed) {
/// In iOS, the video is flipped horizontally if the video is from the local user’s front camera.
/// In macOS, the video is flipped horizontally by default.
  PlanetKitMirroredTypeAuto = 0,
/// The video is flipped horizontally.
  PlanetKitMirroredTypeMirrored = 1,
/// The video is displayed in its original state.
  PlanetKitMirroredTypeUnmirrored = 2,
};


SWIFT_CLASS("_TtC9PlanetKit27PlanetKitMyAudioDescription")
@interface PlanetKitMyAudioDescription : NSObject
/// Average audio volume level of microphone. The level ranges between 0 and 100.
@property (nonatomic, readonly) int8_t averageVolumeLevel;
/// Subgroup name of the last sent audio frame.
/// remark:
///
/// This value is valid only in the conference.
@property (nonatomic, readonly, copy) NSString * _Nullable destinationSubgroupName;
/// Tagged subgroup name of the last sent audio frame.
/// remark:
///
/// This value is valid only in the conference.
@property (nonatomic, readonly, copy) NSString * _Nullable taggedSubgroupName;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_PROTOCOL("_TtP9PlanetKit35PlanetKitMyAudioDescriptionDelegate_")
@protocol PlanetKitMyAudioDescriptionDelegate
/// Notifies the audio description at every interval seconds.
/// \param description The audio description for the local user’s audio information
///
- (void)myAudioDescriptionDidUpdate:(PlanetKitMyAudioDescription * _Nonnull)description;
@end

@protocol PlanetKitMyMediaStatusDelegate;

SWIFT_CLASS("_TtC9PlanetKit22PlanetKitMyMediaStatus")
@interface PlanetKitMyMediaStatus : NSObject
@property (nonatomic, readonly, strong) PlanetKitVideoStatus * _Nonnull videoStatus;
@property (nonatomic, readonly) enum PlanetKitScreenShareState screenShareState;
@property (nonatomic, readonly) BOOL isMyAudioMuted;
@property (nonatomic, readonly, copy) NSString * _Nullable audioSubgroupName;
@property (nonatomic, readonly, copy) NSString * _Nullable audioTaggedSubgroupName;
@property (nonatomic, readonly, copy) NSString * _Nullable videoSubgroupName;
@property (nonatomic, readonly, copy) NSString * _Nullable screenShareSubgroupName;
- (void)addHandler:(id <PlanetKitMyMediaStatusDelegate> _Nonnull)delegate completion:(void (^ _Nonnull)(BOOL))completion;
- (void)removeHandler:(id <PlanetKitMyMediaStatusDelegate> _Nonnull)delegate completion:(void (^ _Nonnull)(BOOL))completion;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




SWIFT_PROTOCOL("_TtP9PlanetKit30PlanetKitMyMediaStatusDelegate_")
@protocol PlanetKitMyMediaStatusDelegate
@optional
- (void)didUpdateVideoStatus:(PlanetKitMyMediaStatus * _Nonnull)myMediaStatus status:(PlanetKitVideoStatus * _Nonnull)status;
- (void)didUpdateVideoSubgroup:(PlanetKitMyMediaStatus * _Nonnull)myMediaStatus subgroupName:(NSString * _Nullable)subgroupName;
- (void)didUpdateScreenShareState:(PlanetKitMyMediaStatus * _Nonnull)myMediaStatus state:(enum PlanetKitScreenShareState)state;
- (void)didUpdateScreenShareSubgroup:(PlanetKitMyMediaStatus * _Nonnull)myMediaStatus subgroupName:(NSString * _Nullable)subgroupName;
- (void)didMuteMic:(PlanetKitMyMediaStatus * _Nonnull)myMediaStatus;
- (void)didUnmuteMic:(PlanetKitMyMediaStatus * _Nonnull)myMediaStatus;
- (void)didUpdateAudioSubgroup:(PlanetKitMyMediaStatus * _Nonnull)myMediaStatus sentSubgroupName:(NSString * _Nullable)sentSubgroupName taggedSubgroupName:(NSString * _Nullable)taggedSubgroupName;
- (void)didUpdateAudioDescription:(PlanetKitMyMediaStatus * _Nonnull)myMediaStatus description:(PlanetKitMyAudioDescription * _Nonnull)description;
@end

typedef SWIFT_ENUM(NSInteger, PlanetKitNSErrorCode, closed) {
  PlanetKitNSErrorCodeNoError = 0,
/// The target peer or requested user not exist in subgroup
  PlanetKitNSErrorCodePeerGetFailReasonNotInSubgroup = 2001,
/// The target peer already disconnected at the main room
  PlanetKitNSErrorCodePeerGetFailReasonDisconnected = 2002,
/// Undefined error
  PlanetKitNSErrorCodeUnknown = 9999,
};


SWIFT_CLASS("_TtC9PlanetKit16PlanetKitNetwork")
@interface PlanetKitNetwork : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




typedef SWIFT_ENUM(NSInteger, PlanetKitNoiseSuppressorMode, closed) {
  PlanetKitNoiseSuppressorModeDisabled = 0,
  PlanetKitNoiseSuppressorModeEnabled = 1,
};


SWIFT_CLASS("_TtC9PlanetKit28PlanetKitOutboundDataSession")
@interface PlanetKitOutboundDataSession : NSObject
@property (nonatomic, readonly) uint32_t streamId;
@property (nonatomic, readonly) enum PlanetKitDataSessionType type;
@property (nonatomic, readonly) uint64_t offset;
/// This property is only available in the conference.
@property (nonatomic, readonly, strong) PlanetKitUserId * _Nullable peerId;
/// This property is only available in the conference.
@property (nonatomic, readonly, copy) NSString * _Nullable subgroupName;
@property (nonatomic, weak) id <PlanetKitOutboundDataSessionDelegate> _Nullable delegate;
/// Provides data to send over the data session.
/// \param data Binary data to send
///
/// \param timestamp User-defined mark data to identify <code>data</code>
///
- (BOOL)sendWithData:(NSData * _Nonnull)data timestamp:(uint64_t)timestamp SWIFT_WARN_UNUSED_RESULT;
/// Changes the receiver peer target for the conference.
/// remark:
///
/// This function is only available in the conference.
/// If you want to send <code>data</code> to all peers, then set <code>peerId</code> to <code>nil</code>.
- (void)changeDestinationWithStreamId:(uint32_t)streamId peerId:(PlanetKitUserId * _Nullable)peerId completion:(void (^ _Nonnull)(BOOL))completion;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



SWIFT_PROTOCOL("_TtP9PlanetKit36PlanetKitOutboundDataSessionDelegate_")
@protocol PlanetKitOutboundDataSessionDelegate
- (void)didClose:(PlanetKitOutboundDataSession * _Nonnull)session reason:(enum PlanetKitDataSessionClosedReason)reason;
- (void)didTooLongQueuedData:(PlanetKitOutboundDataSession * _Nonnull)session enabled:(BOOL)enabled;
@end


SWIFT_CLASS("_TtC9PlanetKit29PlanetKitPeerAudioDescription")
@interface PlanetKitPeerAudioDescription : NSObject
/// Peer ID
@property (nonatomic, readonly, strong) PlanetKitUserId * _Nonnull peerId;
/// Average audio volume level from the speaker, which ranges between 0 and 100.
@property (nonatomic, readonly) int8_t averageVolumeLevel;
/// Subgroup name that is marked in the last received audio description.
/// remark:
///
/// This value is valid only in the conference.
@property (nonatomic, readonly, copy) NSString * _Nullable sentSubgroupName;
/// Tagged subgroup name that is marked in the last received audio description.
/// remark:
///
/// This value is valid only in the conference.
@property (nonatomic, readonly, copy) NSString * _Nullable taggedSubgroupName;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_PROTOCOL("_TtP9PlanetKit37PlanetKitPeerAudioDescriptionDelegate_")
@protocol PlanetKitPeerAudioDescriptionDelegate
/// Notifies the audio description at every interval seconds.
/// \param descriptions The audio description for peers’ audio information
///
- (void)peerAudioDescriptionsDidUpdate:(NSArray<PlanetKitPeerAudioDescription *> * _Nonnull)descriptions averageVolumeLevel:(int8_t)averageVolumeLevel;
@end


SWIFT_CLASS("_TtC9PlanetKit20PlanetKitPeerControl")
@interface PlanetKitPeerControl : NSObject
@property (nonatomic, readonly, strong) PlanetKitConferencePeer * _Nonnull peer;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@protocol PlanetKitPeerControlDelegate;

@interface PlanetKitPeerControl (SWIFT_EXTENSION(PlanetKit))
/// Starts receiving peer control events.
/// remark:
///
/// This must be paired with <code>PlanetKitPeerControl.unregister(completion:)</code>.
- (void)register:(id <PlanetKitPeerControlDelegate> _Nonnull)delegate completion:(void (^ _Nonnull)(BOOL))completion;
/// Stops receiving peer control events.
/// remark:
///
/// This must be paired with <code>PlanetKitPeerControl.register(_:completion:)</code>.
- (void)unregisterWithCompletion:(void (^ _Nonnull)(BOOL))completion;
@end




@interface PlanetKitPeerControl (SWIFT_EXTENSION(PlanetKit))
- (void)startScreenShareWithDelegate:(id <PlanetKitVideoOutputDelegate> _Nonnull)delegate subgroupName:(NSString * _Nullable)subgroupName completion:(void (^ _Nonnull)(BOOL))completion;
- (void)stopScreenShareWithCompletion:(void (^ _Nonnull)(BOOL))completion;
@end




@interface PlanetKitPeerControl (SWIFT_EXTENSION(PlanetKit))
/// Requests the target peer’s video.
/// remark:
///
/// Use the function with the resolution handler if the resulting resolution must be known.
/// Please refer to the document and use this API appropriately.
/// https://docs.lineplanet.me/iosmacos/extended-functions/peer-video-resolution-in-group-call
- (void)startVideoWithMaxResolution:(enum PlanetKitVideoResolution)maxResolution delegate:(id <PlanetKitVideoOutputDelegate> _Nonnull)delegate subgroupName:(NSString * _Nullable)subgroupName completion:(void (^ _Nonnull)(BOOL))completion;
/// Requests the target peer’s video.
/// remark:
///
/// Please refer to the document and use this API appropriately.
/// https://docs.lineplanet.me/iosmacos/extended-functions/peer-video-resolution-in-group-call
- (void)startVideoWithMaxResolution:(enum PlanetKitVideoResolution)maxResolution delegate:(id <PlanetKitVideoOutputDelegate> _Nonnull)delegate subgroupName:(NSString * _Nullable)subgroupName resolution:(void (^ _Nonnull)(BOOL, enum PlanetKitVideoResolution, enum PlanetKitVideoResolution, NSString * _Nonnull))resolution;
/// Stops the target peer’s video.
/// remark:
/// It will fail if the peer’s video has already been stopped.
- (void)stopVideoWithCompletion:(void (^ _Nonnull)(BOOL))completion;
@end


SWIFT_PROTOCOL("_TtP9PlanetKit28PlanetKitPeerControlDelegate_")
@protocol PlanetKitPeerControlDelegate
@optional
- (void)didMuteMic:(PlanetKitPeerControl * _Nonnull)peerControl;
- (void)didUnmuteMic:(PlanetKitPeerControl * _Nonnull)peerControl;
- (void)didUpdateVideo:(PlanetKitPeerControl * _Nonnull)peerControl subgroup:(PlanetKitSubgroup * _Nonnull)subgroup status:(PlanetKitVideoStatus * _Nonnull)status;
- (void)didUpdateScreenShare:(PlanetKitPeerControl * _Nonnull)peerControl subgroup:(PlanetKitSubgroup * _Nonnull)subgroup status:(PlanetKitScreenShareStatus * _Nonnull)status;
- (void)didSubscribeSubgroup:(PlanetKitPeerControl * _Nonnull)peerControl subgroup:(PlanetKitSubgroup * _Nonnull)subgroup;
- (void)didUnsubscribeSubgroup:(PlanetKitPeerControl * _Nonnull)peerControl subgroup:(PlanetKitSubgroup * _Nonnull)subgroup;
- (void)didHold:(PlanetKitPeerControl * _Nonnull)peerControl reason:(NSString * _Nonnull)reason;
- (void)didUnhold:(PlanetKitPeerControl * _Nonnull)peerControl;
- (void)didDisconnect:(PlanetKitPeerControl * _Nonnull)peerControl;
- (void)didSetSharedContents:(PlanetKitPeerControl * _Nonnull)peerControl data:(NSData * _Nonnull)data elapsedSeconds:(NSTimeInterval)elapsedSeconds;
- (void)didUnsetSharedContents:(PlanetKitPeerControl * _Nonnull)peerControl;
- (void)didUpdateAudioDescription:(PlanetKitPeerControl * _Nonnull)peerControl description:(PlanetKitPeerAudioDescription * _Nonnull)description;
@end

typedef SWIFT_ENUM(NSInteger, PlanetKitRecordOnCloudDeactivateReason, closed) {
  PlanetKitRecordOnCloudDeactivateReasonInternal = 0,
/// Recording failed on the cloud.
  PlanetKitRecordOnCloudDeactivateReasonActivationFailed = 1,
};


SWIFT_CLASS("_TtC9PlanetKit34PlanetKitRecordOnCloudUpdatedParam")
@interface PlanetKitRecordOnCloudUpdatedParam : NSObject
@property (nonatomic, readonly) BOOL activated;
@property (nonatomic, readonly) enum PlanetKitRecordOnCloudDeactivateReason deactivated;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, PlanetKitRenderingPolicy, closed) {
  PlanetKitRenderingPolicyDoubleBuffering = 0,
};

typedef SWIFT_ENUM(NSInteger, PlanetKitResponseOnEnableVideo, closed) {
/// Pauses the local user’s video when the peer calls <code>enableVideo(completion:)</code>. The local user must resume video later to start sending video.
  PlanetKitResponseOnEnableVideoPause = 0,
/// Starts the local user’s camera internally and sends the local user’s video when the peer calls <code>enableVideo(completion:)</code>.
  PlanetKitResponseOnEnableVideoSend = 1,
};


SWIFT_CLASS("_TtC9PlanetKit28PlanetKitScreenCaptureDevice")
@interface PlanetKitScreenCaptureDevice : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@protocol PlanetKitScreenInterruptDelegate;

SWIFT_PROTOCOL("_TtP9PlanetKit27PlanetKitScreenControllable_")
@protocol PlanetKitScreenControllable <PlanetKitFpsLimitUpdateDelegate>
@property (nonatomic, readonly, strong) PlanetKitScreenCaptureDevice * _Nullable currentDevice;
@property (nonatomic, strong) PlanetKitFrameRate * _Nonnull preferredFrameRate;
@property (nonatomic, readonly) BOOL isStart;
- (void)startWithDevice:(PlanetKitScreenCaptureDevice * _Nonnull)device completion:(void (^ _Nonnull)(BOOL))completion;
- (void)stopWithCompletion:(void (^ _Nonnull)(BOOL))completion;
- (void)changeWithDevice:(PlanetKitScreenCaptureDevice * _Nonnull)device completion:(void (^ _Nonnull)(BOOL))completion;
- (void)addInterruptReceiver:(id <PlanetKitScreenInterruptDelegate> _Nonnull)interruptReceiver;
- (void)removeInterruptReceiver:(id <PlanetKitScreenInterruptDelegate> _Nonnull)interruptReceiver;
@property (nonatomic, weak) id <PlanetKitVideoStreamDelegate> _Nullable delegate;
@end


SWIFT_PROTOCOL("_TtP9PlanetKit32PlanetKitScreenInterruptDelegate_")
@protocol PlanetKitScreenInterruptDelegate
- (void)scrDidInterruptCapture:(PlanetKitScreenCaptureDevice * _Nonnull)device;
@end

typedef SWIFT_ENUM(NSInteger, PlanetKitScreenShareState, closed) {
  PlanetKitScreenShareStateDisabled = 0,
  PlanetKitScreenShareStateEnabled = 1,
};


SWIFT_CLASS("_TtC9PlanetKit26PlanetKitScreenShareStatus")
@interface PlanetKitScreenShareStatus : NSObject
@property (nonatomic) enum PlanetKitScreenShareState state;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC9PlanetKit27PlanetKitSendVoiceProcessor")
@interface PlanetKitSendVoiceProcessor : NSObject
@property (nonatomic, readonly) BOOL isEnabled;
/// Gets the current Acoustic Echo Canceller mode.
/// remark:
///
/// The default value is <code>PlanetKitAcousticEchoCancellerMode.intensityRecommended</code>.
@property (nonatomic, readonly) enum PlanetKitAcousticEchoCancellerMode acousticEchoCancellerMode;
/// Gets the current Noise Suppressor mode.
/// remark:
///
/// The default value is <code>PlanetKitNoiseSuppressorMode.enabled</code>.
@property (nonatomic, readonly) enum PlanetKitNoiseSuppressorMode noiseSuppressorMode;
/// Gets the current Auto Gain Control mode.
/// remark:
///
/// The default value is <code>PlanetKitAutoGainControlMode.software</code>.
@property (nonatomic, readonly) enum PlanetKitAutoGainControlMode autoGainControlMode;
- (void)enableWithCompletion:(void (^ _Nonnull)(BOOL))completion;
- (void)disableWithCompletion:(void (^ _Nonnull)(BOOL))completion;
- (void)setAcousticEchoCancellerWithMode:(enum PlanetKitAcousticEchoCancellerMode)mode completion:(void (^ _Nonnull)(BOOL))completion;
/// Enables or disables Noise Suppressor.
- (void)setNoiseSuppressorWithMode:(enum PlanetKitNoiseSuppressorMode)mode completion:(void (^ _Nonnull)(BOOL))completion;
- (void)setAutoGainControlWithMode:(enum PlanetKitAutoGainControlMode)mode completion:(void (^ _Nonnull)(BOOL))completion;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



@class NSNotification;
@class PlanetKitSendVoiceProcessorChangeNotificationValue;

@interface PlanetKitSendVoiceProcessor (SWIFT_EXTENSION(PlanetKit))
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSNotificationName _Nonnull didChangeNotification;)
+ (NSNotificationName _Nonnull)didChangeNotification SWIFT_WARN_UNUSED_RESULT;
+ (PlanetKitSendVoiceProcessorChangeNotificationValue * _Nullable)queryChangeNotificationValueFrom:(NSNotification * _Nonnull)from SWIFT_WARN_UNUSED_RESULT;
@end

enum PlanetKitSendVoiceProcessorChangeOrigin : NSInteger;
enum PlanetKitSendVoiceProcessorTargetProperty : NSInteger;

SWIFT_CLASS("_TtC9PlanetKit50PlanetKitSendVoiceProcessorChangeNotificationValue")
@interface PlanetKitSendVoiceProcessorChangeNotificationValue : NSObject
@property (nonatomic, readonly) enum PlanetKitSendVoiceProcessorChangeOrigin origin;
@property (nonatomic, readonly) enum PlanetKitSendVoiceProcessorTargetProperty property;
@property (nonatomic, readonly) id _Nonnull value;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, PlanetKitSendVoiceProcessorChangeOrigin, closed) {
  PlanetKitSendVoiceProcessorChangeOriginUser = 0,
  PlanetKitSendVoiceProcessorChangeOriginVpio = 1,
};

typedef SWIFT_ENUM(NSInteger, PlanetKitSendVoiceProcessorTargetProperty, closed) {
  PlanetKitSendVoiceProcessorTargetPropertyEnable = 0,
  PlanetKitSendVoiceProcessorTargetPropertyAcousticEchoCanceller = 1,
  PlanetKitSendVoiceProcessorTargetPropertyNoiseSuppressor = 2,
  PlanetKitSendVoiceProcessorTargetPropertyAutoGainControl = 3,
};


SWIFT_CLASS("_TtC9PlanetKit23PlanetKitSharedContents")
@interface PlanetKitSharedContents : NSObject
@property (nonatomic, readonly, copy) NSData * _Nonnull data;
@property (nonatomic, readonly) NSTimeInterval elapsedSeconds;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Describes reasons when a call or conference start fails.
typedef SWIFT_ENUM(NSInteger, PlanetKitStartFailReason, closed) {
/// Success
  PlanetKitStartFailReasonNone = 0,
/// Some mandatory parameters are not provided.
  PlanetKitStartFailReasonInvalidParam = 1,
/// There already exists an unfinished call or conference with the same identifier.
/// <ul>
///   <li>
///     For calls, a set of my id, service-id, peer id and service-id is an identifier.
///   </li>
///   <li>
///     For conferences, a set of my id, service-id, room-id and room-service-id is an identifier.
///   </li>
/// </ul>
  PlanetKitStartFailReasonAlreadyExist = 2,
/// Failed to decode the argument of the <code>verifyCall(myUserId:ccParam:delegate:)</code> API.
  PlanetKitStartFailReasonDecodeCallParam = 3,
/// Failed to allocate memory for a call or conference.
  PlanetKitStartFailReasonMemoryError = 4,
/// The user ID of the callee or room ID must not be the same as the user ID.
  PlanetKitStartFailReasonIdConflict = 5,
/// Cannot re-use an instance for a new call or conference that has already been used before.
  PlanetKitStartFailReasonReuse = 6,
/// The user ID string is not in a valid format. Added since PlanetKit 4.0.
/// remark:
///
/// See more detail on https://docs.lineplanet.me/overview/glossary#user-id
  PlanetKitStartFailReasonInvalidUserId = 7,
/// The service ID string is not in a valid format. Added since PlanetKit 4.0.
/// remark:
///
/// See more detail on https://docs.lineplanet.me/overview/glossary#service-id
  PlanetKitStartFailReasonInvalidServiceId = 8,
/// The API-key string is not in a valid format. Added since PlanetKit 4.0.
/// remark:
///
/// See more detail on https://docs.lineplanet.me/overview/glossary#api-key
  PlanetKitStartFailReasonInvalidAPIKey = 9,
/// The room ID string is not in a valid format. Added since PlanetKit 4.0.
/// remark:
///
/// See more detail on https://docs.lineplanet.me/overview/glossary#room-id
  PlanetKitStartFailReasonInvalidRoomId = 10,
/// The App server data is too long. (Maximum size of app server data is 4096 bytes including null termination)
  PlanetKitStartFailReasonTooLongAppServerData = 11,
/// PlanetKit is not initialized.
  PlanetKitStartFailReasonNotInitialized = 12,
/// The media type is unknown. Please set the specific media type.
  PlanetKitStartFailReasonKitUnknownMediaType = 2001,
/// The room ID string is not in a valid format.
  PlanetKitStartFailReasonKitInvalidRoomId = 2002,
/// The peer ID (aka. user ID) string is not in a valid format.
  PlanetKitStartFailReasonKitInvalidPeerId = 2003,
/// The given push message is not in a valid format.
  PlanetKitStartFailReasonKitInvalidPushMessage = 2004,
/// No available Metal device to perform a video call or conference.
/// The video graphic chip doesn’t support Metal Graphic API.
  PlanetKitStartFailReasonKitNoMetalDevice = 2005,
/// The access token or the API key is not specified.
  PlanetKitStartFailReasonKitInvalidAuthentication = 2006,
/// The internal error caused by PlanetKit cannot be handled by the app developer.
/// Please ask PlanetKit developers to resolve the issue.
  PlanetKitStartFailReasonKitInternalInitializationError = 2999,
};

@class MyAudio;
@class PeersAudio;
@class MyVideo;
@class PeerVideo;
@class MyScreenShare;
@class PeerScreenShare;

SWIFT_CLASS("_TtC9PlanetKit19PlanetKitStatistics")
@interface PlanetKitStatistics : NSObject
@property (nonatomic, readonly, strong) MyAudio * _Nonnull myAudio;
@property (nonatomic, readonly, strong) PeersAudio * _Nonnull peersAudio;
@property (nonatomic, readonly, strong) MyVideo * _Nullable myVideo;
@property (nonatomic, readonly, copy) NSArray<PeerVideo *> * _Nonnull peerVideos;
@property (nonatomic, readonly, strong) MyScreenShare * _Nullable myScreenShare;
@property (nonatomic, readonly, copy) NSArray<PeerScreenShare *> * _Nonnull peerScreenShares;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface PlanetKitStatistics (SWIFT_EXTENSION(PlanetKit))
@end


@interface PlanetKitStatistics (SWIFT_EXTENSION(PlanetKit))
@end


@class PlanetKitSubgroupState;
@class PlanetKitSubgroupAttribute;

SWIFT_CLASS("_TtC9PlanetKit17PlanetKitSubgroup")
@interface PlanetKitSubgroup : NSObject
/// If it’s the subgroup of the main room, <code>subgroupName</code> returns <code>nil</code>.
@property (nonatomic, readonly, copy) NSString * _Nullable subgroupName;
@property (nonatomic, readonly) BOOL isSubscribed;
/// List of all peers subscribed to this group, except the local user.
/// Some peer information may have an invalid state, especially on the public subgroup.
@property (nonatomic, readonly, copy) NSArray<PlanetKitConferencePeer *> * _Nonnull peers;
/// Gets the subgroup state if this subgroup is subscribed.
/// remark:
///
/// The public subgroup will return <code>state</code> as <code>nil</code>, if the local user is not subscribed to the subgroup.
@property (nonatomic, readonly, strong) PlanetKitSubgroupState * _Nullable state;
/// Gets the subgroup attribute if this subgroup is subscribed.
/// remark:
///
/// The public subgroup will return <code>state</code> as <code>nil</code>, if the local user is not subscribed to the subgroup.
@property (nonatomic, readonly, strong) PlanetKitSubgroupAttribute * _Nullable attribute;
- (BOOL)isSubscribedWithPeerId:(PlanetKitUserId * _Nonnull)peerId SWIFT_WARN_UNUSED_RESULT;
- (PlanetKitConferencePeer * _Nullable)getPeerWithPeerId:(PlanetKitUserId * _Nonnull)peerId SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end






@interface PlanetKitSubgroup (SWIFT_EXTENSION(PlanetKit)) <PlanetKitDataSessionControllable>
/// Checks whether the subgroup supports data sessions.
@property (nonatomic, readonly) BOOL isSupportedDataSession;
/// Makes a new outbound data session for the subgroup.
/// \param streamId The predefined ID for the app. The ID must be in the range [100, 999].
///
/// \param type The type of the outbound data session.
///
/// \param delegate The event callback for the outbound data session.
///
/// \param completion If successful, the completion handler returns an outbound data session. Otherwise, the completion handler returns <code>nil</code>.
///
- (void)makeOutboundDataSessionWithStreamId:(uint32_t)streamId type:(enum PlanetKitDataSessionType)type delegate:(id <PlanetKitOutboundDataSessionDelegate> _Nonnull)delegate completion:(void (^ _Nonnull)(PlanetKitOutboundDataSession * _Nullable, enum PlanetKitDataSessionFailReason))completion;
/// Makes a new inbound data session for the subgroup.
/// \param streamId The predefined ID for the app. The ID must be in the range [100, 999].
///
/// \param delegate The event callback for the inbound data session.
///
/// \param completion If successful, the completion handler returns an inbound data session. Otherwise, the completion handler returns <code>nil</code>.
///
- (void)makeInboundDataSessionWithStreamId:(uint32_t)streamId delegate:(id <PlanetKitInboundDataSessionDelegate> _Nonnull)delegate completion:(void (^ _Nonnull)(PlanetKitInboundDataSession * _Nullable, enum PlanetKitDataSessionFailReason))completion;
/// Ignores receiving data for the given stream ID.
/// remark:
///
/// In a conference, when <code>PlanetKitConferenceDelegate.dataSessionIncoming(_:streamId:subgroup:type:)</code> occurs, the user must either call <code>makeInboundDataSession(streamId:delegate:completion:)</code> to receive the incoming data or call this function to ignore receiving the incoming data.
/// To ignore receiving data for the incoming stream ID, call <code>unsupportInboundDataSession(streamId:)</code> in <code>PlanetKitConferenceDelegate.dataSessionIncoming(_:streamId:subgroup:type:)</code>.
- (void)unsupportInboundDataSessionWithStreamId:(uint32_t)streamId;
/// Gets the existing outbound data session with the stream ID.
- (PlanetKitOutboundDataSession * _Nullable)getOutboundDataSessionWithStreamId:(uint32_t)streamId SWIFT_WARN_UNUSED_RESULT;
/// Gets the existing inbound data session with the stream ID.
- (PlanetKitInboundDataSession * _Nullable)getInboundDataSessionWithStreamId:(uint32_t)streamId SWIFT_WARN_UNUSED_RESULT;
@end


enum PlanetKitSubgroupPeerUpdateType : NSInteger;

SWIFT_CLASS("_TtC9PlanetKit26PlanetKitSubgroupAttribute")
@interface PlanetKitSubgroupAttribute : NSObject
@property (nonatomic, readonly) enum PlanetKitSubgroupPeerUpdateType peerUpdateType;
@property (nonatomic, readonly) BOOL enableVideoUpdate;
@property (nonatomic, readonly) BOOL useDataSession;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC9PlanetKit24PlanetKitSubgroupManager")
@interface PlanetKitSubgroupManager : NSObject
@property (nonatomic, readonly, strong) PlanetKitSubgroup * _Nonnull mainRoom;
@property (nonatomic, readonly, copy) NSArray<PlanetKitSubgroup *> * _Nonnull subgroups;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum PlanetKitSubgroupSubscribeFailReason : NSInteger;
enum PlanetKitSubgroupUnsubscribeFailReason : NSInteger;

@interface PlanetKitSubgroupManager (SWIFT_EXTENSION(PlanetKit))
/// Subscribes to a new subgroup or an existing subgroup using a name.
/// remark:
///
/// If the target subgroup exists and the given <code>peerUpdateType</code>, <code>videoUpdate</code>, or <code>useDataSession</code> is mismatched, it will fail with <code>PlanetKitSubgroupSubscribeFailReason.wrongAttribute</code>.
/// If this function runs successfully, the subgroup instance will be returned. If it fails, it will return nil.
/// \param subgroupName Subgroup’s name, where <code>nil</code> means the main room. Its maximum length is 15 with UTF-8 characters.
///
/// \param peerUpdateType Attribute that affects the callback event to refresh the peer list, <code>PlanetKitConferenceDelegate.peersDidUpdatePublicSubgroup(_:updated:)</code>.
///
/// \param videoUpdate Attribute that affects the callback event to refresh the video, <code>PlanetKitConferenceDelegate.peersVideoDidUpdate(_:updated:)</code>.
///
/// \param useDataSession Attribute that determines whether to enable data sessions.
///
/// \param completion The callback of the completion event.
///
- (void)subscribeWithSubgroupName:(NSString * _Nonnull)subgroupName peerUpdateType:(enum PlanetKitSubgroupPeerUpdateType)peerUpdateType videoUpdate:(BOOL)videoUpdate useDataSession:(BOOL)useDataSession completion:(void (^ _Nonnull)(PlanetKitSubgroup * _Nullable, enum PlanetKitSubgroupSubscribeFailReason))completion;
/// Unsubscribes from an already subscribed subgroup.
/// remark:
///
/// You should change the current audio or video route using <code>changeMyAudioDestination(subgroupName:completion:)</code> or <code>changeMyVideoDestination(subgroupName:completion:)</code> before unsubscribing.
/// Otherwise, you will get failed <code>PlanetKitSubgroupUnsubscribeFailReason.hasActiveAudio</code> or <code>PlanetKitSubgroupUnsubscribeFailReason.hasActiveVideo</code>.
/// \param subgroupName Name of the subgroup to unsubscribe from. Maximum length is 15 with UTF-8 characters.
///
/// \param completion The callback of the completion event.
///
- (void)unsubscribeWithSubgroupName:(NSString * _Nonnull)subgroupName completion:(void (^ _Nonnull)(PlanetKitSubgroup * _Nullable, enum PlanetKitSubgroupUnsubscribeFailReason))completion;
/// Gets the known subgroup including the main room.
- (PlanetKitSubgroup * _Nullable)getSubgroupWithSubgroupName:(NSString * _Nullable)subgroupName SWIFT_WARN_UNUSED_RESULT;
@end


@interface PlanetKitSubgroupManager (SWIFT_EXTENSION(PlanetKit))
/// Sets the peer volume level.
/// \param volumeLevel The audio volume range in percentage from 0 to 110. The 0 value is muted, 100 is original, and 110 will amplify original volume to +9dB.
///
/// \param peerId Target peer’s ID.
///
/// \param subgroupName Subgroup’s name, where <code>nil</code> means the main room.
///
/// \param allSubgroupsPeerSubscribed If this is <code>true</code>, the peer volume will be changed in all subgroups that the target peer is subscribed to.
///
/// \param completion The callback of completion event.
///
- (void)setPeerVolumeLevelSetting:(int8_t)volumeLevel peerId:(PlanetKitUserId * _Nonnull)peerId subgroupName:(NSString * _Nullable)subgroupName allSubgroupsPeerSubscribed:(BOOL)allSubgroupsPeerSubscribed completion:(void (^ _Nonnull)(BOOL))completion;
/// Silences or unsilences the target subgroup’s audio.
/// \param subgroupName Target subgroup name. Use <code>nil</code> for the main room.
///
/// \param silenced Set <code>true</code> to silence or <code>false</code> to unsilence.
///
/// \param completion The callback of completion event.
///
- (void)silencePeersAudioWithSubgroupName:(NSString * _Nullable)subgroupName silenced:(BOOL)silenced completion:(void (^ _Nonnull)(BOOL))completion;
/// Enables auto volume control with focus subgroup names.
/// remark:
///
/// You should provide all subgroup names at once to enable auto volume control.
/// If you exclude subgroup names, it will be disabled automatically.
/// \param focusSubgroupNames Array of subgroup names to enable auto volume control.
///
/// \param focusMainRoom Set <code>true</code> when you want to enable auto volume control on the main room.
///
/// \param completion The callback of completion event.
///
- (void)setPeersAudioAutoVolumeControlWithFocusSubgroupNames:(NSArray<NSString *> * _Nonnull)focusSubgroupNames focusMainRoom:(BOOL)focusMainRoom completion:(void (^ _Nonnull)(BOOL))completion;
/// Disables all auto volume control.
- (void)clearPeersAudioAutoVolumeControlWithCompletion:(void (^ _Nonnull)(BOOL))completion;
@end


@interface PlanetKitSubgroupManager (SWIFT_EXTENSION(PlanetKit))
- (void)changeMyVideoDestinationWithSubgroupName:(NSString * _Nonnull)subgroupName completion:(void (^ _Nonnull)(BOOL))completion;
- (void)changeMyVideoDestinationToMainRoomWithCompletion:(void (^ _Nonnull)(BOOL))completion;
- (void)changeMyAudioDestinationWithSubgroupName:(NSString * _Nonnull)subgroupName completion:(void (^ _Nonnull)(BOOL))completion;
- (void)changeMyAudioDestinationToMainRoomWithCompletion:(void (^ _Nonnull)(BOOL))completion;
- (void)setTagMyAudioOfMainRoomWithTaggedSubgroupName:(NSString * _Nonnull)taggedSubgroupName completion:(void (^ _Nonnull)(BOOL))completion;
- (void)clearTagMyAudioOfMainRoomWithCompletion:(void (^ _Nonnull)(BOOL))completion;
@end


typedef SWIFT_ENUM(NSInteger, PlanetKitSubgroupPeerUpdateType, closed) {
  PlanetKitSubgroupPeerUpdateTypeNone = 0,
  PlanetKitSubgroupPeerUpdateTypePublic = 1,
  PlanetKitSubgroupPeerUpdateTypePrivate = 2,
};


SWIFT_CLASS("_TtC9PlanetKit22PlanetKitSubgroupState")
@interface PlanetKitSubgroupState : NSObject
@property (nonatomic, readonly) BOOL isSilenced;
@property (nonatomic, readonly) BOOL isAutoVolumeFocused;
/// Gets the total peer count in the room. The count does not include the local user.
/// remark:
///
/// Initially, the peer list on the client-side does not contain the complete peer list.
/// The list is updated gradually as the VoIP server sends the remaining peer list to the client.
@property (nonatomic, readonly) NSInteger totalPeersCount;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, PlanetKitSubgroupSubscribeFailReason, closed) {
  PlanetKitSubgroupSubscribeFailReasonUndefined = 0,
  PlanetKitSubgroupSubscribeFailReasonTimeout = 1,
  PlanetKitSubgroupSubscribeFailReasonWrongAttribute = 2,
  PlanetKitSubgroupSubscribeFailReasonOverMaxSubgroupCount = 3,
  PlanetKitSubgroupSubscribeFailReasonAlreadySubscribed = 4,
  PlanetKitSubgroupSubscribeFailReasonUnknown = 1000,
};

typedef SWIFT_ENUM(NSInteger, PlanetKitSubgroupUnsubscribeFailReason, closed) {
  PlanetKitSubgroupUnsubscribeFailReasonUndefined = 0,
  PlanetKitSubgroupUnsubscribeFailReasonHasActiveAudio = 1,
  PlanetKitSubgroupUnsubscribeFailReasonHasActiveVideo = 2,
  PlanetKitSubgroupUnsubscribeFailReasonNotSubscribed = 3,
  PlanetKitSubgroupUnsubscribeFailReasonHasActiveScreenShare = 4,
  PlanetKitSubgroupUnsubscribeFailReasonUnknown = 1000,
};


SWIFT_CLASS("_TtC9PlanetKit15PlanetKitSystem")
@interface PlanetKitSystem : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PlanetKitSystem * _Nonnull shared;)
+ (PlanetKitSystem * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) double cpuUsage;
@property (nonatomic, readonly) double memoryUsageMb;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, PlanetKitUserEquipmentType, closed) {
  PlanetKitUserEquipmentTypeNone = 0,
  PlanetKitUserEquipmentTypeAndroid = 1,
  PlanetKitUserEquipmentTypeIos = 2,
  PlanetKitUserEquipmentTypeLinux = 3,
  PlanetKitUserEquipmentTypeMac = 4,
  PlanetKitUserEquipmentTypeWeb = 5,
  PlanetKitUserEquipmentTypeWindows = 6,
  PlanetKitUserEquipmentTypeSipTerminal = 7,
};


SWIFT_CLASS("_TtC9PlanetKit15PlanetKitUserId")
@interface PlanetKitUserId : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
@property (nonatomic, readonly, copy) NSString * _Nonnull serviceId;
@property (nonatomic, readonly, copy) NSString * _Nullable country;
/// This returns unique id like email aka <id>@<serviceId>.
@property (nonatomic, readonly, copy) NSString * _Nonnull uniqueId;
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id serviceId:(NSString * _Nonnull)serviceId OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithId:(NSString * _Nonnull)id serviceId:(NSString * _Nonnull)serviceId country:(NSString * _Nullable)country OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithString:(NSString * _Nullable)string OBJC_DESIGNATED_INITIALIZER;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC9PlanetKit33PlanetKitVerifyCallSettingBuilder")
@interface PlanetKitVerifyCallSettingBuilder : NSObject
/// Controls whether the local user’s video starts immediately or not when the peer calls <code>enableVideo(completion:)</code>.
/// The default value is <code>PlanetKitResponseOnEnableVideo.pause</code>.
/// See more on <code>PlanetKitResponseOnEnableVideo</code> and
/// visit https://docs.lineplanet.me/iosmacos/extended-functions/enable-video-call-from-audio-call.
- (PlanetKitVerifyCallSettingBuilder * _Nonnull)withResponseOnEnableVideoWithResponse:(enum PlanetKitResponseOnEnableVideo)response SWIFT_WARN_UNUSED_RESULT;
/// Allows a call without a microphone.
/// remark:
///
/// The default value is <code>false</code>.
/// When this value is <code>false</code>, if the system can’t access the microphone, it will cause <code>PlanetKitDisconnectReason.micNoSource</code> and end the call.
/// If you want to keep the call without microphone access, you should set this to <code>true</code>.
- (PlanetKitVerifyCallSettingBuilder * _Nonnull)withAllowCallWithoutMicKeyWithAllow:(BOOL)allow SWIFT_WARN_UNUSED_RESULT;
- (PlanetKitVerifyCallSettingBuilder * _Nullable)withSetRingToneKeyWithFileResourceUrl:(NSURL * _Nonnull)fileResourceUrl error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (PlanetKitVerifyCallSettingBuilder * _Nullable)withSetEndToneKeyWithFileResourceUrl:(NSURL * _Nonnull)fileResourceUrl error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (PlanetKitVerifyCallSettingBuilder * _Nullable)withSetHoldToneKeyWithFileResourceUrl:(NSURL * _Nonnull)fileResourceUrl error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Sets preferred maximum video encoding settings.
/// remark:
///
/// The capability will be set internally by default according to the device type.
/// The default capability is <code>PlanetKitVideoCapability.callSendDefault</code>.
- (PlanetKitVerifyCallSettingBuilder * _Nonnull)withMyVideoSendCapabilityKeyWithCapability:(PlanetKitVideoCapability * _Nonnull)capability SWIFT_WARN_UNUSED_RESULT;
/// Sets preferred maximum video decoding settings.
/// remark:
///
/// The capability will be set internally by default according to the device type.
/// The default capability is <code>PlanetKitVideoCapability.callReceiveDefault</code>.
- (PlanetKitVerifyCallSettingBuilder * _Nonnull)withMyVideoReceiveCapabilityKeyWithCapability:(PlanetKitVideoCapability * _Nonnull)capability SWIFT_WARN_UNUSED_RESULT;
/// Enables sending and receiving screen share video.
/// remark:
///
/// This setting is supported only for iOS.
/// The default setting is ‘false’, so if you don’t want to use screen share, do not use this key.
/// Set information for interworking with the broadcast extension.
- (PlanetKitVerifyCallSettingBuilder * _Nonnull)withEnableScreenShareKeyWithBroadcastPort:(uint16_t)broadcastPort broadcastPeerToken:(NSString * _Nonnull)broadcastPeerToken broadcastMyToken:(NSString * _Nonnull)broadcastMyToken SWIFT_WARN_UNUSED_RESULT;
/// Sets the maximum network link bandwidth for sending.
/// remark:
///
/// If the <code>kbps</code> value is 0 or not given, it will use the internal value by default.
- (PlanetKitVerifyCallSettingBuilder * _Nonnull)withMaxSendLinkBandwidthKeyWithKbps:(uint32_t)kbps SWIFT_WARN_UNUSED_RESULT;
/// Sets the maximum network link bandwidth for receiving.
/// remark:
///
/// If the <code>kbps</code> value is 0 or not given, it will use the internal value by default.
- (PlanetKitVerifyCallSettingBuilder * _Nonnull)withMaxRecvLinkBandwidthKeyWithKbps:(uint32_t)kbps SWIFT_WARN_UNUSED_RESULT;
/// Ignores VPIO service configuration.
- (PlanetKitVerifyCallSettingBuilder * _Nonnull)withIgnoreVpioServiceConfigKeyWithIgnore:(BOOL)ignore SWIFT_WARN_UNUSED_RESULT;
/// Disables MLNS and enables WebRTC NS.
/// remark:
///
/// The MLNS (Multi Level Noise Suppressor, or Machine Learning based Noise Suppressor) will be activated by default, if the machine has sufficient CPU power.
/// But, sometimes it produces unintended results and if you don’t want this, you can disable the MLNS feature by using this function.
/// Currently, the MLNS is disabled by default in iOS.
- (PlanetKitVerifyCallSettingBuilder * _Nonnull)withDisableMLNSKeyWithDisable:(BOOL)disable SWIFT_WARN_UNUSED_RESULT;
/// Enables PlanetKit statistics.
/// remark:
///
/// Enable the PlanetKit statistics feature to use <code>PlanetKitCall.statistics</code>.
/// Statistics will be updated at 200-millisecond intervals.
- (PlanetKitVerifyCallSettingBuilder * _Nonnull)withEnableStatisticsKeyWithEnable:(BOOL)enable SWIFT_WARN_UNUSED_RESULT;
/// Changes to a custom microphone controllable.
/// remark:
///
/// This is useful when a custom microphone controllable should be used for a call from the beginning.
- (PlanetKitVerifyCallSettingBuilder * _Nonnull)withCustomMicKeyWithMic:(id <PlanetKitAudioMicControllable> _Nonnull)mic SWIFT_WARN_UNUSED_RESULT;
/// Changes to a custom speaker controllable.
/// remark:
///
/// This is useful when a custom speaker controllable should be used for a call from the beginning.
- (PlanetKitVerifyCallSettingBuilder * _Nonnull)withCustomSpkKeyWithSpk:(id <PlanetKitAudioSpkControllable> _Nonnull)spk SWIFT_WARN_UNUSED_RESULT;
/// Changes to a custom camera controllable.
/// remark:
///
/// This is useful when a custom camera controllable should be used for a call from the beginning.
- (PlanetKitVerifyCallSettingBuilder * _Nonnull)withCustomCameraKeyWithCamera:(id <PlanetKitCameraControllable> _Nonnull)camera SWIFT_WARN_UNUSED_RESULT;
/// Changes to a custom screen controllable.
/// remark:
///
/// This is useful when a custom screen controllable should be used for a call from the beginning.
- (PlanetKitVerifyCallSettingBuilder * _Nonnull)withCustomScreenKeyWithScreen:(id <PlanetKitScreenControllable> _Nonnull)screen SWIFT_WARN_UNUSED_RESULT;
/// Changes to a custom camera stream.
/// remark:
///
/// This is useful when a custom camera stream should be used to implement a video modifier before the call starts.
- (PlanetKitVerifyCallSettingBuilder * _Nonnull)withCustomCameraStreamKeyWithVideoStream:(PlanetKitVideoStream * _Nonnull)videoStream SWIFT_WARN_UNUSED_RESULT;
/// Changes to a custom screen share stream.
/// remark:
///
/// This is useful when a custom screen share stream should be used to implement a video modifier before the call starts.
- (PlanetKitVerifyCallSettingBuilder * _Nonnull)withCustomScreenShareStreamKeyWithVideoStream:(PlanetKitVideoStream * _Nonnull)videoStream SWIFT_WARN_UNUSED_RESULT;
/// Sets CallKit settings.
/// remark:
///
/// Set <code>PlanetKitCallKitSetting.type</code> to <code>.planetKit</code> and set <code>PlanetKitCallKitSetting.param</code> to use PlanetKit’s internal CallKit.
/// Set <code>PlanetKitCallKitSetting.type</code> to <code>.user</code> if the application uses its own implementation of CallKit.
/// Make sure you call <code>PlanetKitCall.notifyCallKitAudioActivation()</code> on <code>CXProviderDelegate.provider(_ provider: CXProvider, didActivate audioSession: AVAudioSession)</code>.
/// Otherwise, set <code>PlanetKitCallKitSetting.type</code> to <code>.none</code>.
/// If <code>withCallKitSettingsKey</code> is not used, <code>PlanetKitCallKitSetting.type</code> will be <code>.none</code> by default.
/// Please note that it is recommended that CallKit and PushKit are used together to handle VoIP push notifications.
/// See more details at the link below.
/// https://developer.apple.com/documentation/pushkit/responding_to_voip_notifications_from_pushkit
- (PlanetKitVerifyCallSettingBuilder * _Nonnull)withCallKitSettingsKeyWithSetting:(PlanetKitCallKitSetting * _Nonnull)setting SWIFT_WARN_UNUSED_RESULT;
/// Sets whether to enable the updated event of audio description.
/// remark:
///
/// The default value is enabled.
- (PlanetKitVerifyCallSettingBuilder * _Nonnull)withEnableAudioDescriptionKeyWithEnable:(BOOL)enable SWIFT_WARN_UNUSED_RESULT;
/// Changes the interval for volume level updates.
/// remark:
///
/// The default interval is 0.5 seconds.
/// The minimum value is 0.2 seconds. If less, the interval is set to 0.2 seconds.
/// This interval value affects <code>PlanetKitCall.setPeerAudioDescriptionReceiver(_:)</code> and <code>PlanetKitCall.setMyAudioDescriptionReceiver(_:)</code>.
- (PlanetKitVerifyCallSettingBuilder * _Nonnull)withAudioDescriptionUpdateIntervalKeyWithInterval:(NSTimeInterval)interval SWIFT_WARN_UNUSED_RESULT;
- (NSDictionary<NSString *, id> * _Nonnull)build SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

enum PlanetKitVideoSource : NSInteger;

SWIFT_CLASS("_TtC9PlanetKit20PlanetKitVideoBuffer")
@interface PlanetKitVideoBuffer : NSObject
@property (nonatomic) CMSampleBufferRef _Nullable sampleBuffer;
@property (nonatomic) CMTime timestamp;
@property (nonatomic) enum PlanetKitVideoRotation rotation;
@property (nonatomic) enum PlanetKitCameraPosition position;
/// sender will be nil for my PlanetKitVideoBuffer
@property (nonatomic, strong) PlanetKitUserId * _Nullable sender;
@property (nonatomic) enum PlanetKitVideoSource source;
- (nonnull instancetype)initWithSampleBuffer:(CMSampleBufferRef _Nullable)sampleBuffer timestamp:(CMTime)timestamp rotation:(enum PlanetKitVideoRotation)rotation position:(enum PlanetKitCameraPosition)position sender:(PlanetKitUserId * _Nullable)sender source:(enum PlanetKitVideoSource)source OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithPixelBuffer:(CVPixelBufferRef _Nullable)pixelBuffer sampleBuffer:(CMSampleBufferRef _Nullable)sampleBuffer timestamp:(CMTime)timestamp rotation:(enum PlanetKitVideoRotation)rotation position:(enum PlanetKitCameraPosition)position sender:(PlanetKitUserId * _Nullable)sender source:(enum PlanetKitVideoSource)source OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


enum PlanetKitVideoFps : NSInteger;

SWIFT_CLASS("_TtC9PlanetKit24PlanetKitVideoCapability")
@interface PlanetKitVideoCapability : NSObject
@property (nonatomic) enum PlanetKitVideoResolution resolution;
@property (nonatomic) enum PlanetKitVideoFps fps;
@property (nonatomic) BOOL preferredHwCodec;
- (nonnull instancetype)initWithResolution:(enum PlanetKitVideoResolution)resolution fps:(enum PlanetKitVideoFps)fps OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PlanetKitVideoCapability * _Nonnull callSendDefault;)
+ (PlanetKitVideoCapability * _Nonnull)callSendDefault SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PlanetKitVideoCapability * _Nonnull callReceiveDefault;)
+ (PlanetKitVideoCapability * _Nonnull)callReceiveDefault SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PlanetKitVideoCapability * _Nonnull conferenceSendDefault;)
+ (PlanetKitVideoCapability * _Nonnull)conferenceSendDefault SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class AVCaptureDevice;

SWIFT_CLASS("_TtC9PlanetKit27PlanetKitVideoCaptureDevice")
@interface PlanetKitVideoCaptureDevice : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
@property (nonatomic, readonly, copy) NSString * _Nonnull uniqueID;
@property (nonatomic, readonly, strong) AVCaptureDevice * _Nonnull device;
@property (nonatomic, readonly) BOOL isAvailable;
/// Sets the preferred preset for the camera resolution.
/// If the given preset is not supported in the capture device, it will be determined by PlanetKit by default.
@property (nonatomic) AVCaptureSessionPreset _Nonnull preferredPreset;
/// Sets the preferred frame rate.
/// remark:
///
/// PlanetKit will collect frame rates supported by the given camera device in the range from <code>minFps</code> to <code>maxFps</code>, and pick a higher frame rate for the best video quality.
/// If you set <code>PlanetKitCameraFrameRate.minFps</code> to zero, <code>minFps</code> will be determined by PlanetKit by default.
/// If you set <code>PlanetKitCameraFrameRate.maxFps</code> to zero, <code>maxFps</code> will be determined by PlanetKit by default.
@property (nonatomic, strong) PlanetKitFrameRate * _Nonnull preferredFrameRate;
/// Rotates the camera image clockwise by the rotation value.
@property (nonatomic, strong) NSNumber * _Nullable rotation;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


typedef SWIFT_ENUM(NSInteger, PlanetKitVideoFps, closed) {
  PlanetKitVideoFpsUndefined = 0,
  PlanetKitVideoFpsFps5 = 5,
  PlanetKitVideoFpsFps10 = 10,
  PlanetKitVideoFpsFps15 = 15,
  PlanetKitVideoFpsFps24 = 24,
  PlanetKitVideoFpsFps30 = 30,
};

typedef SWIFT_ENUM(NSInteger, PlanetKitVideoHardwareStatus, closed) {
  PlanetKitVideoHardwareStatusAvailable = 0,
  PlanetKitVideoHardwareStatusNoMetalDevice = 1,
};



SWIFT_PROTOCOL("_TtP9PlanetKit30PlanetKitVideoModifierDelegate_")
@protocol PlanetKitVideoModifierDelegate
- (void)videoOutput:(PlanetKitVideoBuffer * _Nonnull)videoBuffer;
@end


typedef SWIFT_ENUM(NSInteger, PlanetKitVideoPauseReason, closed) {
  PlanetKitVideoPauseReasonUnknown = 0,
  PlanetKitVideoPauseReasonUser = 1,
  PlanetKitVideoPauseReasonInterrupt = 2,
  PlanetKitVideoPauseReasonUndefined = 3,
  PlanetKitVideoPauseReasonInternal = 4,
  PlanetKitVideoPauseReasonEnableVideoResponse = 5,
  PlanetKitVideoPauseReasonCameraInactive = 6,
  PlanetKitVideoPauseReasonHold = 7,
};

typedef SWIFT_ENUM(NSInteger, PlanetKitVideoResolution, closed) {
  PlanetKitVideoResolutionUnknown = 0,
  PlanetKitVideoResolutionRecommended = 1,
  PlanetKitVideoResolutionThumbnail = 2,
  PlanetKitVideoResolutionQvga = 3,
  PlanetKitVideoResolutionVga = 4,
  PlanetKitVideoResolutionHd = 5,
};

typedef SWIFT_ENUM(int32_t, PlanetKitVideoRotation, closed) {
  PlanetKitVideoRotationRotation0 = 0,
  PlanetKitVideoRotationRotation90 = 1,
  PlanetKitVideoRotationRotation180 = 2,
  PlanetKitVideoRotationRotation270 = 3,
};

typedef SWIFT_ENUM(NSInteger, PlanetKitVideoSource, closed) {
  PlanetKitVideoSourceCamera = 0,
  PlanetKitVideoSourceScreen = 1,
};

typedef SWIFT_ENUM(NSInteger, PlanetKitVideoState, closed) {
  PlanetKitVideoStateDisabled = 0,
  PlanetKitVideoStateEnabled = 1,
  PlanetKitVideoStatePaused = 2,
};


SWIFT_CLASS("_TtC9PlanetKit20PlanetKitVideoStatus")
@interface PlanetKitVideoStatus : NSObject
@property (nonatomic, readonly) enum PlanetKitVideoState state;
@property (nonatomic, readonly) enum PlanetKitVideoPauseReason pauseReason;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC9PlanetKit20PlanetKitVideoStream")
@interface PlanetKitVideoStream : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly) BOOL fpsLimitEnabled;
@property (nonatomic, readonly) uint32_t fps;
@property (nonatomic, weak) id <PlanetKitVideoModifierDelegate> _Nullable modifier;
/// <code>PlanetKitVideoLimiterDelegate</code> is used to check if the PlanetKit SDK is able to send the video data.
/// When implementing a custom data source using <code>PlanetKitCameraControllable</code> or <code>PlanetKitScreenControllable</code>, you can further optimize the custom module by processing the data only when <code>PlanetKitCall/Conference.myCameraStream.limiter.isVideoSendAvailable()</code> or <code>PlanetKitCall/Conference.myScreenShareStream.limiter.isScreenShareSendAvailable()</code> is <code>true</code>.
@property (nonatomic, readonly, weak) id <PlanetKitVideoLimiterDelegate> _Nullable limiter;
- (void)addReceiver:(id <PlanetKitVideoOutputDelegate> _Nonnull)videoOutDelegate;
- (void)removeReceiver:(id <PlanetKitVideoOutputDelegate> _Nonnull)videoOutDelegate;
@end


SWIFT_PROTOCOL("_TtP9PlanetKit28PlanetKitVideoStreamDelegate_")
@protocol PlanetKitVideoStreamDelegate
- (void)videoOutput:(PlanetKitVideoBuffer * _Nonnull)videoBuffer;
@end


@interface PlanetKitVideoStream (SWIFT_EXTENSION(PlanetKit)) <PlanetKitVideoStreamDelegate>
- (void)videoOutput:(PlanetKitVideoBuffer * _Nonnull)videoBuffer;
@end


enum PlanetKitVirtualBackgroundType : NSInteger;
@class CIImage;

/// <code>PlanetKitVirtualBackground</code> enables the detection and segmentation of human subjects from the background in the <code>PlanetKitCamera</code> video feeds.
/// remark:
/// Please note that this feature is compatible with iPhone 12 and newer models, as well as MacBook devices equipped with the Apple Silicon processor.
SWIFT_CLASS("_TtC9PlanetKit26PlanetKitVirtualBackground")
@interface PlanetKitVirtualBackground : NSObject
@property (nonatomic, readonly) enum PlanetKitVirtualBackgroundType type;
@property (nonatomic, readonly, strong) CIImage * _Nullable image;
/// Specifies the radius for the Gaussian blur applied to the virtual background.
/// remark:
/// Through our testing, a value of <code>15.0</code> has been found to provide a good balance of blur effect.
/// Adjust this value to increase or decrease the blur intensity as required.
/// <ul>
///   <li>
///     See: https://developer.apple.com/documentation/coreimage/cigaussianblur
///   </li>
/// </ul>
@property (nonatomic, readonly) float blurRadius;
- (nonnull instancetype)initWithImage:(CIImage * _Nonnull)image OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithBlurRadius:(float)blurRadius OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, PlanetKitVirtualBackgroundType, closed) {
  PlanetKitVirtualBackgroundTypeNone = 0,
  PlanetKitVirtualBackgroundTypeBlur = 1,
  PlanetKitVirtualBackgroundTypeImage = 2,
};


SWIFT_CLASS("_TtC9PlanetKit20PlanetKitVolumeLevel")
@interface PlanetKitVolumeLevel : NSObject
@property (nonatomic) int8_t value;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
